// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const crypto = require("crypto");
const fs = require("fs");
const path = require("path");
const defaults = require("./defaults");
const defaults_1 = require("./defaults");
function getVerifyCommand() {
    switch (process.platform) {
        case "win32":
            const script = path.resolve(__dirname, "..\\scripts\\verify.ps1");
            return `powershell -ExecutionPolicy Bypass -File "${script}" "${defaults.certificateName}"`;
        case "darwin": // macOS
            return `security find-certificate -c '${defaults.certificateName}' -p | openssl x509 -checkend 86400 -noout`;
        default:
            throw new Error(`Platform not supported: ${process.platform}`);
    }
}
function isCaCertificateInstalled() {
    const command = getVerifyCommand();
    try {
        const output = child_process_1.execSync(command, { stdio: "pipe" }).toString();
        if (process.platform === "darwin") {
            return true;
        }
        else if (output.length !== 0) {
            return true; // powershell command return empty string if the certificate not-found/expired
        }
    }
    catch (error) {
        // Mac security command throws error if the certifcate is not-found/expired
    }
    return false;
}
exports.isCaCertificateInstalled = isCaCertificateInstalled;
function validateCertificateAndKey(certificatePath, keyPath) {
    let certificate = "";
    let key = "";
    try {
        certificate = fs.readFileSync(certificatePath).toString();
    }
    catch (err) {
        throw new Error(`Unable to read the certificate.\n${err}`);
    }
    try {
        key = fs.readFileSync(keyPath).toString();
    }
    catch (err) {
        throw new Error(`Unable to read the certificate key.\n${err}`);
    }
    let encrypted;
    try {
        encrypted = crypto.publicEncrypt(certificate, Buffer.from("test"));
    }
    catch (err) {
        throw new Error(`The certificate is not valid.\n${err}`);
    }
    try {
        crypto.privateDecrypt(key, encrypted);
    }
    catch (err) {
        throw new Error(`The certificate key is not valid.\n${err}`);
    }
}
function verifyCertificates(certificatePath = defaults.localhostCertificatePath, keyPath = defaults.localhostKeyPath) {
    try {
        let isCertificateValid = true;
        try {
            validateCertificateAndKey(certificatePath, keyPath);
        }
        catch (err) {
            isCertificateValid = false;
        }
        let output = isCertificateValid && isCaCertificateInstalled();
        defaults_1.usageDataObject.sendUsageDataSuccessEvent("verifyCertificates");
        return output;
    }
    catch (err) {
        defaults_1.usageDataObject.sendUsageDataException("verifyCertificates", err);
        throw err;
    }
}
exports.verifyCertificates = verifyCertificates;
//# sourceMappingURL=verify.js.map