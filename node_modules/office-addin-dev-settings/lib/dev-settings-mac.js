// copyright (c) Microsoft Corporation. All rights reserved.
// licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const junk = require("junk");
const office_addin_manifest_1 = require("office-addin-manifest");
const os = require("os");
const path = require("path");
const dev_settings_1 = require("./dev-settings");
function getRegisteredAddIns() {
    return __awaiter(this, void 0, void 0, function* () {
        const registeredAddins = [];
        for (const app of office_addin_manifest_1.getOfficeApps()) {
            const sideloadDirectory = getSideloadDirectory(app);
            if (sideloadDirectory && fs.existsSync(sideloadDirectory)) {
                for (const fileName of fs.readdirSync(sideloadDirectory).filter(junk.not)) {
                    const manifestPath = fs.realpathSync(path.join(sideloadDirectory, fileName));
                    const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
                    registeredAddins.push(new dev_settings_1.RegisteredAddin(manifest.id || "", manifestPath));
                }
            }
        }
        return registeredAddins;
    });
}
exports.getRegisteredAddIns = getRegisteredAddIns;
function getSideloadDirectory(app) {
    switch (app) {
        case office_addin_manifest_1.OfficeApp.Excel:
            return path.join(os.homedir(), "Library/Containers/com.microsoft.Excel/Data/Documents/wef");
        case office_addin_manifest_1.OfficeApp.PowerPoint:
            return path.join(os.homedir(), "Library/Containers/com.microsoft.Powerpoint/Data/Documents/wef");
        case office_addin_manifest_1.OfficeApp.Word:
            return path.join(os.homedir(), "Library/Containers/com.microsoft.Word/Data/Documents/wef");
    }
}
function registerAddIn(manifestPath, officeApps) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            if (!officeApps) {
                officeApps = office_addin_manifest_1.getOfficeAppsForManifestHosts(manifest.hosts);
                if (officeApps.length === 0) {
                    throw new Error("The manifest file doesn't specify any hosts for the Office Add-in.");
                }
            }
            if (!manifest.id) {
                throw new Error("The manifest file doesn't contain the id of the Office Add-in.");
            }
            for (const app of officeApps) {
                const sideloadDirectory = getSideloadDirectory(app);
                if (sideloadDirectory) {
                    // include manifest id in sideload filename
                    const sideloadPath = path.join(sideloadDirectory, `${manifest.id}.${path.basename(manifestPath)}`);
                    fs.ensureDirSync(sideloadDirectory);
                    fs.ensureLinkSync(manifestPath, sideloadPath);
                }
            }
        }
        catch (err) {
            throw new Error(`Unable to register the Office Add-in.\n${err}`);
        }
    });
}
exports.registerAddIn = registerAddIn;
function unregisterAddIn(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
        if (!manifest.id) {
            throw new Error("The manifest file doesn't contain the id of the Office Add-in.");
        }
        const registeredAddIns = yield getRegisteredAddIns();
        for (const registeredAddIn of registeredAddIns) {
            const registeredFileName = path.basename(registeredAddIn.manifestPath);
            const manifestFileName = path.basename(manifestPath);
            const sideloadFileName = `${manifest.id}.${manifestFileName}`;
            if ((registeredFileName === manifestFileName)
                || (registeredFileName === sideloadFileName)) {
                fs.unlinkSync(registeredAddIn.manifestPath);
            }
        }
    });
}
exports.unregisterAddIn = unregisterAddIn;
function unregisterAllAddIns() {
    return __awaiter(this, void 0, void 0, function* () {
        const registeredAddIns = yield getRegisteredAddIns();
        for (const registeredAddIn of registeredAddIns) {
            fs.unlinkSync(registeredAddIn.manifestPath);
        }
    });
}
exports.unregisterAllAddIns = unregisterAllAddIns;
//# sourceMappingURL=dev-settings-mac.js.map