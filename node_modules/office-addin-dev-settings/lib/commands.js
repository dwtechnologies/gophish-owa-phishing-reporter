// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const office_addin_cli_1 = require("office-addin-cli");
const office_addin_manifest_1 = require("office-addin-manifest");
const appcontainer_1 = require("./appcontainer");
const devSettings = require("./dev-settings");
const sideload_1 = require("./sideload");
function appcontainer(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        if (appcontainer_1.isAppcontainerSupported()) {
            try {
                if (command.loopback) {
                    try {
                        const askForConfirmation = (command.yes !== true);
                        const allowed = yield appcontainer_1.ensureLoopbackIsEnabled(manifestPath, askForConfirmation);
                        console.log(allowed ? "Loopback is allowed." : "Loopback is not allowed.");
                    }
                    catch (err) {
                        throw new Error(`Unable to allow loopback for the appcontainer. \n${err}`);
                    }
                }
                else if (command.preventLoopback) {
                    try {
                        const name = yield appcontainer_1.getAppcontainerNameFromManifestPath(manifestPath);
                        yield appcontainer_1.removeLoopbackExemptionForAppcontainer(name);
                        console.log(`Loopback is no longer allowed.`);
                    }
                    catch (err) {
                        throw new Error(`Unable to disallow loopback. \n${err}`);
                    }
                }
                else {
                    try {
                        const name = yield appcontainer_1.getAppcontainerNameFromManifestPath(manifestPath);
                        const allowed = yield appcontainer_1.isLoopbackExemptionForAppcontainer(name);
                        console.log(allowed ? "Loopback is allowed." : "Loopback is not allowed.");
                    }
                    catch (err) {
                        throw new Error(`Unable to determine if appcontainer allows loopback. \n${err}`);
                    }
                }
            }
            catch (err) {
                office_addin_cli_1.logErrorMessage(err);
            }
        }
        else {
            console.log("Appcontainer is not supported.");
        }
    });
}
exports.appcontainer = appcontainer;
function clear(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            validateManifestId(manifest);
            yield devSettings.clearDevSettings(manifest.id);
            console.log("Developer settings have been cleared.");
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.clear = clear;
function debugging(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (command.enable) {
                yield enableDebugging(manifestPath, command);
            }
            else if (command.disable) {
                yield disableDebugging(manifestPath);
            }
            else {
                yield isDebuggingEnabled(manifestPath);
            }
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.debugging = debugging;
function displaySourceBundleUrl(components) {
    console.log(`host: ${components.host !== undefined ? `"${components.host}"` : '"localhost" (default)'}`);
    console.log(`port: ${components.port !== undefined ? `"${components.port}"` : '"8081" (default)'}`);
    console.log(`path: ${components.path !== undefined ? `"${components.path}"` : "(default)"}`);
    console.log(`extension: ${components.extension !== undefined ? `"${components.extension}"` : '".bundle" (default)'}`);
    console.log();
    console.log(`Source bundle url: ${components.url}`);
    console.log();
}
function disableDebugging(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            validateManifestId(manifest);
            yield devSettings.disableDebugging(manifest.id);
            console.log("Debugging has been disabled.");
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.disableDebugging = disableDebugging;
function disableLiveReload(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            validateManifestId(manifest);
            yield devSettings.disableLiveReload(manifest.id);
            console.log("Live reload has been disabled.");
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.disableLiveReload = disableLiveReload;
function disableRuntimeLogging() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield devSettings.disableRuntimeLogging();
            console.log("Runtime logging has been disabled.");
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.disableRuntimeLogging = disableRuntimeLogging;
function enableDebugging(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            validateManifestId(manifest);
            yield devSettings.enableDebugging(manifest.id, true, toDebuggingMethod(command.debugMethod));
            console.log("Debugging has been enabled.");
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.enableDebugging = enableDebugging;
function enableLiveReload(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            validateManifestId(manifest);
            yield devSettings.enableLiveReload(manifest.id);
            console.log("Live reload has been enabled.");
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.enableLiveReload = enableLiveReload;
function enableRuntimeLogging(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const logPath = yield devSettings.enableRuntimeLogging(path);
            console.log(`Runtime logging has been enabled. File: ${logPath}`);
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.enableRuntimeLogging = enableRuntimeLogging;
function getSourceBundleUrl(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            validateManifestId(manifest);
            const components = yield devSettings.getSourceBundleUrl(manifest.id);
            displaySourceBundleUrl(components);
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.getSourceBundleUrl = getSourceBundleUrl;
function isDebuggingEnabled(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            validateManifestId(manifest);
            const enabled = yield devSettings.isDebuggingEnabled(manifest.id);
            console.log(enabled
                ? "Debugging is enabled."
                : "Debugging is not enabled.");
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.isDebuggingEnabled = isDebuggingEnabled;
function isLiveReloadEnabled(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            validateManifestId(manifest);
            const enabled = yield devSettings.isLiveReloadEnabled(manifest.id);
            console.log(enabled
                ? "Live reload is enabled."
                : "Live reload is not enabled.");
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.isLiveReloadEnabled = isLiveReloadEnabled;
function isRuntimeLoggingEnabled() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const path = yield devSettings.getRuntimeLoggingPath();
            console.log(path
                ? `Runtime logging is enabled. File: ${path}`
                : "Runtime logging is not enabled.");
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.isRuntimeLoggingEnabled = isRuntimeLoggingEnabled;
function liveReload(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        if (command.enable) {
            yield enableLiveReload(manifestPath);
        }
        else if (command.disable) {
            yield disableLiveReload(manifestPath);
        }
        else {
            yield isLiveReloadEnabled(manifestPath);
        }
    });
}
exports.liveReload = liveReload;
function parseStringCommandOption(optionValue) {
    return (typeof (optionValue) === "string") ? optionValue : undefined;
}
function parseWebViewType(webViewString) {
    switch (webViewString ? webViewString.toLowerCase() : undefined) {
        case "ie":
        case "ie11":
        case "internet explorer":
        case "internetexplorer":
            return devSettings.WebViewType.IE;
        case "edge":
        case "spartan":
            return devSettings.WebViewType.Edge;
        case "edge chromium":
        case "edgechromium":
        case "anaheim":
            return devSettings.WebViewType.EdgeChromium;
        case "default":
        case "":
        case null:
        case undefined:
            return undefined;
        default:
            throw new Error(`Please select a valid web view type instead of '${webViewString}'.`);
    }
}
exports.parseWebViewType = parseWebViewType;
function register(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield devSettings.registerAddIn(manifestPath);
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.register = register;
function registered(command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const registeredAddins = yield devSettings.getRegisterAddIns();
            if (registeredAddins.length > 0) {
                for (const addin of registeredAddins) {
                    let id = addin.id;
                    if (!id && addin.manifestPath) {
                        try {
                            const manifest = yield office_addin_manifest_1.readManifestFile(addin.manifestPath);
                            id = manifest.id || "";
                        }
                        catch (err) {
                            // ignore errors
                        }
                    }
                    console.log(`${id ? id + " " : ""}${addin.manifestPath}`);
                }
            }
            else {
                console.log("No add-ins are registered.");
            }
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.registered = registered;
function runtimeLogging(command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (command.enable) {
                const path = (typeof (command.enable) === "string") ? command.enable : undefined;
                yield enableRuntimeLogging(path);
            }
            else if (command.disable) {
                yield disableRuntimeLogging();
            }
            else {
                yield isRuntimeLoggingEnabled();
            }
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.runtimeLogging = runtimeLogging;
function sideload(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const app = command.app ? office_addin_manifest_1.parseOfficeApp(command.app) : undefined;
            const canPrompt = true;
            yield sideload_1.sideloadAddIn(manifestPath, app, canPrompt);
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.sideload = sideload;
function setSourceBundleUrl(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            const host = parseStringCommandOption(command.host);
            const port = parseStringCommandOption(command.port);
            const path = parseStringCommandOption(command.path);
            const extension = parseStringCommandOption(command.extension);
            const components = new devSettings.SourceBundleUrlComponents(host, port, path, extension);
            validateManifestId(manifest);
            yield devSettings.setSourceBundleUrl(manifest.id, components);
            console.log("Configured source bundle url.");
            displaySourceBundleUrl(yield devSettings.getSourceBundleUrl(manifest.id));
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.setSourceBundleUrl = setSourceBundleUrl;
function sourceBundleUrl(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (command.host !== undefined || command.port !== undefined || command.path !== undefined || command.extension !== undefined) {
                yield setSourceBundleUrl(manifestPath, command);
            }
            else {
                yield getSourceBundleUrl(manifestPath);
            }
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.sourceBundleUrl = sourceBundleUrl;
function toDebuggingMethod(text) {
    switch (text) {
        case "direct":
            return devSettings.DebuggingMethod.Direct;
        case "proxy":
            return devSettings.DebuggingMethod.Proxy;
        case "":
        case null:
        case undefined:
            // preferred debug method
            return devSettings.DebuggingMethod.Direct;
        default:
            throw new Error(`Please provide a valid debug method instead of '${text}'.`);
    }
}
function unregister(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (manifestPath === "all") {
                yield devSettings.unregisterAllAddIns();
            }
            else {
                yield devSettings.unregisterAddIn(manifestPath);
            }
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.unregister = unregister;
function validateManifestId(manifest) {
    if (!manifest.id) {
        throw new Error(`The manifest file doesn't contain the id of the Office Add-in.`);
    }
}
function webView(manifestPath, webViewString) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
            validateManifestId(manifest);
            let webViewType;
            if (webViewString === undefined) {
                webViewType = yield devSettings.getWebView(manifest.id);
            }
            else {
                webViewType = parseWebViewType(webViewString);
                yield devSettings.setWebView(manifest.id, webViewType);
            }
            console.log(webViewType
                ? `The web view type is set to ${webViewType}.`
                : "The web view type has not been set.");
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.webView = webView;
//# sourceMappingURL=commands.js.map