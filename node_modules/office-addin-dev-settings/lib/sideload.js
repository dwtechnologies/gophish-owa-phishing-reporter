// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const jszip = require("jszip");
const office_addin_manifest_1 = require("office-addin-manifest");
const open = require("open");
const os = require("os");
const path = require("path");
const util = require("util");
const dev_settings_1 = require("./dev-settings");
const prompt_1 = require("./prompt");
const readFileAsync = util.promisify(fs.readFile);
/**
 * Create an Office document in the temporary files directory
 * which can be opened to launch the Office app and load the add-in.
 * @param app Office app
 * @param manifest Manifest for the add-in.
 * @returns Path to the file.
 */
function generateSideloadFile(app, manifest) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!manifest.id) {
            throw new Error("The manifest does not contain the id for the add-in.");
        }
        if (!manifest.officeAppType) {
            throw new Error("The manifest does not contain the OfficeApp xsi:type.");
        }
        if (!manifest.version) {
            throw new Error("The manifest does not contain the version for the add-in.");
        }
        const addInType = office_addin_manifest_1.getAddInTypeForManifestOfficeAppType(manifest.officeAppType);
        if (!addInType) {
            throw new Error("The manifest contains an unsupported OfficeApp xsi:type.");
        }
        const templatePath = getTemplatePath(app, addInType);
        if (!templatePath) {
            throw new Error("Sideload is not supported.");
        }
        const templateBuffer = yield readFileAsync(templatePath);
        const zip = yield jszip.loadAsync(templateBuffer);
        const webExtensionPath = getWebExtensionPath(app, addInType);
        if (!webExtensionPath) {
            throw new Error("Don't know the webextension path.");
        }
        const appName = office_addin_manifest_1.getOfficeAppName(app);
        const extension = path.extname(templatePath);
        const pathToWrite = makePathUnique(path.join(os.tmpdir(), `${appName} add-in ${manifest.id}${extension}`), true);
        // replace the placeholder id and version
        const webExtensionXml = (yield zip.file(webExtensionPath).async("text"))
            .replace(/00000000-0000-0000-0000-000000000000/g, manifest.id)
            .replace(/1.0.0.0/g, manifest.version);
        zip.file(webExtensionPath, webExtensionXml);
        // Write the file
        yield new Promise((resolve, reject) => {
            zip
                .generateNodeStream({ type: "nodebuffer", streamFiles: true })
                .pipe(fs.createWriteStream(pathToWrite))
                .on("error", reject)
                .on("finish", resolve);
        });
        return pathToWrite;
    });
}
/**
 * Returns the path to the document used as a template for sideloading,
 * or undefined if sideloading is not supported.
 * @param app Specifies the Office app.
 * @param addInType Specifies the type of add-in.
 */
function getTemplatePath(app, addInType) {
    switch (app) {
        case office_addin_manifest_1.OfficeApp.Excel:
            switch (addInType) {
                case office_addin_manifest_1.AddInType.Content:
                    return path.resolve(__dirname, "../templates/ExcelWorkbookWithContent.xlsx");
                case office_addin_manifest_1.AddInType.TaskPane:
                    return path.resolve(__dirname, "../templates/ExcelWorkbookWithTaskPane.xlsx");
            }
            break;
        case office_addin_manifest_1.OfficeApp.PowerPoint:
            switch (addInType) {
                case office_addin_manifest_1.AddInType.Content:
                    return path.resolve(__dirname, "../templates/PowerPointPresentationWithContent.pptx");
                case office_addin_manifest_1.AddInType.TaskPane:
                    return path.resolve(__dirname, "../templates/PowerPointPresentationWithTaskPane.pptx");
            }
            break;
        case office_addin_manifest_1.OfficeApp.Word:
            switch (addInType) {
                case office_addin_manifest_1.AddInType.TaskPane:
                    return path.resolve(__dirname, "../templates/WordDocumentWithTaskPane.docx");
            }
            break;
    }
}
/**
 * Returns the web extension path in the sideload document.
 * @param app Specifies the Office app.
 * @param addInType Specifies the type of add-in.
 */
function getWebExtensionPath(app, addInType) {
    switch (app) {
        case office_addin_manifest_1.OfficeApp.Excel:
            return "xl/webextensions/webextension.xml";
        case office_addin_manifest_1.OfficeApp.PowerPoint:
            switch (addInType) {
                case office_addin_manifest_1.AddInType.Content:
                    return "ppt/slides/udata/data.xml";
                case office_addin_manifest_1.AddInType.TaskPane:
                    return "ppt/webextensions/webextension.xml";
            }
            break;
        case office_addin_manifest_1.OfficeApp.Word:
            return "word/webextensions/webextension.xml";
    }
}
/**
 * Given a file path, returns a unique file path where the file doesn't exist by
 * appending a period and a numeric suffix, starting from 2.
 * @param tryToDelete If true, first try to delete the file if it exists.
 */
function makePathUnique(originalPath, tryToDelete = false) {
    let currentPath = originalPath;
    let parsedPath = null;
    let suffix = 1;
    while (fs.existsSync(currentPath)) {
        let deleted = false;
        if (tryToDelete) {
            try {
                fs.unlinkSync(currentPath);
                deleted = true;
            }
            catch (err) {
                // no error (file is in use)
            }
        }
        if (!deleted) {
            ++suffix;
            if (parsedPath == null) {
                parsedPath = path.parse(originalPath);
            }
            currentPath = path.join(parsedPath.dir, `${parsedPath.name}.${suffix}${parsedPath.ext}`);
        }
    }
    return currentPath;
}
/**
 * Starts the Office app and loads the Office Add-in.
 * @param manifestPath Path to the manifest file for the Office Add-in.
 * @param app Office app to launch.
 * @param canPrompt
 */
function sideloadAddIn(manifestPath, app, canPrompt = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const manifest = yield office_addin_manifest_1.readManifestFile(manifestPath);
        const appsInManifest = office_addin_manifest_1.getOfficeAppsForManifestHosts(manifest.hosts);
        if (app) {
            if (appsInManifest.indexOf(app) < 0) {
                throw new Error(`The Office Add-in manifest does not support ${office_addin_manifest_1.getOfficeAppName(app)}.`);
            }
        }
        else {
            switch (appsInManifest.length) {
                case 0:
                    throw new Error("The manifest does not support any Office apps.");
                case 1:
                    app = appsInManifest[0];
                    break;
                default:
                    if (canPrompt) {
                        app = yield prompt_1.chooseOfficeApp(appsInManifest);
                    }
                    else {
                        throw new Error("Please specify the Office app.");
                    }
                    break;
            }
        }
        yield dev_settings_1.registerAddIn(manifestPath);
        if (app) {
            const sideloadFile = yield generateSideloadFile(app, manifest);
            yield open(sideloadFile, { wait: false });
        }
    });
}
exports.sideloadAddIn = sideloadAddIn;
//# sourceMappingURL=sideload.js.map