// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const inquirer = require("inquirer");
const office_addin_manifest_1 = require("office-addin-manifest");
function chooseOfficeApp(apps) {
    return __awaiter(this, void 0, void 0, function* () {
        const questionName = "app";
        const question = {
            choices: apps.map(app => {
                return { name: office_addin_manifest_1.getOfficeAppName(app), value: app };
            }).sort((first, second) => first.name.localeCompare(second.name)),
            message: "Which Office app?",
            name: questionName,
            type: "list",
        };
        const answer = yield inquirer.prompt([question]);
        const choice = answer[questionName];
        return choice;
    });
}
exports.chooseOfficeApp = chooseOfficeApp;
//# sourceMappingURL=prompt.js.map