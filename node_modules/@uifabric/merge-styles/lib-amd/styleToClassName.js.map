{"version":3,"file":"styleToClassName.js","sourceRoot":"../src/","sources":["styleToClassName.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRawStyle, IStyle } from './IStyle';\n\nimport { Stylesheet } from './Stylesheet';\nimport { kebabRules } from './transforms/kebabRules';\nimport { prefixRules } from './transforms/prefixRules';\nimport { provideUnits } from './transforms/provideUnits';\nimport { rtlifyRules } from './transforms/rtlifyRules';\n\nconst DISPLAY_NAME = 'displayName';\n\n// tslint:disable-next-line:no-any\ntype IDictionary = { [key: string]: any };\n\ninterface IRuleSet {\n  __order: string[];\n  [key: string]: IDictionary;\n}\n\nfunction getDisplayName(rules?: { [key: string]: IRawStyle }): string | undefined {\n  const rootStyle: IStyle = rules && rules['&'];\n\n  return rootStyle ? (rootStyle as IRawStyle).displayName : undefined;\n}\n\nconst globalSelectorRegExp = /\\:global\\((.+?)\\)/g;\n\ntype ReplacementInfo = [number, number, string];\n\n/**\n * Finds comma separated selectors in a :global() e.g. \":global(.class1, .class2, .class3)\"\n * and wraps them each in their own global \":global(.class1), :global(.class2), :global(.class3)\"\n *\n * @param selectorWithGlobals The selector to process\n * @returns The updated selector\n */\nfunction expandCommaSeparatedGlobals(selectorWithGlobals: string): string {\n  // We the selector does not have a :global() we can shortcut\n  if (!globalSelectorRegExp.test(selectorWithGlobals)) {\n    return selectorWithGlobals;\n  }\n\n  const replacementInfo: ReplacementInfo[] = [];\n\n  const findGlobal = /\\:global\\((.+?)\\)/g;\n  let match = null;\n  // Create a result list for global selectors so we can replace them.\n  while ((match = findGlobal.exec(selectorWithGlobals))) {\n    // Only if the found selector is a comma separated list we'll process it.\n    if (match[1].indexOf(',') > -1) {\n      replacementInfo.push([\n        match.index,\n        match.index + match[0].length,\n        // Wrap each of the found selectors in :global()\n        match[1]\n          .split(',')\n          .map((v: string) => `:global(${v.trim()})`)\n          .join(', ')\n      ]);\n    }\n  }\n\n  // Replace the found selectors with their wrapped variants in reverse order\n  return replacementInfo.reverse().reduce((selector: string, [matchIndex, matchEndIndex, replacement]: ReplacementInfo) => {\n    const prefix = selector.slice(0, matchIndex);\n    const suffix = selector.slice(matchEndIndex);\n\n    return prefix + replacement + suffix;\n  }, selectorWithGlobals);\n}\n\nfunction expandSelector(newSelector: string, currentSelector: string): string {\n  if (newSelector.indexOf(':global(') >= 0) {\n    return newSelector.replace(globalSelectorRegExp, '$1');\n  } else if (newSelector.indexOf(':') === 0) {\n    return currentSelector + newSelector;\n  } else if (newSelector.indexOf('&') < 0) {\n    return currentSelector + ' ' + newSelector;\n  }\n\n  return newSelector;\n}\n\nfunction extractRules(args: IStyle[], rules: IRuleSet = { __order: [] }, currentSelector: string = '&'): IRuleSet {\n  const stylesheet = Stylesheet.getInstance();\n  let currentRules: IDictionary | undefined = rules[currentSelector] as IDictionary;\n\n  if (!currentRules) {\n    currentRules = {};\n    rules[currentSelector] = currentRules;\n    rules.__order.push(currentSelector);\n  }\n\n  for (const arg of args) {\n    // If the arg is a string, we need to look up the class map and merge.\n    if (typeof arg === 'string') {\n      const expandedRules = stylesheet.argsFromClassName(arg);\n\n      if (expandedRules) {\n        extractRules(expandedRules, rules, currentSelector);\n      }\n      // Else if the arg is an array, we need to recurse in.\n    } else if (Array.isArray(arg)) {\n      extractRules(arg, rules, currentSelector);\n    } else {\n      // tslint:disable-next-line:no-any\n      for (const prop in arg as any) {\n        if (prop === 'selectors') {\n          // tslint:disable-next-line:no-any\n          const selectors: { [key: string]: IStyle } = (arg as any).selectors;\n\n          for (let newSelector in selectors) {\n            if (selectors.hasOwnProperty(newSelector)) {\n              const selectorValue = selectors[newSelector];\n\n              if (newSelector.indexOf('@') === 0) {\n                newSelector = newSelector + '{' + currentSelector;\n                extractRules([selectorValue], rules, newSelector);\n              } else if (newSelector.indexOf(',') > -1) {\n                expandCommaSeparatedGlobals(newSelector)\n                  .split(',')\n                  .map((s: string) => s.trim())\n                  .forEach((separatedSelector: string) =>\n                    extractRules([selectorValue], rules, expandSelector(separatedSelector, currentSelector))\n                  );\n              } else {\n                extractRules([selectorValue], rules, expandSelector(newSelector, currentSelector));\n              }\n            }\n          }\n        } else {\n          if ((arg as any)[prop] !== undefined) {\n            // Else, add the rule to the currentSelector.\n            if (prop === 'margin' || prop === 'padding') {\n              // tslint:disable-next-line:no-any\n              expandQuads(currentRules, prop, (arg as any)[prop]);\n            } else {\n              // tslint:disable-next-line:no-any\n              (currentRules as any)[prop] = (arg as any)[prop] as any;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return rules;\n}\n\nfunction expandQuads(currentRules: IDictionary, name: string, value: string): void {\n  const parts = typeof value === 'string' ? value.split(' ') : [value];\n\n  currentRules[name + 'Top'] = parts[0];\n  currentRules[name + 'Right'] = parts[1] || parts[0];\n  currentRules[name + 'Bottom'] = parts[2] || parts[0];\n  currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];\n}\n\nfunction getKeyForRules(rules: IRuleSet): string | undefined {\n  const serialized: string[] = [];\n  let hasProps = false;\n\n  for (const selector of rules.__order) {\n    serialized.push(selector);\n    const rulesForSelector = rules[selector];\n\n    for (const propName in rulesForSelector) {\n      if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {\n        hasProps = true;\n        serialized.push(propName, rulesForSelector[propName]);\n      }\n    }\n  }\n\n  return hasProps ? serialized.join('') : undefined;\n}\n\nexport function serializeRuleEntries(ruleEntries: { [key: string]: string | number }): string {\n  if (!ruleEntries) {\n    return '';\n  }\n\n  const allEntries: (string | number)[] = [];\n\n  for (const entry in ruleEntries) {\n    if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {\n      allEntries.push(entry, ruleEntries[entry]);\n    }\n  }\n\n  // Apply transforms.\n  for (let i = 0; i < allEntries.length; i += 2) {\n    kebabRules(allEntries, i);\n    provideUnits(allEntries, i);\n    rtlifyRules(allEntries, i);\n    prefixRules(allEntries, i);\n  }\n\n  // Apply punctuation.\n  for (let i = 1; i < allEntries.length; i += 4) {\n    allEntries.splice(i, 1, ':', allEntries[i], ';');\n  }\n\n  return allEntries.join('');\n}\n\nexport interface IRegistration {\n  className: string;\n  key: string;\n  args: IStyle[];\n  rulesToInsert: string[];\n}\n\nexport function styleToRegistration(...args: IStyle[]): IRegistration | undefined {\n  const rules: IRuleSet = extractRules(args);\n  const key = getKeyForRules(rules);\n\n  if (key) {\n    const stylesheet = Stylesheet.getInstance();\n    const registration: Partial<IRegistration> = {\n      className: stylesheet.classNameFromKey(key),\n      key,\n      args\n    };\n\n    if (!registration.className) {\n      registration.className = stylesheet.getClassName(getDisplayName(rules));\n      const rulesToInsert: string[] = [];\n\n      for (const selector of rules.__order) {\n        rulesToInsert.push(selector, serializeRuleEntries(rules[selector]));\n      }\n      registration.rulesToInsert = rulesToInsert;\n    }\n\n    return registration as IRegistration;\n  }\n}\n\nexport function applyRegistration(registration: IRegistration): void {\n  const stylesheet = Stylesheet.getInstance();\n  const { className, key, args, rulesToInsert } = registration;\n\n  if (rulesToInsert) {\n    // rulesToInsert is an ordered array of selector/rule pairs.\n    for (let i = 0; i < rulesToInsert.length; i += 2) {\n      const rules = rulesToInsert[i + 1];\n      if (rules) {\n        let selector = rulesToInsert[i];\n\n        selector = selector.replace(/&/g, '.' + registration.className);\n\n        // Insert. Note if a media query, we must close the query with a final bracket.\n        const processedRule = `${selector}{${rules}}${selector.indexOf('@') === 0 ? '}' : ''}`;\n\n        stylesheet.insertRule(processedRule);\n      }\n    }\n    stylesheet.cacheClassName(className!, key!, args!, rulesToInsert);\n  }\n}\n\nexport function styleToClassName(...args: IStyle[]): string {\n  const registration = styleToRegistration(...args);\n  if (registration) {\n    applyRegistration(registration);\n\n    return registration.className;\n  }\n\n  return '';\n}\n"]}