{"version":3,"file":"ThemeProvider.js","sourceRoot":"../src/","sources":["ThemeProvider.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,gBAAgB,EAAwB,MAAM,mBAAmB,CAAC;AAC3E,OAAO,EAAE,UAAU,EAAoB,MAAM,qBAAqB,CAAC;AAOnE;;;;;GAKG;AACH,MAAM,CAAC,IAAM,aAAa,GAAiD,UAAC,KAA0B;IAC5F,IAAA,qBAAM,EAAE,mBAAK,EAAE,iDAAO,CAAW;IAEzC,0HAA0H;IAC1H,8HAA8H;IAC9H,2CAA2C;IAC3C,mCAAmC;IACnC,IAAM,gBAAgB,GAAyC,UAAA,OAAO;QACpE,OAAO,gBAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC;IAEF,OAAO,oBAAC,UAAU,uBAAK,IAAI,IAAE,gBAAgB,EAAE,gBAAgB,IAAI,CAAC;AACtE,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { getThemedContext, ISchemeNames, ITheme } from '@uifabric/styling';\nimport { Customizer, ICustomizerProps } from '@uifabric/utilities';\n\nexport interface IThemeProviderProps {\n  scheme?: ISchemeNames;\n  theme?: ITheme;\n}\n\n/**\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\n * for a given scheme name.\n *\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\n */\nexport const ThemeProvider: React.FunctionComponent<IThemeProviderProps> = (props: IThemeProviderProps) => {\n  const { scheme, theme, ...rest } = props;\n\n  // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme in context\n  //        and uses quick global store accessor to trigger change by passing in theme object as child and triggering re-render.\n  //        (perf benefits need verification)\n  // tslint:disable-next-line:typedef\n  const contextTransform: ICustomizerProps['contextTransform'] = context => {\n    return getThemedContext(context, scheme, theme);\n  };\n\n  return <Customizer {...rest} contextTransform={contextTransform} />;\n};\n"]}