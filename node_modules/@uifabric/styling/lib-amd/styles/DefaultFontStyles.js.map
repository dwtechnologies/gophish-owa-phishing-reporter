{"version":3,"file":"DefaultFontStyles.js","sourceRoot":"../src/","sources":["styles/DefaultFontStyles.ts"],"names":[],"mappings":"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","sourcesContent":["import { fontFace, IFontWeight } from '@uifabric/merge-styles';\nimport { IFontStyles } from '../interfaces/index';\nimport { createFontStyles, FontWeights, LocalizedFontFamilies, LocalizedFontNames } from './fonts';\nimport { getLanguage, getWindow } from '@uifabric/utilities';\nimport { IFabricConfig } from '../interfaces/IFabricConfig';\n\n// Default urls.\nconst DefaultBaseUrl = 'https://static2.sharepointonline.com/files/fabric/assets';\n\n// Standard font styling.\nexport const DefaultFontStyles: IFontStyles = createFontStyles(getLanguage());\n\nfunction _registerFontFace(fontFamily: string, url: string, fontWeight?: IFontWeight, localFontName?: string): void {\n  fontFamily = `'${fontFamily}'`;\n\n  const localFontSrc = localFontName !== undefined ? `local('${localFontName}'),` : '';\n\n  fontFace({\n    fontFamily,\n    src: localFontSrc + `url('${url}.woff2') format('woff2'),` + `url('${url}.woff') format('woff')`,\n    fontWeight,\n    fontStyle: 'normal',\n    fontDisplay: 'swap'\n  });\n}\n\nfunction _registerFontFaceSet(\n  baseUrl: string,\n  fontFamily: string,\n  cdnFolder: string,\n  cdnFontName: string = 'segoeui',\n  localFontName?: string\n): void {\n  const urlBase = `${baseUrl}/${cdnFolder}/${cdnFontName}`;\n\n  _registerFontFace(fontFamily, urlBase + '-light', FontWeights.light, localFontName && localFontName + ' Light');\n  _registerFontFace(fontFamily, urlBase + '-semilight', FontWeights.semilight, localFontName && localFontName + ' SemiLight');\n  _registerFontFace(fontFamily, urlBase + '-regular', FontWeights.regular, localFontName);\n  _registerFontFace(fontFamily, urlBase + '-semibold', FontWeights.semibold, localFontName && localFontName + ' SemiBold');\n}\n\nexport function registerDefaultFontFaces(baseUrl: string): void {\n  if (baseUrl) {\n    const fontUrl = `${baseUrl}/fonts`;\n\n    // Produce @font-face definitions for all supported web fonts.\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Thai, 'leelawadeeui-thai', 'leelawadeeui');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Arabic, 'segoeui-arabic');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Cyrillic, 'segoeui-cyrillic');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.EastEuropean, 'segoeui-easteuropean');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Greek, 'segoeui-greek');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Hebrew, 'segoeui-hebrew');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Vietnamese, 'segoeui-vietnamese');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.WestEuropean, 'segoeui-westeuropean', 'segoeui', 'Segoe UI');\n    _registerFontFaceSet(fontUrl, LocalizedFontFamilies.Selawik, 'selawik', 'selawik');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Armenian, 'segoeui-armenian');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Georgian, 'segoeui-georgian');\n\n    // Leelawadee UI (Thai) does not have a 'light' weight, so we override\n    // the font-face generated above to use the 'semilight' weight instead.\n    _registerFontFace('Leelawadee UI Web', `${fontUrl}/leelawadeeui-thai/leelawadeeui-semilight`, FontWeights.light);\n\n    // Leelawadee UI (Thai) does not have a 'semibold' weight, so we override\n    // the font-face generated above to use the 'bold' weight instead.\n    _registerFontFace('Leelawadee UI Web', `${fontUrl}/leelawadeeui-thai/leelawadeeui-bold`, FontWeights.semibold);\n  }\n}\n\n/**\n * Reads the fontBaseUrl from window.FabricConfig.fontBaseUrl or falls back to a default.\n */\nfunction _getFontBaseUrl(): string {\n  let win = getWindow();\n\n  // tslint:disable-next-line:no-string-literal no-any\n  let fabricConfig: IFabricConfig = win ? win['FabricConfig'] : undefined;\n\n  return fabricConfig && fabricConfig.fontBaseUrl !== undefined ? fabricConfig.fontBaseUrl : DefaultBaseUrl;\n}\n\n/**\n * Register the font faces.\n */\nregisterDefaultFontFaces(_getFontBaseUrl());\n"]}