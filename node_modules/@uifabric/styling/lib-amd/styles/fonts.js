define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // Fallback fonts, if specified system or web fonts are unavailable.
    var FontFamilyFallbacks = "'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";
    // Font face names to be registered.
    var LocalizedFontNames;
    (function (LocalizedFontNames) {
        LocalizedFontNames.Arabic = 'Segoe UI Web (Arabic)';
        LocalizedFontNames.Cyrillic = 'Segoe UI Web (Cyrillic)';
        LocalizedFontNames.EastEuropean = 'Segoe UI Web (East European)';
        LocalizedFontNames.Greek = 'Segoe UI Web (Greek)';
        LocalizedFontNames.Hebrew = 'Segoe UI Web (Hebrew)';
        LocalizedFontNames.Thai = 'Leelawadee UI Web';
        LocalizedFontNames.Vietnamese = 'Segoe UI Web (Vietnamese)';
        LocalizedFontNames.WestEuropean = 'Segoe UI Web (West European)';
        LocalizedFontNames.Selawik = 'Selawik Web';
        LocalizedFontNames.Armenian = 'Segoe UI Web (Armenian)';
        LocalizedFontNames.Georgian = 'Segoe UI Web (Georgian)';
    })(LocalizedFontNames = exports.LocalizedFontNames || (exports.LocalizedFontNames = {}));
    // Font families with fallbacks, for the general regions.
    var LocalizedFontFamilies;
    (function (LocalizedFontFamilies) {
        LocalizedFontFamilies.Arabic = "'" + LocalizedFontNames.Arabic + "'";
        LocalizedFontFamilies.ChineseSimplified = "'Microsoft Yahei UI', Verdana, Simsun";
        LocalizedFontFamilies.ChineseTraditional = "'Microsoft Jhenghei UI', Pmingliu";
        LocalizedFontFamilies.Cyrillic = "'" + LocalizedFontNames.Cyrillic + "'";
        LocalizedFontFamilies.EastEuropean = "'" + LocalizedFontNames.EastEuropean + "'";
        LocalizedFontFamilies.Greek = "'" + LocalizedFontNames.Greek + "'";
        LocalizedFontFamilies.Hebrew = "'" + LocalizedFontNames.Hebrew + "'";
        LocalizedFontFamilies.Hindi = "'Nirmala UI'";
        LocalizedFontFamilies.Japanese = "'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka";
        LocalizedFontFamilies.Korean = "'Malgun Gothic', Gulim";
        LocalizedFontFamilies.Selawik = "'" + LocalizedFontNames.Selawik + "'";
        LocalizedFontFamilies.Thai = "'Leelawadee UI Web', 'Kmer UI'";
        LocalizedFontFamilies.Vietnamese = "'" + LocalizedFontNames.Vietnamese + "'";
        LocalizedFontFamilies.WestEuropean = "'" + LocalizedFontNames.WestEuropean + "'";
        LocalizedFontFamilies.Armenian = "'" + LocalizedFontNames.Armenian + "'";
        LocalizedFontFamilies.Georgian = "'" + LocalizedFontNames.Georgian + "'";
    })(LocalizedFontFamilies = exports.LocalizedFontFamilies || (exports.LocalizedFontFamilies = {}));
    // By default, we favor system fonts for the default.
    // All localized fonts use a web font and never use the system font.
    var defaultFontFamily = "'Segoe UI', '" + LocalizedFontNames.WestEuropean + "'";
    // Mapping of language prefix to to font family.
    var LanguageToFontMap = {
        ar: LocalizedFontFamilies.Arabic,
        bg: LocalizedFontFamilies.Cyrillic,
        cs: LocalizedFontFamilies.EastEuropean,
        el: LocalizedFontFamilies.Greek,
        et: LocalizedFontFamilies.EastEuropean,
        he: LocalizedFontFamilies.Hebrew,
        hi: LocalizedFontFamilies.Hindi,
        hr: LocalizedFontFamilies.EastEuropean,
        hu: LocalizedFontFamilies.EastEuropean,
        ja: LocalizedFontFamilies.Japanese,
        kk: LocalizedFontFamilies.EastEuropean,
        ko: LocalizedFontFamilies.Korean,
        lt: LocalizedFontFamilies.EastEuropean,
        lv: LocalizedFontFamilies.EastEuropean,
        pl: LocalizedFontFamilies.EastEuropean,
        ru: LocalizedFontFamilies.Cyrillic,
        sk: LocalizedFontFamilies.EastEuropean,
        'sr-latn': LocalizedFontFamilies.EastEuropean,
        th: LocalizedFontFamilies.Thai,
        tr: LocalizedFontFamilies.EastEuropean,
        uk: LocalizedFontFamilies.Cyrillic,
        vi: LocalizedFontFamilies.Vietnamese,
        'zh-hans': LocalizedFontFamilies.ChineseSimplified,
        'zh-hant': LocalizedFontFamilies.ChineseTraditional,
        hy: LocalizedFontFamilies.Armenian,
        ka: LocalizedFontFamilies.Georgian
    };
    // Standard font sizes.
    var FontSizes;
    (function (FontSizes) {
        FontSizes.mini = '10px';
        FontSizes.xSmall = '10px';
        FontSizes.small = '12px';
        FontSizes.smallPlus = '12px';
        FontSizes.medium = '14px';
        FontSizes.mediumPlus = '16px';
        FontSizes.icon = '16px';
        FontSizes.large = '18px';
        FontSizes.xLarge = '20px';
        FontSizes.xLargePlus = '24px';
        FontSizes.xxLarge = '28px';
        FontSizes.xxLargePlus = '32px';
        FontSizes.superLarge = '42px';
        FontSizes.mega = '68px';
    })(FontSizes = exports.FontSizes || (exports.FontSizes = {}));
    // Standard font weights.
    var FontWeights;
    (function (FontWeights) {
        FontWeights.light = 100;
        FontWeights.semilight = 300;
        FontWeights.regular = 400;
        FontWeights.semibold = 600;
        FontWeights.bold = 700;
    })(FontWeights = exports.FontWeights || (exports.FontWeights = {}));
    // Standard Icon Sizes.
    var IconFontSizes;
    (function (IconFontSizes) {
        IconFontSizes.xSmall = '10px';
        IconFontSizes.small = '12px';
        IconFontSizes.medium = '16px';
        IconFontSizes.large = '20px';
    })(IconFontSizes = exports.IconFontSizes || (exports.IconFontSizes = {}));
    function _fontFamilyWithFallbacks(fontFamily) {
        return fontFamily + ", " + FontFamilyFallbacks;
    }
    function createFontStyles(localeCode) {
        var localizedFont = _getLocalizedFontFamily(localeCode);
        var fontFamilyWithFallback = _fontFamilyWithFallbacks(localizedFont);
        var fontStyles = {
            tiny: _createFont(FontSizes.mini, FontWeights.regular, fontFamilyWithFallback),
            xSmall: _createFont(FontSizes.xSmall, FontWeights.regular, fontFamilyWithFallback),
            small: _createFont(FontSizes.small, FontWeights.regular, fontFamilyWithFallback),
            smallPlus: _createFont(FontSizes.smallPlus, FontWeights.regular, fontFamilyWithFallback),
            medium: _createFont(FontSizes.medium, FontWeights.regular, fontFamilyWithFallback),
            mediumPlus: _createFont(FontSizes.mediumPlus, FontWeights.regular, fontFamilyWithFallback),
            large: _createFont(FontSizes.large, FontWeights.regular, fontFamilyWithFallback),
            xLarge: _createFont(FontSizes.xLarge, FontWeights.semibold, fontFamilyWithFallback),
            xLargePlus: _createFont(FontSizes.xLargePlus, FontWeights.semibold, fontFamilyWithFallback),
            xxLarge: _createFont(FontSizes.xxLarge, FontWeights.semibold, fontFamilyWithFallback),
            xxLargePlus: _createFont(FontSizes.xxLargePlus, FontWeights.semibold, fontFamilyWithFallback),
            superLarge: _createFont(FontSizes.superLarge, FontWeights.semibold, fontFamilyWithFallback),
            mega: _createFont(FontSizes.mega, FontWeights.semibold, fontFamilyWithFallback)
        };
        return fontStyles;
    }
    exports.createFontStyles = createFontStyles;
    /**
     * If there is a localized font for this language, return that. Returns undefined if there is no localized font for that language.
     */
    function _getLocalizedFontFamily(language) {
        for (var lang in LanguageToFontMap) {
            if (LanguageToFontMap.hasOwnProperty(lang) && language && lang.indexOf(language) === 0) {
                // tslint:disable-next-line:no-any
                return LanguageToFontMap[lang];
            }
        }
        return defaultFontFamily;
    }
    function _createFont(size, weight, fontFamily) {
        return {
            fontFamily: fontFamily,
            MozOsxFontSmoothing: 'grayscale',
            WebkitFontSmoothing: 'antialiased',
            fontSize: size,
            fontWeight: weight
        };
    }
});
//# sourceMappingURL=fonts.js.map