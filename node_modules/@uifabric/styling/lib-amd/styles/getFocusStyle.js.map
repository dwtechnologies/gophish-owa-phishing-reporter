{"version":3,"file":"getFocusStyle.js","sourceRoot":"../src/","sources":["styles/getFocusStyle.ts"],"names":[],"mappings":";;;IAqCA,SAAgB,aAAa,CAC3B,KAAa,EACb,cAAgD,EAChD,QAAkC,EAClC,iBAA6B,EAC7B,WAAoB,EACpB,YAAqB,EACrB,aAAuB;QAEvB,IAAI,OAAO,cAAc,KAAK,QAAQ,IAAI,CAAC,cAAc,EAAE;YACzD,OAAO,sBAAsB,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,QAAQ,UAAA,EAAE,iBAAiB,mBAAA,EAAE,WAAW,aAAA,EAAE,YAAY,cAAA,EAAE,aAAa,eAAA,EAAE,CAAC,CAAC;SACxI;aAAM;YACL,OAAO,sBAAsB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;SACtD;IACH,CAAC;IAdD,sCAcC;IAED,SAAS,sBAAsB,CAAC,KAAa,EAAE,OAAoC;;QAApC,wBAAA,EAAA,YAAoC;QAE/E,IAAA,kBAAS,EAAT,8BAAS,EACT,kBAAS,EAAT,8BAAS,EACT,qBAAqB,EAArB,0CAAqB,EACrB,6CAAiB,EACjB,wBAAiC,EAAjC,sDAAiC,EACjC,yBAA6C,EAA7C,kEAA6C,EAC7C,0BAAoB,EAApB,yCAAoB,CACV;QAEZ,OAAO;YACL,4FAA4F;YAC5F,OAAO,EAAE,aAAa;YACtB,+DAA+D;YAC/D,QAAQ,UAAA;YAER,SAAS;oBACP,qCAAqC;oBACrC,uDAAuD;oBACvD,oBAAoB,EAAE;wBACpB,MAAM,EAAE,GAAG;qBACZ;;gBAED,sFAAsF;gBACtF,mBAAmB;gBACnB,GAAC,MAAI,mCAAuB,WAAK,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,YAAQ,IAAG;oBACvE,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,UAAU;oBACpB,IAAI,EAAE,KAAK,GAAG,CAAC;oBACf,GAAG,EAAE,KAAK,GAAG,CAAC;oBACd,MAAM,EAAE,KAAK,GAAG,CAAC;oBACjB,KAAK,EAAE,KAAK,GAAG,CAAC;oBAChB,MAAM,EAAK,KAAK,iBAAY,WAAa;oBACzC,OAAO,EAAK,KAAK,iBAAY,YAAc;oBAC3C,MAAM,EAAE,mBAAQ,CAAC,UAAU;oBAC3B,SAAS;wBACP,GAAC,mCAAoB,IAAG,iBAAiB;2BAC1C;iBACF;mBACF;SACF,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,SAAgB,UAAU;QACxB,OAAO;YACL,SAAS,EAAE;gBACT,qBAAqB,EAAE;oBACrB,0FAA0F;oBAC1F,MAAM,EAAE,CAAC;iBACV;gBACD,GAAG,EAAE;oBACH,yFAAyF;oBACzF,OAAO,EAAE,aAAa;iBACvB;aACF;SACF,CAAC;IACJ,CAAC;IAbD,gCAaC;IAED;;;;;;;;OAQG;IACH,SAAgB,oBAAoB,CAAC,KAAa,EAAE,KAAiB,EAAE,KAAiB,EAAE,KAAc;;QAApD,sBAAA,EAAA,SAAiB;QAAE,sBAAA,EAAA,SAAiB;QACtF,OAAO;YACL,SAAS;gBACP,GAAC,aAAW,mCAAuB,cAAW,IAAG;oBAC/C,OAAO,EAAK,KAAK,gBAAU,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAE;oBACpE,aAAa,EAAK,CAAC,KAAK,OAAI;iBAC7B;mBACF;SACF,CAAC;IACJ,CAAC;IATD,oDASC","sourcesContent":["import { IRawStyle } from '@uifabric/merge-styles';\nimport { IGetFocusStylesOptions, ITheme } from '../interfaces/index';\nimport { HighContrastSelector } from './CommonStyles';\nimport { IsFocusVisibleClassName } from '@uifabric/utilities';\nimport { ZIndexes } from './zIndexes';\n\n/**\n * Generates a focus style which can be used to define an :after focus border.\n *\n * @param theme - The theme object to use.\n * @param options - Options to customize the focus border.\n * @returns The style object.\n */\nexport function getFocusStyle(theme: ITheme, options?: IGetFocusStylesOptions): IRawStyle;\n/**\n * Generates a focus style which can be used to define an :after focus border.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border.\n * @param position - The positioning applied to the container. Must\n * be 'relative' or 'absolute' so that the focus border can live around it.\n * @param highContrastStyle - Style for high contrast mode.\n * @param borderColor - Color of the border.\n * @param outlineColor - Color of the outline.\n * @param isFocusedOnly - If the styles should apply on focus or not.\n * @returns The style object.\n * @deprecated Use the object parameter version instead.\n */\nexport function getFocusStyle(\n  theme: ITheme,\n  inset?: number,\n  position?: 'relative' | 'absolute',\n  highContrastStyle?: IRawStyle | undefined,\n  borderColor?: string,\n  outlineColor?: string,\n  isFocusedOnly?: boolean\n): IRawStyle;\nexport function getFocusStyle(\n  theme: ITheme,\n  insetOrOptions?: number | IGetFocusStylesOptions,\n  position?: 'relative' | 'absolute',\n  highContrastStyle?: IRawStyle,\n  borderColor?: string,\n  outlineColor?: string,\n  isFocusedOnly?: boolean\n): IRawStyle {\n  if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n    return _getFocusStyleInternal(theme, { inset: insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly });\n  } else {\n    return _getFocusStyleInternal(theme, insetOrOptions);\n  }\n}\n\nfunction _getFocusStyleInternal(theme: ITheme, options: IGetFocusStylesOptions = {}): IRawStyle {\n  const {\n    inset = 0,\n    width = 1,\n    position = 'relative',\n    highContrastStyle,\n    borderColor = theme.palette.white,\n    outlineColor = theme.palette.neutralSecondary,\n    isFocusedOnly = true\n  } = options;\n\n  return {\n    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n    outline: 'transparent',\n    // Requirement because pseudo-element is absolutely positioned.\n    position,\n\n    selectors: {\n      // Clear the focus border in Firefox.\n      // Reference: http://stackoverflow.com/a/199319/1436671\n      '::-moz-focus-inner': {\n        border: '0'\n      },\n\n      // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n      // create a border.\n      [`.${IsFocusVisibleClassName} &${isFocusedOnly ? ':focus' : ''}:after`]: {\n        content: '\"\"',\n        position: 'absolute',\n        left: inset + 1,\n        top: inset + 1,\n        bottom: inset + 1,\n        right: inset + 1,\n        border: `${width}px solid ${borderColor}`,\n        outline: `${width}px solid ${outlineColor}`,\n        zIndex: ZIndexes.FocusStyle,\n        selectors: {\n          [HighContrastSelector]: highContrastStyle\n        }\n      }\n    }\n  };\n}\n\n/**\n * Generates style to clear browser specific focus styles.\n */\nexport function focusClear(): IRawStyle {\n  return {\n    selectors: {\n      '&::-moz-focus-inner': {\n        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n        border: 0\n      },\n      '&': {\n        // Clear browser specific focus styles and use transparent as placeholder for focus style\n        outline: 'transparent'\n      }\n    }\n  };\n}\n\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\nexport function getFocusOutlineStyle(theme: ITheme, inset: number = 0, width: number = 1, color?: string): IRawStyle {\n  return {\n    selectors: {\n      [`:global(${IsFocusVisibleClassName}) &:focus`]: {\n        outline: `${width} solid ${color || theme.palette.neutralSecondary}`,\n        outlineOffset: `${-inset}px`\n      }\n    }\n  };\n}\n"]}