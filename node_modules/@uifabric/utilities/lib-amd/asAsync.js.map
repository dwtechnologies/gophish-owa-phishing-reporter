{"version":3,"file":"asAsync.js","sourceRoot":"../src/","sources":["asAsync.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;;;IAqBH;;;;OAIG;IACH,IAAM,gBAAgB,GACpB,OAAO,OAAO,KAAK,WAAW;QAC5B,CAAC,CAAC,kCAAkC;YAClC,IAAI,OAAO,EAAyE;QACtF,CAAC,CAAC,SAAS,CAAC;IAEhB;;;;;OAKG;IACH,SAAgB,OAAO,CACrB,OAAgC;QAEhC;YAAoB,iCAMnB;YAND;gBAAA,qEA0CC;gBAnCQ,WAAK,GAAG;oBACb,SAAS,EAAE,gBAAgB,CAAC,CAAC,CAAE,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAA6B,CAAC,CAAC,CAAC,SAAS;iBAC1G,CAAC;;YAiCJ,CAAC;YA/BQ,sBAAM,GAAb;gBACE,8GAA8G;gBAC9G,kCAAkC;gBAClC,IAAM,eAA4E,EAA1E,8BAAY,EAAE,iCAA6B,EAAE,+DAA6B,CAAC;gBAC3E,IAAA,gCAAS,CAAgB;gBACjC,OAAO,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,uBAAO,IAAI,IAAE,GAAG,EAAE,YAAY,IAAG,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,oBAAC,WAAW,OAAG,CAAC,CAAC,CAAC,IAAI,CAAC;YAC3H,CAAC;YAEM,iCAAiB,GAAxB;gBAAA,iBAsBC;gBArBO,IAAA,gCAAS,CAAgB;gBAE/B,IAAI,CAAC,SAAS,EAAE;oBACd,OAAO;yBACJ,IAAI,EAAE;yBACN,IAAI,CAAC,UAAC,eAAwC;wBAC7C,IAAI,eAAe,EAAE;4BACnB,wCAAwC;4BACxC,gBAAgB,IAAI,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;4BAExE,aAAa;4BACb,KAAI,CAAC,QAAQ,CACX;gCACE,SAAS,EAAE,eAAe;6BAC3B,EACD,OAAO,CAAC,MAAM,CACf,CAAC;yBACH;oBACH,CAAC,CAAC;yBACD,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;iBAC3B;YACH,CAAC;YACH,YAAC;QAAD,CAAC,AA1CD,CAAoB,KAAK,CAAC,SAAS,GA0ClC;QACD,OAAO,KAAK,CAAC,UAAU,CAAC,UAAC,KAAsD,EAAE,GAAsB,IAAK,OAAA,CAC1G,oBAAC,KAAK,uBAAK,KAAK,IAAE,YAAY,EAAE,GAAG,IAAI,CACxC,EAF2G,CAE3G,CAAC,CAAC;IACL,CAAC;IAjDD,0BAiDC","sourcesContent":["/**\n * asAsync - a HOC for async loading components.\n *\n * Usage:\n *\n * const AsyncDialog = asAsync({\n *   load: () => import('Dialog').then(result => result.default),\n * });\n *\n * React.render(domElement, <AsyncDialog asyncPlaceholder={ () => <Spinner/> } { ...dialogProps } />);\n *\n * Note the `asyncPlaceholder` prop will be respected when rendering the async component and it hasn't\n * been loaded yet.\n */\n\nimport * as React from 'react';\n\nexport interface IAsAsyncOptions<TProps> {\n  /**\n   * Callback which returns a promise resolving an object which exports the component.\n   */\n  load: () => Promise<React.ReactType<TProps>>;\n\n  /**\n   * Callback executed when async loading is complete.\n   */\n  onLoad?: () => void;\n\n  /**\n   * Callback when async loading fails.\n   */\n  onError?: (error: Error) => void;\n}\n\n/**\n * If possible, use a WeakMap to maintain a cache of loaded components.\n * This can be used to synchronously render components that have already been loaded,\n * rather than having to wait for at least one async tick.\n */\nconst _syncModuleCache =\n  typeof WeakMap !== 'undefined'\n    ? // tslint:disable-next-line:no-any\n      new WeakMap<() => Promise<React.ReactType<any>>, React.ReactType<any> | undefined>()\n    : undefined;\n\n/**\n * Produces a component which internally loads the target component before first mount.\n * The component passes all props through to the loaded component.\n *\n * This overload accepts a module with a default export for the component.\n */\nexport function asAsync<TProps>(\n  options: IAsAsyncOptions<TProps>\n): React.ForwardRefExoticComponent<React.PropsWithoutRef<TProps & { asyncPlaceholder?: React.ReactType }>> {\n  class Async extends React.Component<\n    TProps & {\n      asyncPlaceholder?: React.ReactType;\n      forwardedRef: React.Ref<TProps>;\n    },\n    { Component?: React.ReactType<TProps> }\n  > {\n    public state = {\n      Component: _syncModuleCache ? (_syncModuleCache.get(options.load) as React.ReactType<TProps>) : undefined\n    };\n\n    public render(): JSX.Element | null {\n      // Typescript issue: the rest can't be pulled without the any cast, as TypeScript fails with rest on generics.\n      // tslint:disable-next-line:no-any\n      const { forwardedRef, asyncPlaceholder: Placeholder, ...rest } = this.props as any;\n      const { Component } = this.state;\n      return Component ? React.createElement(Component, { ...rest, ref: forwardedRef }) : Placeholder ? <Placeholder /> : null;\n    }\n\n    public componentDidMount(): void {\n      let { Component } = this.state;\n\n      if (!Component) {\n        options\n          .load()\n          .then((LoadedComponent: React.ReactType<TProps>) => {\n            if (LoadedComponent) {\n              // Cache component for future reference.\n              _syncModuleCache && _syncModuleCache.set(options.load, LoadedComponent);\n\n              // Set state.\n              this.setState(\n                {\n                  Component: LoadedComponent\n                },\n                options.onLoad\n              );\n            }\n          })\n          .catch(options.onError);\n      }\n    }\n  }\n  return React.forwardRef((props: TProps & { asyncPlaceholder?: React.ReactType }, ref: React.Ref<TProps>) => (\n    <Async {...props} forwardedRef={ref} />\n  ));\n}\n"]}