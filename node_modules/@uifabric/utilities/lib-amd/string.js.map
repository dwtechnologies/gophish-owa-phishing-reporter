{"version":3,"file":"string.js","sourceRoot":"../src/","sources":["string.ts"],"names":[],"mappings":";;;IAAA,gFAAgF;IAChF,IAAM,iBAAiB,GAAG,SAAS,CAAC;IAEpC,+EAA+E;IAC/E,IAAM,YAAY,GAAG,UAAU,CAAC;IAEhC;;;;;;;;;;;;OAYG;IACH,kCAAkC;IAClC,SAAgB,MAAM,CAAC,CAAS;QAC9B,YAAY,CAAC;QADmB,gBAAgB;aAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;YAAhB,+BAAgB;;QAGhD,IAAI,IAAI,GAAG,MAAM,CAAC;QAClB,0BAA0B;QAC1B,SAAS,YAAY,CAAC,KAAa;YACjC,uBAAuB;YACvB,kCAAkC;YAClC,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAQ,CAAC,CAAC;YAEpE,+DAA+D;YAC/D,IAAI,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,EAAE;gBACrD,WAAW,GAAG,EAAE,CAAC;aAClB;YAED,OAAO,WAAW,CAAC;QACrB,CAAC;QACD,OAAO,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IAC/C,CAAC;IAlBD,wBAkBC","sourcesContent":["// Regex that finds { and } so they can be removed on a lookup for string format\nconst FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n\n// Regex that finds {#} so it can be replaced by the arguments in string format\nconst FORMAT_REGEX = /\\{\\d+\\}/g;\n\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// tslint:disable-next-line:no-any\nexport function format(s: string, ...values: any[]): string {\n  'use strict';\n\n  let args = values;\n  // Callback match function\n  function replace_func(match: string): string {\n    // looks up in the args\n    // tslint:disable-next-line:no-any\n    let replacement = args[match.replace(FORMAT_ARGS_REGEX, '') as any];\n\n    // catches undefined in nondebug and null in debug and nondebug\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n\n    return replacement;\n  }\n  return s.replace(FORMAT_REGEX, replace_func);\n}\n"]}