{"version":3,"file":"memoize.js","sourceRoot":"../src/","sources":["memoize.ts"],"names":[],"mappings":"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","sourcesContent":["import { Stylesheet } from '@uifabric/merge-styles';\n\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  Stylesheet.getInstance().onReset(resetMemoizations);\n}\n\n// tslint:disable:no-any\ndeclare class WeakMap {\n  public get(key: any): any;\n  public set(key: any, value: any): void;\n  public has(key: any): boolean;\n}\n\nlet _resetCounter = 0;\nconst _emptyObject = { empty: true };\nconst _dictionary: any = {};\nlet _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;\n\ninterface IMemoizeNode {\n  map: WeakMap | null;\n  value?: any;\n}\n\n/**\n *  Test utility for providing a custom weakmap.\n *\n * @internal\n * */\nexport function setMemoizeWeakMap(weakMap: any): void {\n  _weakMap = weakMap;\n}\n\n/**\n * Reset memoizations.\n */\nexport function resetMemoizations(): void {\n  _resetCounter++;\n}\n\n/**\n * Memoize decorator to be used on class methods. WARNING: the `this` reference\n * will be inaccessible within a memoized method, given that a cached method's `this`\n * would not be instance-specific.\n *\n * @public\n */\nexport function memoize<T extends Function>(\n  target: any,\n  key: string,\n  descriptor: TypedPropertyDescriptor<T>\n): {\n  configurable: boolean;\n  get(): T;\n} {\n  // We bind to \"null\" to prevent people from inadvertently pulling values from \"this\",\n  // rather than passing them in as input values which can be memoized.\n  let fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));\n\n  return {\n    configurable: true,\n    get(): T {\n      return fn;\n    }\n  };\n}\n\n/**\n * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.\n * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise\n * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in\n * undefined for a value and relying on a default function will execute it the first time, but will not\n * re-evaluate subsequent times which may have been unexpected.\n *\n * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is\n * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard\n * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.\n *\n * @public\n * @param cb - The function to memoize.\n * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.\n * @returns A memoized version of the function.\n */\nexport function memoizeFunction<T extends (...args: any[]) => RET_TYPE, RET_TYPE>(cb: T, maxCacheSize: number = 100): T {\n  // Avoid breaking scenarios which don't have weak map.\n  if (!_weakMap) {\n    return cb;\n  }\n\n  let rootNode: any;\n  let cacheSize = 0;\n  let localResetCounter = _resetCounter;\n\n  // tslint:disable-next-line:no-function-expression\n  return function memoizedFunction(...args: any[]): RET_TYPE {\n    let currentNode: any = rootNode;\n\n    if (rootNode === undefined || localResetCounter !== _resetCounter || (maxCacheSize > 0 && cacheSize > maxCacheSize)) {\n      rootNode = _createNode();\n      cacheSize = 0;\n      localResetCounter = _resetCounter;\n    }\n\n    currentNode = rootNode;\n\n    // Traverse the tree until we find the match.\n    for (let i = 0; i < args.length; i++) {\n      let arg = _normalizeArg(args[i]);\n\n      if (!currentNode.map.has(arg)) {\n        currentNode.map.set(arg, _createNode());\n      }\n\n      currentNode = currentNode.map.get(arg);\n    }\n\n    if (!currentNode.hasOwnProperty('value')) {\n      currentNode.value = cb(...args);\n      cacheSize++;\n    }\n\n    return currentNode.value;\n  } as any;\n}\n\nfunction _normalizeArg(val: null | undefined): { empty: boolean } | any;\nfunction _normalizeArg(val: object): any;\nfunction _normalizeArg(val: any): any {\n  if (!val) {\n    return _emptyObject;\n  } else if (typeof val === 'object' || typeof val === 'function') {\n    return val;\n  } else if (!_dictionary[val]) {\n    _dictionary[val] = { val };\n  }\n\n  return _dictionary[val];\n}\n\nfunction _createNode(): IMemoizeNode {\n  return {\n    map: _weakMap ? new _weakMap() : null\n  };\n}\n"]}