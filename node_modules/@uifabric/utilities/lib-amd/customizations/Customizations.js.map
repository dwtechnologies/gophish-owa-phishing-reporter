{"version":3,"file":"Customizations.js","sourceRoot":"../src/","sources":["customizations/Customizations.ts"],"names":[],"mappings":";;;IAsBA,IAAM,uBAAuB,GAAG,gBAAgB,CAAC;IACjD,IAAM,iBAAiB,GAAG,EAAE,QAAQ,EAAE,EAAE,EAAE,cAAc,EAAE,EAAE,EAAE,mBAAmB,EAAE,KAAK,EAAE,CAAC;IAE3F,IAAI,YAAY,GAAG,+BAAc,CAAC,QAAQ,CAAkB,uBAAuB,EAAE;QACnF,QAAQ,EAAE,EAAE;QACZ,cAAc,EAAE,EAAE;QAClB,mBAAmB,EAAE,KAAK;KAC3B,CAAC,CAAC;IAEH,IAAI,OAAO,GAAmB,EAAE,CAAC;IAEjC;QAAA;QAmDA,CAAC;QAlDe,oBAAK,GAAnB;YACE,YAAY,CAAC,QAAQ,GAAG,EAAE,CAAC;YAC3B,YAAY,CAAC,cAAc,GAAG,EAAE,CAAC;QACnC,CAAC;QAED,kCAAkC;QACpB,4BAAa,GAA3B,UAA4B,QAAmB;YAC7C,YAAY,CAAC,QAAQ,wBAAQ,YAAY,CAAC,QAAQ,EAAK,QAAQ,CAAE,CAAC;YAClE,cAAc,CAAC,YAAY,EAAE,CAAC;QAChC,CAAC;QAED,kCAAkC;QACpB,kCAAmB,GAAjC,UAAkC,SAAiB,EAAE,QAAmB;YACtE,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,wBAAQ,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,EAAK,QAAQ,CAAE,CAAC;YACpG,cAAc,CAAC,YAAY,EAAE,CAAC;QAChC,CAAC;QAEa,0BAAW,GAAzB,UACE,UAAoB,EACpB,SAAkB,EAClB,aAAkD;QAClD,kCAAkC;;YADlC,8BAAA,EAAA,iCAAkD;YAGlD,kCAAkC;YAClC,IAAM,QAAQ,GAAc,EAAE,CAAC;YAC/B,IAAM,mBAAmB,GAAG,CAAC,SAAS,IAAI,aAAa,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;YACzF,IAAM,oBAAoB,GAAG,CAAC,SAAS,IAAI,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC;YAEzF,KAAqB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,EAAE;gBAA5B,IAAI,QAAQ,mBAAA;gBACf,QAAQ,CAAC,QAAQ,CAAC;oBAChB,mBAAmB,CAAC,QAAQ,CAAC;wBAC7B,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC;wBAChC,oBAAoB,CAAC,QAAQ,CAAC;wBAC9B,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;aACnC;YAED,OAAO,QAAQ,CAAC;QAClB,CAAC;QAEa,sBAAO,GAArB,UAAsB,QAAoB;YACxC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzB,CAAC;QAEa,wBAAS,GAAvB,UAAwB,QAAoB;YAC1C,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,EAAc,IAAK,OAAA,EAAE,KAAK,QAAQ,EAAf,CAAe,CAAC,CAAC;QAChE,CAAC;QAEc,2BAAY,GAA3B;YACE,OAAO,CAAC,OAAO,CAAC,UAAC,EAAc,IAAK,OAAA,EAAE,EAAE,EAAJ,CAAI,CAAC,CAAC;QAC5C,CAAC;QACH,qBAAC;IAAD,CAAC,AAnDD,IAmDC;IAnDY,wCAAc","sourcesContent":["import { GlobalSettings } from '../GlobalSettings';\n\n// tslint:disable-next-line:no-any\nexport type ISettings = { [key: string]: any };\nexport type ISettingsFunction = (settings: ISettings) => ISettings;\n\n/**\n * @deprecated Use ISettings.\n */\nexport type Settings = ISettings;\n\n/**\n * @deprecated Use ISettingsFunction.\n */\nexport type SettingsFunction = ISettingsFunction;\n\nexport interface ICustomizations {\n  settings: ISettings;\n  scopedSettings: { [key: string]: ISettings };\n  inCustomizerContext?: boolean;\n}\n\nconst CustomizationsGlobalKey = 'customizations';\nconst NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };\n\nlet _allSettings = GlobalSettings.getValue<ICustomizations>(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n});\n\nlet _events: (() => void)[] = [];\n\nexport class Customizations {\n  public static reset(): void {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  }\n\n  // tslint:disable-next-line:no-any\n  public static applySettings(settings: ISettings): void {\n    _allSettings.settings = { ..._allSettings.settings, ...settings };\n    Customizations._raiseChange();\n  }\n\n  // tslint:disable-next-line:no-any\n  public static applyScopedSettings(scopeName: string, settings: ISettings): void {\n    _allSettings.scopedSettings[scopeName] = { ..._allSettings.scopedSettings[scopeName], ...settings };\n    Customizations._raiseChange();\n  }\n\n  public static getSettings(\n    properties: string[],\n    scopeName?: string,\n    localSettings: ICustomizations = NO_CUSTOMIZATIONS\n    // tslint:disable-next-line:no-any\n  ): any {\n    // tslint:disable-next-line:no-any\n    const settings: ISettings = {};\n    const localScopedSettings = (scopeName && localSettings.scopedSettings[scopeName]) || {};\n    const globalScopedSettings = (scopeName && _allSettings.scopedSettings[scopeName]) || {};\n\n    for (let property of properties) {\n      settings[property] =\n        localScopedSettings[property] ||\n        localSettings.settings[property] ||\n        globalScopedSettings[property] ||\n        _allSettings.settings[property];\n    }\n\n    return settings;\n  }\n\n  public static observe(onChange: () => void): void {\n    _events.push(onChange);\n  }\n\n  public static unobserve(onChange: () => void): void {\n    _events = _events.filter((cb: () => void) => cb !== onChange);\n  }\n\n  private static _raiseChange(): void {\n    _events.forEach((cb: () => void) => cb());\n  }\n}\n"]}