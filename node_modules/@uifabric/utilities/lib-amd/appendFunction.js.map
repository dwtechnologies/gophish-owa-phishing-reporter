{"version":3,"file":"appendFunction.js","sourceRoot":"../src/","sources":["appendFunction.ts"],"names":[],"mappings":"AAAA,wBAAwB;;;;IAExB;;;OAGG;IACH,SAAgB,cAAc,CAAC,MAAW;QAAE,mBAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,kCAAqB;;QAC/D,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,OAAO,SAAS,CAAC,CAAC,CAAe,CAAC;SACnC;QAED,OAAO;YAAC,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YACpB,SAAS,CAAC,OAAO,CAAC,UAAC,CAAa,IAAK,OAAA,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,EAA1B,CAA0B,CAAC,CAAC;QACnE,CAAC,CAAC;IACJ,CAAC;IARD,wCAQC","sourcesContent":["// tslint:disable:no-any\n\n/**\n * Returns a single function which will call each of the given functions in the context of the\n * parent.\n */\nexport function appendFunction(parent: any, ...functions: (any)[]): () => void {\n  if (functions.length < 2) {\n    return functions[0] as () => void;\n  }\n\n  return (...args: any[]): void => {\n    functions.forEach((f: () => void) => f && f.apply(parent, args));\n  };\n}\n"]}