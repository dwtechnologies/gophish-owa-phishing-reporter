{"version":3,"file":"object.js","sourceRoot":"../src/","sources":["object.ts"],"names":[],"mappings":"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","sourcesContent":["import { Stylesheet } from '@uifabric/merge-styles';\nimport { getWindow } from './dom/getWindow';\n\n// Initialize global window id.\nconst CURRENT_ID_PROPERTY = '__currentId__';\nconst DEFAULT_ID_STRING = 'id__';\n\n// tslint:disable-next-line:no-any\nlet _global: any = getWindow() || {};\n\nif (_global[CURRENT_ID_PROPERTY] === undefined) {\n  _global[CURRENT_ID_PROPERTY] = 0;\n}\n\n// tslint:disable-next-line:no-any\nfunction checkProperties(a: any, b: any): boolean {\n  for (let propName in a) {\n    if (a.hasOwnProperty(propName)) {\n      if (!b.hasOwnProperty(propName) || b[propName] !== a[propName]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Compares a to b and b to a.\n *\n * @public\n */\nexport function shallowCompare<TA, TB>(a: TA, b: TB): boolean {\n  return checkProperties(a, b) && checkProperties(b, a);\n}\n\n/**\n * Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more\n * objects as arguments and they will be merged sequentially into the target. Note that this will\n * shallow merge; it will not create new cloned values for target members.\n *\n * @public\n * @param target - Target object to merge following object arguments into.\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\n * @returns Resulting merged target.\n */\n// tslint:disable-next-line:no-any\nexport function assign(target: any, ...args: any[]): any {\n  return filteredAssign.apply(this, [null, target].concat(args));\n}\n\n/**\n * Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter\n * the resulting merges. This allows for scenarios where you want to merge \"everything except that one thing\"\n * or \"properties that start with data-\". Note that this will shallow merge; it will not create new cloned\n * values for target members.\n *\n * @public\n * @param isAllowed - Callback to determine if the given propName is allowed in the result.\n * @param target - Target object to merge following object arguments into.\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\n * @returns Resulting merged target.\n */\n// tslint:disable-next-line:no-any\nexport function filteredAssign(isAllowed: (propName: string) => boolean, target: any, ...args: any[]): any {\n  target = target || {};\n\n  for (let sourceObject of args) {\n    if (sourceObject) {\n      for (let propName in sourceObject) {\n        if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {\n          target[propName] = sourceObject[propName];\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\n// Configure ids to reset on stylesheet resets.\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(resetIds);\n}\n\n/**\n * Generates a unique id in the global scope (this spans across duplicate copies of the same library.)\n *\n * @public\n */\nexport function getId(prefix?: string): string {\n  let index = _global[CURRENT_ID_PROPERTY]++;\n\n  return (prefix || DEFAULT_ID_STRING) + index;\n}\n\n/**\n * Resets id counter to an (optional) number.\n *\n * @public\n */\nexport function resetIds(counter: number = 0): void {\n  _global[CURRENT_ID_PROPERTY] = counter;\n}\n\n/* Takes an enum and iterates over each value of the enum (as a string), running the callback on each, returning a mapped array.\n * The callback takes as a first parameter the string that represents the name of the entry, and the second parameter is the\n * value of that entry, which is the value you'd normally use when using the enum (usually a number).\n * */\nexport function mapEnumByName<T>(\n  // tslint:disable-next-line:no-any\n  theEnum: any,\n  callback: (name?: string, value?: string | number) => T | undefined\n): (T | undefined)[] | undefined {\n  // map<any> to satisfy compiler since it doesn't realize we strip out undefineds in the .filter() call\n  return Object.keys(theEnum)\n    .map<T | undefined>((p: string | number) => {\n      // map on each property name as a string\n      if (String(Number(p)) !== p) {\n        // if the property is not just a number (because enums in TypeScript will map both ways)\n        return callback(p as string, theEnum[p]);\n      }\n    })\n    .filter((v: T | undefined) => !!v); // only return elements with values\n}\n\n/**\n * Get all values in an object dictionary\n *\n * @param obj - The dictionary to get values for\n */\n// tslint:disable-next-line:no-any\nexport function values<T>(obj: any): T[] {\n  return Object.keys(obj).reduce((arr: T[], key: string): T[] => {\n    arr.push(obj[key]);\n    return arr;\n  }, []);\n}\n"]}