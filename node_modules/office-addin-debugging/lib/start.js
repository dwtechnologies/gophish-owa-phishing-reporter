// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fetch = require("node-fetch");
const devCerts = require("office-addin-dev-certs");
const devSettings = require("office-addin-dev-settings");
const os = require("os");
const office_addin_dev_settings_1 = require("office-addin-dev-settings");
const office_addin_manifest_1 = require("office-addin-manifest");
const nodeDebugger = require("office-addin-node-debugger");
const debugInfo = require("./debugInfo");
const port_1 = require("./port");
const process_1 = require("./process");
const defaults_1 = require("./defaults");
var AppType;
(function (AppType) {
    AppType["Desktop"] = "desktop";
    AppType["Web"] = "web";
})(AppType = exports.AppType || (exports.AppType = {}));
var Platform;
(function (Platform) {
    Platform["Android"] = "android";
    Platform["Desktop"] = "desktop";
    Platform["iOS"] = "ios";
    Platform["MacOS"] = "macos";
    Platform["Win32"] = "win32";
    Platform["Web"] = "web";
})(Platform = exports.Platform || (exports.Platform = {}));
function defaultDebuggingMethod() {
    return office_addin_dev_settings_1.DebuggingMethod.Direct;
}
function delay(milliseconds) {
    return new Promise((resolve) => {
        setTimeout(resolve, milliseconds);
    });
}
function isDevServerRunning(port) {
    return __awaiter(this, void 0, void 0, function* () {
        // isPortInUse(port) will return false when webpack-dev-server is running.
        // it should be fixed, but for now, use getProcessIdsForPort(port)
        const processIds = yield port_1.getProcessIdsForPort(port);
        const isRunning = processIds.length > 0;
        return isRunning;
    });
}
exports.isDevServerRunning = isDevServerRunning;
function isPackagerRunning(statusUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        const statusRunningResponse = `packager-status:running`;
        try {
            const response = yield fetch.default(statusUrl);
            console.log(`packager: ${response.status} ${response.statusText}`);
            const text = yield response.text();
            console.log(`packager: ${text}`);
            return (statusRunningResponse === text);
        }
        catch (err) {
            return false;
        }
    });
}
exports.isPackagerRunning = isPackagerRunning;
function parseAppType(text) {
    switch (text) {
        case "desktop":
        case "macos":
        case "win32":
        case "ios":
        case "android":
            return AppType.Desktop;
        case "web":
            return AppType.Web;
        default:
            return undefined;
    }
}
exports.parseAppType = parseAppType;
function parseDebuggingMethod(text) {
    switch (text) {
        case "direct":
            return office_addin_dev_settings_1.DebuggingMethod.Direct;
        case "proxy":
            return office_addin_dev_settings_1.DebuggingMethod.Proxy;
        default:
            return undefined;
    }
}
exports.parseDebuggingMethod = parseDebuggingMethod;
function parsePlatform(text) {
    if (text === AppType.Desktop) {
        text = process.platform;
    }
    switch (text) {
        case "android":
            return Platform.Android;
        case "darwin":
            return Platform.MacOS;
        case "ios":
            return Platform.iOS;
        case "macos":
            return Platform.MacOS;
        case "web":
            return Platform.Web;
        case "win32":
            return Platform.Win32;
        default:
            throw new Error(`The current platform is not supported: ${process.platform}`);
    }
}
exports.parsePlatform = parsePlatform;
function runDevServer(commandLine, port) {
    return __awaiter(this, void 0, void 0, function* () {
        if (commandLine) {
            // if the dev server is running
            if ((port !== undefined) && (yield isDevServerRunning(port))) {
                console.log(`The dev server is already running on port ${port}.`);
            }
            else {
                // On non-Windows platforms, prompt for installing the dev certs before starting the dev server.
                // This is a workaround for the fact that the detached process does not show a window on Mac,
                // therefore the user cannot enter the password when prompted.
                if (process.platform !== "win32") {
                    if (!devCerts.verifyCertificates()) {
                        yield devCerts.ensureCertificatesAreInstalled();
                    }
                }
                // start the dev server
                console.log(`Starting the dev server... (${commandLine})`);
                const devServerProcess = process_1.startDetachedProcess(commandLine);
                yield debugInfo.saveDevServerProcessId(devServerProcess.pid);
                if (port !== undefined) {
                    // wait until the dev server is running
                    const isRunning = yield waitUntilDevServerIsRunning(port);
                    if (isRunning) {
                        console.log(`The dev server is running on port ${port}. Process id: ${devServerProcess.pid}`);
                    }
                    else {
                        throw new Error(`The dev server is not running on port ${port}.`);
                    }
                }
            }
        }
    });
}
exports.runDevServer = runDevServer;
function runNodeDebugger(host, port) {
    return __awaiter(this, void 0, void 0, function* () {
        nodeDebugger.run(host, port);
        console.log("The node debugger is running.");
    });
}
exports.runNodeDebugger = runNodeDebugger;
function runPackager(commandLine, host = "localhost", port = "8081") {
    return __awaiter(this, void 0, void 0, function* () {
        if (commandLine) {
            const packagerUrl = `http://${host}:${port}`;
            const statusUrl = `${packagerUrl}/status`;
            // if the packager is running
            if (yield isPackagerRunning(statusUrl)) {
                console.log(`The packager is already running. ${packagerUrl}`);
            }
            else {
                // start the packager
                console.log(`Starting the packager... (${commandLine})`);
                yield process_1.startDetachedProcess(commandLine);
                // wait until the packager is running
                if (yield waitUntilPackagerIsRunning(statusUrl)) {
                    console.log(`The packager is running. ${packagerUrl}`);
                }
                else {
                    throw new Error(`The packager is not running. ${packagerUrl}`);
                }
            }
        }
    });
}
exports.runPackager = runPackager;
/**
 * Start debugging
 * @param manifestPath The path to the manifest file.
 * @param appType The type of application to debug.
 * @param app The Office application to debug.
 * @param debuggingMethod The method to use when debugging.
 * @param sourceBundleUrlComponents Specify components of the source bundle url.
 * @param devServerCommandLine If provided, starts the dev server.
 * @param devServerPort If provided, port to verify that the dev server is running.
 * @param packagerCommandLine If provided, starts the packager.
 * @param packagerHost Specifies the host name of the packager.
 * @param packagerPort Specifies the port of the packager.
 * @param enableDebugging If false, start without debugging.
 */
function startDebugging(manifestPath, appType, app, debuggingMethod = defaultDebuggingMethod(), sourceBundleUrlComponents, devServerCommandLine, devServerPort, packagerCommandLine, packagerHost, packagerPort, enableDebugging = true, enableLiveReload = true) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const isWindowsPlatform = (process.platform === "win32");
            const isDesktopAppType = (appType === AppType.Desktop);
            const isWebAppType = (appType === AppType.Web);
            const isProxyDebuggingMethod = (debuggingMethod === office_addin_dev_settings_1.DebuggingMethod.Proxy);
            // live reload can only be enabled for the desktop app type
            // when using proxy debugging and the packager
            const canEnableLiveReload = isDesktopAppType && isProxyDebuggingMethod && !!packagerCommandLine;
            let packagerPromise;
            let devServerPromise;
            // only enable live reload if it can be enabled
            enableLiveReload = enableLiveReload && canEnableLiveReload;
            console.log(enableDebugging
                ? "Debugging is being started..."
                : "Starting without debugging...");
            console.log(`App type: ${appType.toString()}`);
            const manifestInfo = yield office_addin_manifest_1.readManifestFile(manifestPath);
            if (!manifestInfo.id) {
                throw new Error("Manifest does not contain the id for the Office Add-in.");
            }
            // enable loopback for Edge
            if (isWindowsPlatform && parseInt(os.release()) === 10) {
                const name = isDesktopAppType ? "EdgeWebView" : "EdgeWebBrowser";
                yield devSettings.ensureLoopbackIsEnabled(name);
            }
            // enable debugging
            if (isDesktopAppType && isWindowsPlatform) {
                yield devSettings.enableDebugging(manifestInfo.id, enableDebugging, debuggingMethod);
                if (enableDebugging) {
                    console.log(`Enabled debugging for add-in ${manifestInfo.id}. Debug method: ${debuggingMethod.toString()}`);
                }
            }
            // enable live reload
            if (isDesktopAppType && isWindowsPlatform) {
                yield devSettings.enableLiveReload(manifestInfo.id, enableLiveReload);
                if (enableLiveReload) {
                    console.log(`Enabled live-reload for add-in ${manifestInfo.id}.`);
                }
            }
            // set source bundle url
            if (isDesktopAppType && isWindowsPlatform) {
                if (sourceBundleUrlComponents) {
                    yield devSettings.setSourceBundleUrl(manifestInfo.id, sourceBundleUrlComponents);
                }
            }
            if (packagerCommandLine && isProxyDebuggingMethod && isDesktopAppType) {
                packagerPromise = runPackager(packagerCommandLine, packagerHost, packagerPort);
            }
            if (devServerCommandLine) {
                devServerPromise = runDevServer(devServerCommandLine, devServerPort);
            }
            if (packagerPromise !== undefined) {
                try {
                    yield packagerPromise;
                }
                catch (err) {
                    console.log(`Unable to start the packager. ${err}`);
                }
            }
            if (devServerPromise !== undefined) {
                try {
                    yield devServerPromise;
                }
                catch (err) {
                    console.log(`Unable to start the dev server. ${err}`);
                }
            }
            if (enableDebugging && isProxyDebuggingMethod && isDesktopAppType) {
                try {
                    yield runNodeDebugger();
                }
                catch (err) {
                    console.log(`Unable to start the node debugger. ${err}`);
                }
            }
            if (isDesktopAppType) {
                try {
                    console.log(`Sideloading the Office Add-in...`);
                    yield office_addin_dev_settings_1.sideloadAddIn(manifestPath, app, true);
                }
                catch (err) {
                    throw new Error(`Unable to sideload the Office Add-in. \n${err}`);
                }
            }
            console.log(enableDebugging
                ? "Debugging started."
                : "Started.");
            defaults_1.usageDataObject.sendUsageDataSuccessEvent("startDebugging");
        }
        catch (err) {
            defaults_1.usageDataObject.sendUsageDataException("startDebugging", err);
            throw err;
        }
    });
}
exports.startDebugging = startDebugging;
function waitUntil(callback, retryCount, retryDelay) {
    return __awaiter(this, void 0, void 0, function* () {
        let done = yield callback();
        while (!done && retryCount) {
            --retryCount;
            yield delay(retryDelay);
            done = yield callback();
        }
        return done;
    });
}
exports.waitUntil = waitUntil;
function waitUntilDevServerIsRunning(port, retryCount = 30, retryDelay = 1000) {
    return __awaiter(this, void 0, void 0, function* () {
        return waitUntil(() => __awaiter(this, void 0, void 0, function* () { return yield isDevServerRunning(port); }), retryCount, retryDelay);
    });
}
exports.waitUntilDevServerIsRunning = waitUntilDevServerIsRunning;
function waitUntilPackagerIsRunning(statusUrl, retryCount = 30, retryDelay = 1000) {
    return __awaiter(this, void 0, void 0, function* () {
        return waitUntil(() => __awaiter(this, void 0, void 0, function* () { return yield isPackagerRunning(statusUrl); }), retryCount, retryDelay);
    });
}
exports.waitUntilPackagerIsRunning = waitUntilPackagerIsRunning;
//# sourceMappingURL=start.js.map