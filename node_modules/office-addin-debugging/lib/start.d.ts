import * as devSettings from "office-addin-dev-settings";
import { DebuggingMethod } from "office-addin-dev-settings";
import { OfficeApp } from "office-addin-manifest";
export declare enum AppType {
    Desktop = "desktop",
    Web = "web"
}
export declare enum Platform {
    Android = "android",
    Desktop = "desktop",
    iOS = "ios",
    MacOS = "macos",
    Win32 = "win32",
    Web = "web"
}
export declare function isDevServerRunning(port: number): Promise<boolean>;
export declare function isPackagerRunning(statusUrl: string): Promise<boolean>;
export declare function parseAppType(text: string): AppType | undefined;
export declare function parseDebuggingMethod(text: string): DebuggingMethod | undefined;
export declare function parsePlatform(text: string): Platform | undefined;
export declare function runDevServer(commandLine: string, port?: number): Promise<void>;
export declare function runNodeDebugger(host?: string, port?: string): Promise<void>;
export declare function runPackager(commandLine: string, host?: string, port?: string): Promise<void>;
/**
 * Start debugging
 * @param manifestPath The path to the manifest file.
 * @param appType The type of application to debug.
 * @param app The Office application to debug.
 * @param debuggingMethod The method to use when debugging.
 * @param sourceBundleUrlComponents Specify components of the source bundle url.
 * @param devServerCommandLine If provided, starts the dev server.
 * @param devServerPort If provided, port to verify that the dev server is running.
 * @param packagerCommandLine If provided, starts the packager.
 * @param packagerHost Specifies the host name of the packager.
 * @param packagerPort Specifies the port of the packager.
 * @param enableDebugging If false, start without debugging.
 */
export declare function startDebugging(manifestPath: string, appType: AppType, app: OfficeApp | undefined, debuggingMethod?: DebuggingMethod, sourceBundleUrlComponents?: devSettings.SourceBundleUrlComponents, devServerCommandLine?: string, devServerPort?: number, packagerCommandLine?: string, packagerHost?: string, packagerPort?: string, enableDebugging?: boolean, enableLiveReload?: boolean): Promise<void>;
export declare function waitUntil(callback: (() => Promise<boolean>), retryCount: number, retryDelay: number): Promise<boolean>;
export declare function waitUntilDevServerIsRunning(port: number, retryCount?: number, retryDelay?: number): Promise<boolean>;
export declare function waitUntilPackagerIsRunning(statusUrl: string, retryCount?: number, retryDelay?: number): Promise<boolean>;
