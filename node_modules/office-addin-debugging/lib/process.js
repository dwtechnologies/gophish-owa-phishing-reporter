// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const childProcess = require("child_process");
function startProcess(commandLine, verbose = false) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            if (verbose) {
                console.log(`Starting: ${commandLine}`);
            }
            childProcess.exec(commandLine, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve();
                }
            });
        });
    });
}
exports.startProcess = startProcess;
function startDetachedProcess(commandLine, verbose = false) {
    if (verbose) {
        console.log(`Starting: ${commandLine}`);
    }
    const subprocess = childProcess.spawn(commandLine, [], {
        detached: true,
        shell: true,
        stdio: "ignore",
        windowsHide: false,
    });
    subprocess.on("error", (err) => {
        console.log(`Unable to run command: ${commandLine}.\n${err}`);
    });
    subprocess.unref();
    return subprocess;
}
exports.startDetachedProcess = startDetachedProcess;
function stopProcess(processId) {
    if (processId) {
        try {
            if (process.platform === "win32") {
                childProcess.spawn("taskkill", ["/pid", `${processId}`, "/f", "/t"]);
            }
            else {
                process.kill(processId);
            }
        }
        catch (err) {
            console.log(`Unable to kill process id ${processId}: ${err}`);
        }
    }
}
exports.stopProcess = stopProcess;
//# sourceMappingURL=process.js.map