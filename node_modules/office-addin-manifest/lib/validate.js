// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const node_fetch_1 = require("node-fetch");
const defaults_1 = require("./defaults");
class ManifestValidationDetails {
}
exports.ManifestValidationDetails = ManifestValidationDetails;
class ManifestValidationIssue {
}
exports.ManifestValidationIssue = ManifestValidationIssue;
class ManifestValidationProduct {
}
exports.ManifestValidationProduct = ManifestValidationProduct;
class ManifestValidationReport {
}
exports.ManifestValidationReport = ManifestValidationReport;
class ManifestValidation {
    constructor() {
        this.isValid = false;
    }
}
exports.ManifestValidation = ManifestValidation;
function validateManifest(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const validation = new ManifestValidation();
            // read the manifest file
            // const manifest = await readManifestFile(manifestPath);
            const stream = yield fs_1.createReadStream(manifestPath);
            let response;
            try {
                response = yield node_fetch_1.default("https://packageacceptance.omex.office.net/api/check", {
                    body: stream,
                    headers: {
                        "Content-Type": "application/xml",
                    },
                    method: "POST",
                });
            }
            catch (err) {
                throw new Error(`Unable to contact the manifest validation service.\n${err}`);
            }
            const text = yield response.text();
            const json = JSON.parse(text.trim());
            if (json) {
                validation.report = json;
                validation.status = response.status;
            }
            if (validation.report) {
                const result = validation.report.status;
                if (result) {
                    switch (result.toLowerCase()) {
                        case "accepted":
                            validation.isValid = true;
                            break;
                    }
                }
            }
            else {
                throw new Error("The manifest validation service did not return the expected response.");
            }
            defaults_1.usageDataObject.sendUsageDataSuccessEvent("validateManifest");
            return validation;
        }
        catch (err) {
            defaults_1.usageDataObject.sendUsageDataException("validateManifest", err);
            throw err;
        }
    });
}
exports.validateManifest = validateManifest;
//# sourceMappingURL=validate.js.map