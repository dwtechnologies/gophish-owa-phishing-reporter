{"version":3,"file":"Toggle.base.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction, getId, inputProperties, getNativeProps } from '../../Utilities';\nimport { IToggleProps, IToggle, IToggleStyleProps, IToggleStyles } from './Toggle.types';\nimport { Label } from '../../Label';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface IToggleState {\n  checked: boolean;\n}\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\n\nexport class ToggleBase extends BaseComponent<IToggleProps, IToggleState> implements IToggle {\n  private _id: string;\n  private _toggleButton = React.createRef<HTMLButtonElement>();\n\n  public static getDerivedStateFromProps(props: IToggleProps, state: IToggleState): IToggleState {\n    if (props.checked === undefined) {\n      return state;\n    }\n\n    return {\n      ...state,\n      checked: !!props.checked\n    };\n  }\n\n  constructor(props: IToggleProps) {\n    super(props);\n\n    this._warnMutuallyExclusive({\n      checked: 'defaultChecked'\n    });\n\n    this._warnDeprecations({\n      onAriaLabel: 'ariaLabel',\n      offAriaLabel: undefined,\n      onChanged: 'onChange'\n    });\n\n    this.state = {\n      checked: !!(props.checked || props.defaultChecked)\n    };\n    this._id = props.id || getId('Toggle');\n  }\n\n  /**\n   * Gets the current checked state of the toggle.\n   */\n  public get checked(): boolean {\n    return this.state.checked;\n  }\n\n  public render(): JSX.Element {\n    const {\n      as: RootType = 'div',\n      className,\n      theme,\n      disabled,\n      keytipProps,\n      label,\n      ariaLabel,\n      onAriaLabel,\n      offAriaLabel,\n      offText,\n      onText,\n      styles,\n      inlineLabel\n    } = this.props;\n    const { checked } = this.state;\n    const stateText = checked ? onText : offText;\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText\n    });\n\n    const labelId = `${this._id}-label`;\n    const stateTextId = `${this._id}-stateText`;\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label\n    // 4. onText (if checked) or offText (if not checked)\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      } else if (stateText) {\n        labelledById = stateTextId;\n      }\n    }\n\n    return (\n      <RootType className={classNames.root} hidden={(toggleNativeProps as any).hidden}>\n        {label && (\n          <Label htmlFor={this._id} className={classNames.label} id={labelId}>\n            {label}\n          </Label>\n        )}\n\n        <div className={classNames.container}>\n          <KeytipData keytipProps={keytipProps} ariaDescribedBy={(toggleNativeProps as any)['aria-describedby']} disabled={disabled}>\n            {(keytipAttributes: any): JSX.Element => (\n              <button\n                {...toggleNativeProps}\n                {...keytipAttributes}\n                className={classNames.pill}\n                disabled={disabled}\n                id={this._id}\n                type=\"button\"\n                role=\"switch\" // ARIA 1.1 definition; \"checkbox\" in ARIA 1.0\n                ref={this._toggleButton}\n                aria-disabled={disabled}\n                aria-checked={checked}\n                aria-label={ariaLabel ? ariaLabel : badAriaLabel}\n                data-is-focusable={true}\n                onChange={this._noop}\n                onClick={this._onClick}\n                aria-labelledby={labelledById}\n              >\n                <div className={classNames.thumb} />\n              </button>\n            )}\n          </KeytipData>\n          {stateText && (\n            <Label htmlFor={this._id} className={classNames.text} id={stateTextId}>\n              {stateText}\n            </Label>\n          )}\n        </div>\n      </RootType>\n    );\n  }\n\n  public focus() {\n    if (this._toggleButton.current) {\n      this._toggleButton.current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>) => {\n    const { disabled, checked: checkedProp, onChange, onChanged, onClick } = this.props;\n    const { checked } = this.state;\n\n    if (!disabled) {\n      // Only update the state if the user hasn't provided it.\n      if (checkedProp === undefined) {\n        this.setState({\n          checked: !checked\n        });\n      }\n\n      if (onChange) {\n        onChange(ev, !checked);\n      }\n\n      if (onChanged) {\n        onChanged(!checked);\n      }\n\n      if (onClick) {\n        onClick(ev);\n      }\n    }\n  };\n\n  private _noop(): void {\n    /* no-op */\n  }\n}\n"]}