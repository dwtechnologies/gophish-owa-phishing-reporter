{"version":3,"file":"SuggestionsItem.js","sourceRoot":"../src/","sources":["components/pickers/Suggestions/SuggestionsItem.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAE/B,gDAA4E;AAE5E,0CAA4D;AAG5D,iDAAmD;AACnD,IAAM,YAAY,GAAQ,YAAY,CAAC;AAEvC,IAAM,aAAa,GAAG,8BAAkB,EAAsD,CAAC;AAE/F;;GAEG;AACH;IAAwC,2CAA0C;IAAlF;;IA6DA,CAAC;IA5DQ,gCAAM,GAAb;;QACQ,IAAA,eAUQ,EATZ,oCAAe,EACf,sCAAgB,EAChB,oBAAO,EACP,wBAAS,EACT,8BAAY,EACZ,0CAAkB,EAClB,gDAAqB,EACrB,kBAAM,EACN,gBACY,CAAC;QAEf,OAAO;QACP,gFAAgF;QAChF,oFAAoF;QACpF,+EAA+E;QAC/E,oFAAoF;QACpF,mFAAmF;QACnF,wDAAwD;QACxD,+EAA+E;QAC/E,sFAAsF;QACtF,wFAAwF;QACxF,gDAAgD;QAChD,IAAM,UAAU,GAAwD,MAAM;YAC5E,CAAC,CAAC,aAAa,CAAC,MAAM,EAAE;gBACpB,KAAK,EAAE,KAAM;gBACb,SAAS,WAAA;gBACT,SAAS,EAAE,eAAe,CAAC,QAAQ,IAAI,kBAAkB;aAC1D,CAAC;YACJ,CAAC,CAAC;gBACE,IAAI,EAAE,eAAG,CACP,qBAAqB,EACrB,YAAY,CAAC,eAAe;oBAE1B,GAAC,eAAe,GAAG,YAAY,CAAC,0BAA0B,IAAG,eAAe,CAAC,QAAQ,IAAI,kBAAkB;yBAE7G,SAAS,CACV;gBACD,UAAU,EAAE,eAAG,CAAC,2BAA2B,EAAE,YAAY,CAAC,UAAU,CAAC;gBACrE,WAAW,EAAE,eAAG,CAAC,4BAA4B,EAAE,YAAY,CAAC,WAAW,CAAC;aACzE,CAAC;QAEN,OAAO,CACL,6BAAK,SAAS,EAAE,UAAU,CAAC,IAAI;YAC7B,oBAAC,sBAAa,IAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,UAAU,IAC9D,gBAAgB,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CACrC;YACf,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAC7B,oBAAC,mBAAU,IACT,SAAS,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,EACzE,KAAK,EAAE,qBAAqB,EAC5B,SAAS,EAAE,qBAAqB,EAChC,OAAO,EAAE,YAAY,EACrB,SAAS,EAAE,UAAU,CAAC,WAAW,GACjC,CACH,CAAC,CAAC,CAAC,IAAI,CACJ,CACP,CAAC;IACJ,CAAC;IACH,sBAAC;AAAD,CAAC,AA7DD,CAAwC,yBAAa,GA6DpD;AA7DY,0CAAe","sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, BaseComponent, css } from '../../../Utilities';\nimport { IProcessedStyleSet } from '../../../Styling';\nimport { CommandButton, IconButton } from '../../../Button';\nimport { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nimport * as stylesImport from './Suggestions.scss';\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsItemStyleProps, ISuggestionsItemStyles>();\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsItem<T> extends BaseComponent<ISuggestionItemProps<T>, {}> {\n  public render(): JSX.Element {\n    const {\n      suggestionModel,\n      RenderSuggestion,\n      onClick,\n      className,\n      onRemoveItem,\n      isSelectedOverride,\n      removeButtonAriaLabel,\n      styles,\n      theme\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<ISuggestionsItemStyles>> = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggested: suggestionModel.selected || isSelectedOverride\n        })\n      : {\n          root: css(\n            'ms-Suggestions-item',\n            legacyStyles.suggestionsItem,\n            {\n              ['is-suggested ' + legacyStyles.suggestionsItemIsSuggested]: suggestionModel.selected || isSelectedOverride\n            },\n            className\n          ),\n          itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n          closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton)\n        };\n\n    return (\n      <div className={classNames.root}>\n        <CommandButton onClick={onClick} className={classNames.itemButton}>\n          {RenderSuggestion(suggestionModel.item, this.props)}\n        </CommandButton>\n        {this.props.showRemoveButton ? (\n          <IconButton\n            iconProps={{ iconName: 'Cancel', styles: { root: { fontSize: '12px' } } }}\n            title={removeButtonAriaLabel}\n            ariaLabel={removeButtonAriaLabel}\n            onClick={onRemoveItem}\n            className={classNames.closeButton}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n"]}