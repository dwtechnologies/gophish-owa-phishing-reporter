{"version":3,"file":"DetailsList.NavigatingFocus.Example.js","sourceRoot":"../src/","sources":["components/DetailsList/examples/DetailsList.NavigatingFocus.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,sEAA8E;AAC9E,wDAAuD;AAQvD;IAAuD,6DAA4D;IAAnH;QAAA,qEAkDC;QAjDQ,WAAK,GAA4C;YACtD,KAAK,EAAE,aAAa,CAAC,EAAE,CAAC;YACxB,GAAG,EAAE,CAAC;SACP,CAAC;QAEM,cAAQ,GAAc;YAC5B;gBACE,GAAG,EAAE,UAAU;gBACf,IAAI,EAAE,WAAW;gBACjB,QAAQ,EAAE,UAAA,IAAI,IAAI,OAAA;gBAChB,yCAAyC;gBACzC,oBAAC,WAAI,IAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAApB,CAAoB,IACjD,IAAI,CACA,CACR,EALiB,CAKjB;aACS;YACZ;gBACE,GAAG,EAAE,MAAM;gBACX,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,UAAA,IAAI,IAAI,OAAA,MAAM,EAAN,CAAM;aACd;SACb,CAAC;QAoBM,eAAS,GAAG,UAAC,IAAY;YAC/B,KAAI,CAAC,QAAQ,CAAC;gBACZ,KAAK,EAAE,aAAa,CAAC,IAAI,GAAG,KAAK,CAAC;gBAClC,mBAAmB,EAAE,CAAC;gBACtB,+EAA+E;gBAC/E,GAAG,EAAE,KAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;aACxB,CAAC,CAAC;QACL,CAAC,CAAC;;IACJ,CAAC;IA1BQ,kDAAM,GAAb;QACE,8EAA8E;QAC9E,oFAAoF;QACpF,oFAAoF;QACpF,OAAO,CACL,oBAAC,yBAAW,IACV,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EACnB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,OAAO,EAAE,IAAI,CAAC,QAAQ,EACtB,aAAa,EAAE,IAAI,CAAC,SAAS,EAC7B,mBAAmB,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,EACnD,2BAA2B,EAAC,kBAAkB,EAC9C,6BAA6B,EAAC,gCAAgC,EAC9D,oBAAoB,EAAC,cAAc,GACnC,CACH,CAAC;IACJ,CAAC;IAUH,wCAAC;AAAD,CAAC,AAlDD,CAAuD,KAAK,CAAC,SAAS,GAkDrE;AAlDY,8EAAiC;AAoD9C,SAAS,aAAa,CAAC,MAAc;IACnC,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,UAAC,IAAY,IAAK,OAAA,MAAM,GAAG,SAAS,GAAG,IAAI,EAAzB,CAAyB,CAAC,CAAC;AAC5F,CAAC","sourcesContent":["import * as React from 'react';\nimport { DetailsList, IColumn } from 'office-ui-fabric-react/lib/DetailsList';\nimport { Link } from 'office-ui-fabric-react/lib/Link';\n\nexport interface IDetailsListNavigatingFocusExampleState {\n  items: string[];\n  initialFocusedIndex?: number;\n  key: number;\n}\n\nexport class DetailsListNavigatingFocusExample extends React.Component<{}, IDetailsListNavigatingFocusExampleState> {\n  public state: IDetailsListNavigatingFocusExampleState = {\n    items: generateItems(''),\n    key: 0\n  };\n\n  private _columns: IColumn[] = [\n    {\n      key: 'filepath',\n      name: 'File path',\n      onRender: item => (\n        // tslint:disable-next-line:jsx-no-lambda\n        <Link key={item} onClick={() => this._navigate(item)}>\n          {item}\n        </Link>\n      )\n    } as IColumn,\n    {\n      key: 'size',\n      name: 'Size',\n      onRender: item => '4 KB'\n    } as IColumn\n  ];\n\n  public render(): JSX.Element {\n    // By default, when the list is re-rendered on navigation or some other event,\n    // focus goes to the list container and the user has to tab back into the list body.\n    // Setting initialFocusedIndex makes focus go directly to a particular item instead.\n    return (\n      <DetailsList\n        key={this.state.key}\n        items={this.state.items}\n        columns={this._columns}\n        onItemInvoked={this._navigate}\n        initialFocusedIndex={this.state.initialFocusedIndex}\n        ariaLabelForSelectionColumn=\"Toggle selection\"\n        ariaLabelForSelectAllCheckbox=\"Toggle selection for all items\"\n        checkButtonAriaLabel=\"Row checkbox\"\n      />\n    );\n  }\n\n  private _navigate = (name: string) => {\n    this.setState({\n      items: generateItems(name + ' / '),\n      initialFocusedIndex: 0,\n      // Simulate navigation by updating the list's key, which causes it to re-render\n      key: this.state.key + 1\n    });\n  };\n}\n\nfunction generateItems(parent: string): string[] {\n  return Array.prototype.map.call('ABCDEFGHI', (name: string) => parent + 'Folder ' + name);\n}\n"]}