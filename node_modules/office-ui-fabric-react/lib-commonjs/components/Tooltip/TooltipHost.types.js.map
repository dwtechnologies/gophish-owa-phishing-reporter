{"version":3,"file":"TooltipHost.types.js","sourceRoot":"../src/","sources":["components/Tooltip/TooltipHost.types.ts"],"names":[],"mappings":";;AAuBA;;GAEG;AACH,IAAY,mBAMX;AAND,WAAY,mBAAmB;IAC7B,6DAA6D;IAC7D,iEAAM,CAAA;IAEN,iEAAiE;IACjE,6DAAI,CAAA;AACN,CAAC,EANW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAM9B","sourcesContent":["import * as React from 'react';\nimport { TooltipHostBase } from './TooltipHost.base';\nimport { TooltipDelay, ITooltipProps } from './Tooltip.types';\nimport { ICalloutProps } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport { IStyle, ITheme } from '../../Styling';\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHost {\n  /**\n   * Shows the tooltip.\n   */\n  show: () => void;\n\n  /**\n   * Dismisses the tooltip.\n   */\n  dismiss: () => void;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport enum TooltipOverflowMode {\n  /** Only show tooltip if parent DOM element is overflowing */\n  Parent,\n\n  /** Only show tooltip if tooltip host's content is overflowing */\n  Self\n}\n\n/**\n * Tooltip component props.\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostProps extends React.HTMLAttributes<HTMLDivElement | TooltipHostBase> {\n  /**\n   * Optional callback to access the ITooltipHost interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITooltipHost>;\n\n  /**\n   * Additional properties to pass through for Callout, reference detail properties in ICalloutProps\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Optionally a number of milliseconds to delay closing the tooltip, so that\n   * the user has time to hover over the tooltip and interact with it. Hovering\n   * over the tooltip will count as hovering over the host, so that the tooltip\n   * will stay open if the user is actively interacting with it.\n   */\n  closeDelay?: number;\n\n  /**\n   *  Content to be passed to the tooltip\n   */\n  content?: string | JSX.Element | JSX.Element[];\n\n  /**\n   * Length of delay\n   * @defaultvalue medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Indicator of how the tooltip should be anchored to its targetElement.\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used instead\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Optional class name to apply to tooltip host.\n   */\n  hostClassName?: string;\n\n  /**\n   * Only show if there is overflow. If set, the tooltip hosts observes  and only shows the tooltip if this element has overflow.\n   * It also uses the parent as target element for the tooltip.\n   */\n  overflowMode?: TooltipOverflowMode;\n\n  /**\n   * Whether or not to mark the container as described by the tooltip.\n   * If not specified, the caller should mark as element as described by the tooltip id.\n   */\n  setAriaDescribedBy?: boolean;\n\n  /**\n   * Additional properties to pass through for Tooltip, reference detail properties in ITooltipProps\n   */\n  tooltipProps?: ITooltipProps;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles>;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Notifies when tooltip becomes visible or hidden, whatever the trigger was.\n   */\n  onTooltipToggle?(isTooltipVisible: boolean): void;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostStyleProps {\n  /**\n   * Accept theme prop.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept optional classNames for the host wrapper\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostStyles {\n  /**\n   * Style for the host wrapper element.\n   */\n  root: IStyle;\n}\n"]}