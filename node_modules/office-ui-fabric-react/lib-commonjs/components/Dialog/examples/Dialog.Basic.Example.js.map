{"version":3,"file":"Dialog.Basic.Example.js","sourceRoot":"../src/","sources":["components/Dialog/examples/Dialog.Basic.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,4DAAqF;AACrF,4DAAiF;AACjF,kEAA6D;AAC7D,8DAAqF;AACrF,gEAA+D;AAC/D,4EAA2E;AAE3E,IAAM,gBAAgB,GAAG,qBAAW,CAAC,4BAAkB,CAAC,CAAC;AAOzD;IAAwC,8CAA6C;IAArF;QAAA,qEAgEC;QA/DQ,WAAK,GAA6B;YACvC,UAAU,EAAE,IAAI;YAChB,WAAW,EAAE,KAAK;SACnB,CAAC;QACF,6DAA6D;QAC7D,wFAAwF;QAChF,cAAQ,GAAW,iBAAK,CAAC,aAAa,CAAC,CAAC;QACxC,gBAAU,GAAW,iBAAK,CAAC,cAAc,CAAC,CAAC;QAC3C,kBAAY,GAAG;YACrB,gBAAgB,EAAE,MAAM;YACxB,iBAAiB,EAAE,OAAO;YAC1B,IAAI,EAAE,+BAAc;SACrB,CAAC;QAwCM,iBAAW,GAAG;YACpB,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC;QAEM,kBAAY,GAAG;YACrB,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACtC,CAAC,CAAC;QAEM,sBAAgB,GAAG;YACzB,KAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;QAC1D,CAAC,CAAC;;IACJ,CAAC;IAjDQ,mCAAM,GAAb;QACQ,IAAA,eAAwC,EAAtC,0BAAU,EAAE,4BAA0B,CAAC;QAC/C,OAAO,CACL;YACE,oBAAC,mBAAQ,IAAC,KAAK,EAAC,cAAc,EAAC,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,OAAO,EAAE,WAAW,GAAI;YACxF,oBAAC,sBAAa,IAAC,aAAa,EAAC,yBAAyB,EAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAC,aAAa,GAAG;YACvG,+BAAO,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,gBAAgB,sBAE7C;YACR,+BAAO,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,gBAAgB,4BAE/C;YAER,oBAAC,eAAM,IACL,MAAM,EAAE,UAAU,EAClB,SAAS,EAAE,IAAI,CAAC,YAAY,EAC5B,kBAAkB,EAAE;oBAClB,IAAI,EAAE,mBAAU,CAAC,MAAM;oBACvB,KAAK,EAAE,iBAAiB;oBACxB,OAAO,EAAE,qDAAqD;iBAC/D,EACD,UAAU,EAAE;oBACV,WAAW,EAAE,IAAI,CAAC,QAAQ;oBAC1B,cAAc,EAAE,IAAI,CAAC,UAAU;oBAC/B,UAAU,EAAE,KAAK;oBACjB,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;oBACnC,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS;iBACzD;gBAED,oBAAC,qBAAY;oBACX,oBAAC,sBAAa,IAAC,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAC,MAAM,GAAG;oBACzD,oBAAC,sBAAa,IAAC,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAC,YAAY,GAAG,CAClD,CACR,CACL,CACP,CAAC;IACJ,CAAC;IAaH,yBAAC;AAAD,CAAC,AAhED,CAAwC,KAAK,CAAC,SAAS,GAgEtD;AAhEY,gDAAkB","sourcesContent":["import * as React from 'react';\nimport { Dialog, DialogType, DialogFooter } from 'office-ui-fabric-react/lib/Dialog';\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { getId } from 'office-ui-fabric-react/lib/Utilities';\nimport { hiddenContentStyle, mergeStyles } from 'office-ui-fabric-react/lib/Styling';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { ContextualMenu } from 'office-ui-fabric-react/lib/ContextualMenu';\n\nconst screenReaderOnly = mergeStyles(hiddenContentStyle);\n\nexport interface IDialogBasicExampleState {\n  hideDialog: boolean;\n  isDraggable: boolean;\n}\n\nexport class DialogBasicExample extends React.Component<{}, IDialogBasicExampleState> {\n  public state: IDialogBasicExampleState = {\n    hideDialog: true,\n    isDraggable: false\n  };\n  // Use getId() to ensure that the IDs are unique on the page.\n  // (It's also okay to use plain strings without getId() and manually ensure uniqueness.)\n  private _labelId: string = getId('dialogLabel');\n  private _subTextId: string = getId('subTextLabel');\n  private _dragOptions = {\n    moveMenuItemText: 'Move',\n    closeMenuItemText: 'Close',\n    menu: ContextualMenu\n  };\n\n  public render() {\n    const { hideDialog, isDraggable } = this.state;\n    return (\n      <div>\n        <Checkbox label=\"Is draggable\" onChange={this._toggleDraggable} checked={isDraggable} />\n        <DefaultButton secondaryText=\"Opens the Sample Dialog\" onClick={this._showDialog} text=\"Open Dialog\" />\n        <label id={this._labelId} className={screenReaderOnly}>\n          My sample Label\n        </label>\n        <label id={this._subTextId} className={screenReaderOnly}>\n          My Sample description\n        </label>\n\n        <Dialog\n          hidden={hideDialog}\n          onDismiss={this._closeDialog}\n          dialogContentProps={{\n            type: DialogType.normal,\n            title: 'Missing Subject',\n            subText: 'Do you want to send this message without a subject?'\n          }}\n          modalProps={{\n            titleAriaId: this._labelId,\n            subtitleAriaId: this._subTextId,\n            isBlocking: false,\n            styles: { main: { maxWidth: 450 } },\n            dragOptions: isDraggable ? this._dragOptions : undefined\n          }}\n        >\n          <DialogFooter>\n            <PrimaryButton onClick={this._closeDialog} text=\"Send\" />\n            <DefaultButton onClick={this._closeDialog} text=\"Don't send\" />\n          </DialogFooter>\n        </Dialog>\n      </div>\n    );\n  }\n\n  private _showDialog = (): void => {\n    this.setState({ hideDialog: false });\n  };\n\n  private _closeDialog = (): void => {\n    this.setState({ hideDialog: true });\n  };\n\n  private _toggleDraggable = (): void => {\n    this.setState({ isDraggable: !this.state.isDraggable });\n  };\n}\n"]}