{"version":3,"file":"ColorPickerGridCell.base.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/ColorPickerGridCell.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ITheme, mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { GridCell } from '../../utilities/grid/GridCell';\nimport { IGridCellProps } from '../../utilities/grid/GridCell.types';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nimport { IButtonClassNames } from '../Button/BaseButton.classNames';\nimport {\n  IColorCellProps,\n  IColorPickerGridCellProps,\n  IColorPickerGridCellStyleProps,\n  IColorPickerGridCellStyles\n} from './ColorPickerGridCell.types';\n\nconst getColorPickerGridCellButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined\n  ): IButtonClassNames => {\n    const styles = getActionButtonStyles(theme);\n    return mergeStyleSets({\n      root: [\n        'ms-Button',\n        styles.root,\n        variantClassName,\n        className,\n        checked && ['is-checked', styles.rootChecked],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed\n            }\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed\n            }\n          }\n      ],\n      flexContainer: ['ms-Button-flexContainer', styles.flexContainer]\n    });\n  }\n);\n\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\n\nclass ColorCell extends GridCell<IColorCellProps, IGridCellProps<IColorCellProps>> {}\n\nexport class ColorPickerGridCellBase extends React.Component<IColorPickerGridCellProps, {}> {\n  public static defaultProps = {\n    circle: true,\n    disabled: false,\n    selected: false\n  } as IColorPickerGridCellProps;\n\n  private _classNames: { [key in keyof IColorPickerGridCellStyles]: string };\n\n  public render(): JSX.Element {\n    const {\n      item,\n      id,\n      selected,\n      disabled,\n      styles,\n      theme,\n      circle,\n      color,\n      onClick,\n      onHover,\n      onFocus,\n      onMouseEnter,\n      onMouseMove,\n      onMouseLeave,\n      onWheel,\n      onKeyDown,\n      height,\n      width,\n      borderWidth\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      disabled,\n      selected,\n      circle,\n      isWhite: this._isWhiteCell(color),\n      height,\n      width,\n      borderWidth\n    });\n\n    return (\n      <ColorCell\n        item={item}\n        id={`${id}-${item.id}-${item.index}`}\n        key={item.id}\n        disabled={disabled}\n        role={'gridcell'}\n        onRenderItem={this._onRenderColorOption}\n        selected={selected}\n        onClick={onClick}\n        onHover={onHover}\n        onFocus={onFocus}\n        label={item.label}\n        className={this._classNames.colorCell}\n        getClassNames={getColorPickerGridCellButtonClassNames}\n        index={item.index}\n        onMouseEnter={onMouseEnter}\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n        onWheel={onWheel}\n        onKeyDown={onKeyDown}\n      />\n    );\n  }\n\n  /**\n   * Render the core of a color cell\n   * @returns - Element representing the core of the item\n   */\n  private _onRenderColorOption = (colorOption: IColorCellProps): JSX.Element => {\n    // Build an SVG for the cell with the given shape and color properties\n    return (\n      <svg className={this._classNames.svg} viewBox=\"0 0 20 20\" fill={getColorFromString(colorOption.color as string)!.str}>\n        {this.props.circle ? <circle cx=\"50%\" cy=\"50%\" r=\"50%\" /> : <rect width=\"100%\" height=\"100%\" />}\n      </svg>\n    );\n  };\n\n  /**\n   * Validate if the cell's color is white or not to apply whiteCell style\n   * @param inputColor - The color of the current cell\n   * @returns - Whether the cell's color is white or not.\n   */\n  private _isWhiteCell(inputColor: string | undefined): boolean {\n    const color = getColorFromString(inputColor!);\n    return color!.hex === 'ffffff';\n  }\n}\n"]}