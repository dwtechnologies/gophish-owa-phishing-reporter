{"version":3,"file":"ColorRectangle.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorRectangle/ColorRectangle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, EventGroup, initializeComponentRef } from '../../../Utilities';\nimport { IColor } from '../../../utilities/color/interfaces';\nimport { MAX_COLOR_SATURATION, MAX_COLOR_VALUE } from '../../../utilities/color/consts';\nimport { getFullColorString } from '../../../utilities/color/getFullColorString';\nimport { updateSV } from '../../../utilities/color/updateSV';\nimport { clamp } from '../../../utilities/color/clamp';\nimport { IColorRectangleProps, IColorRectangleStyleProps, IColorRectangleStyles, IColorRectangle } from './ColorRectangle.types';\n\nconst getClassNames = classNamesFunction<IColorRectangleStyleProps, IColorRectangleStyles>();\n\nexport interface IColorRectangleState {\n  color: IColor;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorRectangleBase extends React.Component<IColorRectangleProps, IColorRectangleState> implements IColorRectangle {\n  public static defaultProps = {\n    minSize: 220\n  };\n\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n\n  constructor(props: IColorRectangleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    const { color } = this.props;\n\n    this.state = {\n      color: color\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IColorRectangleProps): void {\n    const { color } = newProps;\n\n    this.setState({\n      color: color\n    });\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { minSize, theme, className, styles } = this.props;\n    const { color } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      minSize\n    });\n\n    return (\n      <div\n        ref={this._root}\n        className={classNames.root}\n        style={{ backgroundColor: getFullColorString(color) }}\n        onMouseDown={this._onMouseDown}\n      >\n        <div className={classNames.light} />\n        <div className={classNames.dark} />\n        <div\n          className={classNames.thumb}\n          style={{ left: color!.s + '%', top: MAX_COLOR_VALUE - color!.v + '%', backgroundColor: color!.str }}\n        />\n      </div>\n    );\n  }\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\n    this._events.on(window, 'mouseup', this._disableEvents, true);\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { color, onChange } = this.props;\n\n    if (!this._root.current) {\n      return;\n    }\n\n    // If the primary button (1) isn't pressed, the user is no longer dragging, so turn off the\n    // event handlers and exit. (this may only be relevant while debugging)\n    // tslint:disable-next-line:no-bitwise\n    if (!(ev.buttons & 1)) {\n      this._disableEvents();\n      return;\n    }\n\n    const newColor = _getNewColor(ev, color, this._root.current);\n    if (newColor) {\n      this.setState({\n        color: newColor\n      });\n\n      if (onChange) {\n        onChange(ev, newColor);\n      }\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _disableEvents = (): void => {\n    this._events.off();\n  };\n}\n\n/**\n * Exported for testing only.\n * @internal\n */\nexport function _getNewColor(ev: React.MouseEvent<HTMLElement>, prevColor: IColor, root: HTMLElement): IColor | undefined {\n  const rectSize = root.getBoundingClientRect();\n\n  const sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n  const vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n\n  return updateSV(\n    prevColor,\n    clamp(sPercentage * MAX_COLOR_SATURATION, MAX_COLOR_SATURATION),\n    clamp(MAX_COLOR_VALUE - vPercentage * MAX_COLOR_VALUE, MAX_COLOR_VALUE)\n  );\n}\n"]}