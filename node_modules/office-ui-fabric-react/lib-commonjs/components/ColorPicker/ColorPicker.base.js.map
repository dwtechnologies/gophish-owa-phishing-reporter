{"version":3,"file":"ColorPicker.base.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport { IColorPickerProps, IColorPickerStyleProps, IColorPickerStyles, IColorPicker } from './ColorPicker.types';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\n// These imports are separated to help with bundling\nimport {\n  MAX_COLOR_ALPHA,\n  MAX_COLOR_HUE,\n  MAX_COLOR_RGB,\n  MAX_HEX_LENGTH,\n  MAX_RGBA_LENGTH,\n  MIN_HEX_LENGTH,\n  MIN_RGBA_LENGTH,\n  HEX_REGEX,\n  RGBA_REGEX\n} from '../../utilities/color/consts';\nimport { IColor, IRGB } from '../../utilities/color/interfaces';\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateH } from '../../utilities/color/updateH';\nimport { correctRGB } from '../../utilities/color/correctRGB';\nimport { correctHex } from '../../utilities/color/correctHex';\n\ntype IRGBHex = Pick<IColor, 'r' | 'g' | 'b' | 'a' | 'hex'>;\n\nexport interface IColorPickerState {\n  color: IColor;\n  editingColor?: {\n    component: keyof IRGBHex;\n    value: string;\n  };\n}\n\nconst getClassNames = classNamesFunction<IColorPickerStyleProps, IColorPickerStyles>();\n\nconst colorComponents: Array<keyof IRGBHex> = ['hex', 'r', 'g', 'b', 'a'];\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorPickerBase extends React.Component<IColorPickerProps, IColorPickerState> implements IColorPicker {\n  public static defaultProps = {\n    hexLabel: 'Hex',\n    redLabel: 'Red',\n    greenLabel: 'Green',\n    blueLabel: 'Blue',\n    alphaLabel: 'Alpha'\n  };\n\n  private _textChangeHandlers: {\n    [K in keyof IRGBHex]: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void\n  };\n  private _textLabels: { [K in keyof IRGBHex]?: string };\n\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')!\n    };\n\n    this._textChangeHandlers = {} as any;\n    for (const component of colorComponents) {\n      this._textChangeHandlers[component] = this._onTextChange.bind(this, component);\n    }\n    this._textLabels = {\n      r: props.redLabel,\n      g: props.greenLabel,\n      b: props.blueLabel,\n      a: props.alphaLabel,\n      hex: props.hexLabel\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IColorPickerProps): void {\n    const color = _getColorFromProps(newProps);\n    if (color) {\n      this._updateColor(undefined, color);\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const { theme, className, styles } = props;\n    const { color } = this.state;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className\n    });\n\n    return (\n      <div className={classNames.root}>\n        <div className={classNames.panel}>\n          <ColorRectangle color={color} onChange={this._onSVChanged} className={classNames.colorRectangle} />\n          <div className={classNames.flexContainer}>\n            <div className={classNames.flexSlider}>\n              <ColorSlider className=\"is-hue\" minValue={0} maxValue={MAX_COLOR_HUE} value={color.h} onChange={this._onHChanged} />\n              {!props.alphaSliderHidden && (\n                <ColorSlider\n                  className=\"is-alpha\"\n                  isAlpha\n                  overlayStyle={{ background: `linear-gradient(to right, transparent 0, #${color.hex} 100%)` }}\n                  minValue={0}\n                  maxValue={MAX_COLOR_ALPHA}\n                  value={color.a}\n                  onChange={this._onAChanged}\n                />\n              )}\n            </div>\n            {props.showPreview && (\n              <div className={classNames.flexPreviewBox}>\n                <div\n                  className={classNames.colorSquare + ' is-preview'}\n                  style={{\n                    backgroundColor: color.str\n                  }}\n                />\n              </div>\n            )}\n          </div>\n\n          <table className={classNames.table} cellPadding=\"0\" cellSpacing=\"0\">\n            <thead>\n              <tr className={classNames.tableHeader}>\n                <td className={classNames.tableHexCell}>{props.hexLabel}</td>\n                <td>{props.redLabel}</td>\n                <td>{props.greenLabel}</td>\n                <td>{props.blueLabel}</td>\n                {!props.alphaSliderHidden && <td>{props.alphaLabel}</td>}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {...colorComponents.map((comp: keyof IRGBHex) => {\n                  if (comp === 'a' && props.alphaSliderHidden) {\n                    return null;\n                  }\n                  return (\n                    <td key={comp} style={comp === 'hex' ? undefined : { width: '18%' }}>\n                      <TextField\n                        className={classNames.input}\n                        onChange={this._textChangeHandlers[comp]}\n                        onBlur={this._onBlur}\n                        value={this._getDisplayValue(comp)}\n                        spellCheck={false}\n                        ariaLabel={this._textLabels[comp]}\n                      />\n                    </td>\n                  );\n                })}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private _getDisplayValue(component: keyof IColor): string {\n    const { color, editingColor } = this.state;\n    if (editingColor && editingColor.component === component) {\n      return editingColor.value;\n    }\n    if (component === 'hex') {\n      return color[component] || '';\n    } else if (typeof color[component] === 'number' && !isNaN(color[component] as number)) {\n      return String(color[component]);\n    }\n    return '';\n  }\n\n  private _onSVChanged = (ev: React.MouseEvent<HTMLElement>, color: IColor): void => {\n    this._updateColor(ev, color);\n  };\n\n  private _onHChanged = (ev: React.MouseEvent<HTMLElement>, h: number): void => {\n    this._updateColor(ev, updateH(this.state.color, h));\n  };\n\n  private _onAChanged = (ev: React.MouseEvent<HTMLElement>, a: number): void => {\n    this._updateColor(ev, updateA(this.state.color, Math.round(a)));\n  };\n\n  private _onTextChange(component: keyof IRGBHex, event: React.FormEvent<HTMLInputElement>, newValue?: string): void {\n    const color = this.state.color;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    newValue = (newValue || '').substr(0, isHex ? MAX_HEX_LENGTH : MAX_RGBA_LENGTH);\n\n    // Ignore what the user typed if it contains invalid characters\n    const validCharsRegex = isHex ? HEX_REGEX : RGBA_REGEX;\n    if (!validCharsRegex.test(newValue)) {\n      return;\n    }\n\n    // Determine if the entry is valid (different methods for hex, alpha, and RGB)\n    let isValid: boolean;\n    if (newValue === '') {\n      // Empty string is obviously not valid\n      isValid = false;\n    } else if (isHex) {\n      // Technically hex values of length 3 are also valid, but committing the value here would\n      // cause it to be automatically converted to a value of length 6, which may not be what the\n      // user wanted if they're not finished typing. (Values of length 3 will be committed on blur.)\n      isValid = newValue.length === MAX_HEX_LENGTH;\n    } else if (isAlpha) {\n      isValid = Number(newValue) <= MAX_COLOR_ALPHA;\n    } else {\n      isValid = Number(newValue) <= MAX_COLOR_RGB;\n    }\n\n    if (!isValid) {\n      // If the new value is an empty string or other invalid value, save that to display.\n      // (if the user still hasn't entered anything on blur, the last value is restored)\n      this.setState({ editingColor: { component, value: newValue } });\n    } else if (String(color[component]) === newValue) {\n      // If the new value is the same as the current value, mostly ignore it.\n      // Exception is that if the user was previously editing the value (but hadn't yet entered\n      // a new valid value), we should clear the intermediate value.\n      if (this.state.editingColor) {\n        this.setState({ editingColor: undefined });\n      }\n    } else {\n      // Should be a valid color. Update the value.\n      const newColor = isHex\n        ? getColorFromString('#' + newValue)\n        : getColorFromRGBA({\n            ...color,\n            // Overwrite whichever key is being updated with the new value\n            [component]: Number(newValue)\n          });\n      this._updateColor(event, newColor);\n    }\n  }\n\n  private _onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const { color, editingColor } = this.state;\n    if (!editingColor) {\n      return;\n    }\n\n    // If there was an intermediate incorrect value (such as too large or empty), correct it.\n    const { value, component } = editingColor;\n    const isHex = component === 'hex';\n    const minLength = isHex ? MIN_HEX_LENGTH : MIN_RGBA_LENGTH;\n    if (value.length >= minLength && (isHex || !isNaN(Number(value)))) {\n      // Real value. Clamp to appropriate length (hex) or range (rgba).\n      let newColor: IColor | undefined;\n      if (isHex) {\n        newColor = getColorFromString('#' + correctHex(value));\n      } else {\n        newColor = getColorFromRGBA(\n          correctRGB({\n            ...color,\n            [component]: Number(value)\n          } as IRGB)\n        );\n      }\n\n      // Update state and call onChange\n      this._updateColor(event, newColor);\n    } else {\n      // Intermediate value was an empty string, too short (hex only), or just . (alpha only).\n      // Just clear the intermediate state and revert to the previous value.\n      this.setState({ editingColor: undefined });\n    }\n  };\n\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n  private _updateColor(ev: React.SyntheticEvent<HTMLElement> | undefined, newColor: IColor | undefined): void {\n    if (!newColor) {\n      return;\n    }\n\n    const { color, editingColor } = this.state;\n    const isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n\n    if (isDifferentColor || editingColor) {\n      this.setState({ color: newColor, editingColor: undefined }, () => {\n        if (ev && this.props.onChange) {\n          this.props.onChange(ev, newColor);\n        }\n      });\n    }\n  }\n}\n\nfunction _getColorFromProps(props: IColorPickerProps): IColor | undefined {\n  const { color } = props;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}\n"]}