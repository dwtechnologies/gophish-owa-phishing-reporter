{"version":3,"file":"withViewport.js","sourceRoot":"../src/","sources":["utilities/decorators/withViewport.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not to use ResizeObserver (if available) to detect\n   * and measure viewport on 'resize' events.\n   *\n   * Falls back to window 'resize' event.\n   *\n   * @defaultValue false\n   */\n  skipViewportMeasures?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n\n    constructor(props: TProps) {\n      super(props);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0\n        }\n      };\n    }\n\n    public componentDidMount(): void {\n      const { skipViewportMeasures } = this.props as IWithViewportProps;\n      const win = getWindow();\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false\n      });\n\n      // ResizeObserver seems always fire even window is not resized. This is\n      // particularly bad when skipViewportMeasures is set when optimizing fixed layout lists.\n      // It will measure and update and re-render the entire list after list is fully rendered.\n      // So fallback to listen to resize event when skipViewportMeasures is set.\n      if (!skipViewportMeasures && this._isResizeObserverAvailable()) {\n        this._registerResizeObserver();\n      } else {\n        this._events.on(win, 'resize', this._onAsyncResize);\n      }\n\n      if (!skipViewportMeasures) {\n        this._updateViewport();\n      }\n    }\n\n    public componentDidUpdate(newProps: TProps) {\n      const { skipViewportMeasures: oldSkipViewportMeasures } = this.props as IWithViewportProps;\n      const { skipViewportMeasures: newSkipViewportMeasures } = newProps as IWithViewportProps;\n      const win = getWindow();\n\n      if (oldSkipViewportMeasures !== newSkipViewportMeasures) {\n        if (newSkipViewportMeasures) {\n          this._unregisterResizeObserver();\n          this._events.on(win, 'resize', this._onAsyncResize);\n        } else if (!newSkipViewportMeasures && this._isResizeObserverAvailable()) {\n          this._events.off(win, 'resize', this._onAsyncResize);\n          this._registerResizeObserver();\n        }\n      }\n\n      if (!!newSkipViewportMeasures) {\n        this._updateViewport();\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n      }\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...this.props as any} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow();\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow();\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        this._viewportResizeObserver = null;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement);\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged = (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height\n            }\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          }\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n"]}