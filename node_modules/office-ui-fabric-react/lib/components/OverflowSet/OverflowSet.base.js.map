{"version":3,"file":"OverflowSet.base.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowSet.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { IKeytipProps } from '../../Keytip';\nimport { BaseComponent, classNamesFunction, divProperties, elementContains, focusFirstChild, getNativeProps } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { IOverflowSet, IOverflowSetItemProps, IOverflowSetProps, IOverflowSetStyles, IOverflowSetStyleProps } from './OverflowSet.types';\n\nconst getClassNames = classNamesFunction<IOverflowSetStyleProps, IOverflowSetStyles>();\n\nexport class OverflowSetBase extends BaseComponent<IOverflowSetProps, {}> implements IOverflowSet {\n  public static defaultProps: Pick<IOverflowSetProps, 'vertical' | 'role'> = {\n    vertical: false,\n    role: 'menubar'\n  };\n\n  private _focusZone = React.createRef<IFocusZone>();\n  private _persistedKeytips: { [uniqueID: string]: IKeytipProps } = {};\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\n  private _divContainer = React.createRef<HTMLDivElement>();\n  private _classNames: IProcessedStyleSet<IOverflowSetStyles>;\n\n  constructor(props: IOverflowSetProps) {\n    super(props);\n\n    if (props.doNotContainWithinFocusZone) {\n      this._warnMutuallyExclusive({\n        doNotContainWithinFocusZone: 'focusZoneProps'\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const { items, overflowItems, className, focusZoneProps, styles, vertical, role, doNotContainWithinFocusZone } = this.props;\n\n    this._classNames = getClassNames(styles, { className, vertical });\n\n    let Tag;\n    let uniqueComponentProps;\n\n    if (doNotContainWithinFocusZone) {\n      Tag = 'div';\n      uniqueComponentProps = {\n        ...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties),\n        ref: this._divContainer\n      };\n    } else {\n      Tag = FocusZone;\n      uniqueComponentProps = {\n        ...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties),\n        ...focusZoneProps,\n        componentRef: this._focusZone,\n        direction: vertical ? FocusZoneDirection.vertical : FocusZoneDirection.horizontal\n      };\n    }\n\n    return (\n      <Tag {...uniqueComponentProps} className={this._classNames.root} role={role}>\n        {items && this._onRenderItems(items)}\n        {overflowItems && overflowItems.length > 0 && this._onRenderOverflowButtonWrapper(overflowItems)}\n      </Tag>\n    );\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the OverflowSet.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element,\n   * even if focus is already in theOverflowSet\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focus(forceIntoFirstElement?: boolean): boolean {\n    let focusSucceeded = false;\n\n    if (this.props.doNotContainWithinFocusZone) {\n      if (this._divContainer.current) {\n        focusSucceeded = focusFirstChild(this._divContainer.current);\n      }\n    } else if (this._focusZone.current) {\n      focusSucceeded = this._focusZone.current.focus(forceIntoFirstElement);\n    }\n\n    return focusSucceeded;\n  }\n\n  /**\n   * Sets focus to a specific child element within the OverflowSet.\n   * @param childElement - The child element within the zone to focus.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focusElement(childElement?: HTMLElement): boolean {\n    let focusSucceeded = false;\n\n    if (!childElement) {\n      return false;\n    }\n\n    if (this.props.doNotContainWithinFocusZone) {\n      if (this._divContainer.current && elementContains(this._divContainer.current, childElement)) {\n        childElement.focus();\n        focusSucceeded = document.activeElement === childElement;\n      }\n    } else if (this._focusZone.current) {\n      focusSucceeded = this._focusZone.current.focusElement(childElement);\n    }\n\n    return focusSucceeded;\n  }\n\n  // Add keytip register/unregister handlers to lifecycle functions to correctly manage persisted keytips\n  public componentDidMount() {\n    this._registerPersistedKeytips();\n  }\n\n  public componentWillUnmount() {\n    this._unregisterPersistedKeytips();\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillUpdate() {\n    this._unregisterPersistedKeytips();\n  }\n\n  public componentDidUpdate() {\n    this._registerPersistedKeytips();\n  }\n\n  private _registerPersistedKeytips() {\n    Object.keys(this._persistedKeytips).forEach((key: string) => {\n      const keytip = this._persistedKeytips[key];\n      const uniqueID = this._keytipManager.register(keytip, true);\n      // Update map\n      this._persistedKeytips[uniqueID] = keytip;\n      delete this._persistedKeytips[key];\n    });\n  }\n\n  private _unregisterPersistedKeytips() {\n    // Delete all persisted keytips saved\n    Object.keys(this._persistedKeytips).forEach((uniqueID: string) => {\n      this._keytipManager.unregister(this._persistedKeytips[uniqueID], uniqueID, true);\n    });\n    this._persistedKeytips = {};\n  }\n\n  private _onRenderItems = (items: IOverflowSetItemProps[]): JSX.Element[] => {\n    return items.map((item, i) => {\n      const wrapperDivProps: React.HTMLProps<HTMLDivElement> = {\n        className: this._classNames.item\n      };\n      return (\n        <div key={item.key} {...wrapperDivProps}>\n          {this.props.onRenderItem(item)}\n        </div>\n      );\n    });\n  };\n\n  private _onRenderOverflowButtonWrapper = (items: any[]): JSX.Element => {\n    const wrapperDivProps: React.HTMLProps<HTMLDivElement> = {\n      className: this._classNames.overflowButton\n    };\n\n    const overflowKeytipSequences = this.props.keytipSequences;\n    let newOverflowItems: any[] = [];\n\n    if (overflowKeytipSequences) {\n      items.forEach(overflowItem => {\n        const keytip = (overflowItem as IOverflowSetItemProps).keytipProps;\n        if (keytip) {\n          // Create persisted keytip\n          const persistedKeytip: IKeytipProps = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n            hasDynamicChildren: keytip.hasDynamicChildren,\n            hasMenu: keytip.hasMenu\n          };\n\n          if (keytip.hasDynamicChildren || this._getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = this._keytipManager.menuExecute.bind(\n              this._keytipManager,\n              overflowKeytipSequences,\n              overflowItem.keytipProps.keySequences\n            );\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          // Add this persisted keytip to our internal list, use a temporary uniqueID (its content)\n          // uniqueID will get updated on register\n          this._persistedKeytips[persistedKeytip.content] = persistedKeytip;\n\n          // Add the overflow sequence to this item\n          const newOverflowItem = {\n            ...overflowItem,\n            keytipProps: {\n              ...keytip,\n              overflowSetSequence: overflowKeytipSequences\n            }\n          };\n          newOverflowItems.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          newOverflowItems.push(overflowItem);\n        }\n      });\n    } else {\n      newOverflowItems = items;\n    }\n    return <div {...wrapperDivProps}>{this.props.onRenderOverflowButton(newOverflowItems)}</div>;\n  };\n\n  /**\n   * Gets the subMenu for an overflow item\n   * Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n   */\n  private _getSubMenuForItem(item: any): any[] | undefined {\n    if (this.props.itemSubMenuProvider) {\n      return this.props.itemSubMenuProvider(item);\n    }\n    if (item.subMenuProps) {\n      return item.subMenuProps.items;\n    }\n    return undefined;\n  }\n}\n"]}