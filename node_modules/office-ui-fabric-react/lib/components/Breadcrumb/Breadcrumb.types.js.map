{"version":3,"file":"Breadcrumb.types.js","sourceRoot":"../src/","sources":["components/Breadcrumb/Breadcrumb.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IIconProps } from '../../Icon';\nimport { IRefObject, IRenderFunction, IComponentAs, IStyleFunctionOrObject } from '../../Utilities';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IFocusZoneProps } from '../../FocusZone';\nimport { ITooltipHostProps } from '../../Tooltip';\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumbData {\n  props: IBreadcrumbProps;\n  renderedItems: IBreadcrumbItem[];\n  renderedOverflowItems: IBreadcrumbItem[];\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumb {\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  focus(): void;\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumbProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the IBreadcrumb interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IBreadcrumb>;\n\n  /**\n   * Collection of breadcrumbs to render\n   */\n  items: IBreadcrumbItem[];\n\n  /**\n   * Optional root classname for the root breadcrumb element.\n   */\n  className?: string;\n\n  /**\n   * Render a custom divider in place of the default chevron `>`\n   */\n  dividerAs?: IComponentAs<IDividerAsProps>;\n\n  /**\n   * The maximum number of breadcrumbs to display before coalescing.\n   * If not specified, all breadcrumbs will be rendered.\n   */\n  maxDisplayedItems?: number;\n\n  /** Method to call when trying to render an item. */\n\n  onRenderItem?: IRenderFunction<IBreadcrumbItem>;\n\n  /**\n   * Method to call when reducing the length of the breadcrumb.\n   * Return undefined to never reduce breadcrumb length\n   */\n  onReduceData?: (data: IBreadcrumbData) => IBreadcrumbData | undefined;\n\n  /**\n   * Aria label to place on the navigation landmark for breadcrumb\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional name to use for aria label on overflow button.\n   */\n  overflowAriaLabel?: string;\n\n  /**\n   * Optional index where overflow items will be collapsed. Defaults to 0.\n   */\n  overflowIndex?: number;\n\n  styles?: IStyleFunctionOrObject<IBreadcrumbStyleProps, IBreadcrumbStyles>;\n  theme?: ITheme;\n\n  /**\n   * Focuszone props that will get passed through to the root focus zone.\n   */\n  focusZoneProps?: IFocusZoneProps;\n\n  /**\n   * TooltipHost props that will get passed through to overflow tooltips.\n   */\n  tooltipHostProps?: ITooltipHostProps;\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumbItem {\n  /**\n   * Text to display to the user for the breadcrumb\n   */\n  text: string;\n\n  /**\n   * Arbitrary unique string associated with the breadcrumb\n   */\n  key: string;\n\n  /**\n   * Callback issued when the breadcrumb is selected.\n   */\n  onClick?: (ev?: React.MouseEvent<HTMLElement>, item?: IBreadcrumbItem) => void;\n\n  /**\n   * Url to navigate to when this breadcrumb is clicked.\n   */\n  href?: string;\n\n  /**\n   * If this breadcrumb item is the item the user is currently on, if set to true, aria-current=\"page\" will be applied to this\n   * breadcrumb link\n   */\n  isCurrentItem?: boolean;\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IDividerAsProps extends IIconProps {\n  /**\n   * Optional breadcrumb item corresponds to left of the divider to be passed for custom rendering.\n   * For overflowed items, it will be last item in the list\n   */\n  item?: IBreadcrumbItem;\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumbStyleProps {\n  className?: string;\n  theme: ITheme;\n}\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport interface IBreadcrumbStyles {\n  root: IStyle;\n  list: IStyle;\n  listItem: IStyle;\n  chevron: IStyle;\n  overflow: IStyle;\n  overflowButton: IStyle;\n  itemLink: IStyle;\n  item: IStyle;\n}\n"]}