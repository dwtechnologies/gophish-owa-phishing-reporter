{"version":3,"file":"DocumentCardPreview.base.js","sourceRoot":"../src/","sources":["components/DocumentCard/DocumentCardPreview.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Icon } from '../../Icon';\nimport { Image } from '../../Image';\nimport { Link } from '../../Link';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { BaseComponent, classNamesFunction, css } from '../../Utilities';\nimport {\n  IDocumentCardPreviewImage,\n  IDocumentCardPreviewProps,\n  IDocumentCardPreviewStyleProps,\n  IDocumentCardPreviewStyles\n} from './DocumentCardPreview.types';\n\nconst LIST_ITEM_COUNT = 3;\nconst getClassNames = classNamesFunction<IDocumentCardPreviewStyleProps, IDocumentCardPreviewStyles>();\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardPreviewBase extends BaseComponent<IDocumentCardPreviewProps, any> {\n  private _classNames: IProcessedStyleSet<IDocumentCardPreviewStyles>;\n\n  public render(): JSX.Element {\n    const { previewImages, styles, theme, className } = this.props;\n    let style, preview;\n    const isFileList = previewImages.length > 1;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isFileList\n    });\n\n    if (previewImages.length > 1) {\n      // Render a list of files\n      preview = this._renderPreviewList(previewImages);\n    } else if (previewImages.length === 1) {\n      // Render a single preview\n      preview = this._renderPreviewImage(previewImages[0]);\n\n      // Override the border color if an accent color was provided\n      if (previewImages[0].accentColor) {\n        style = {\n          borderBottomColor: previewImages[0].accentColor\n        };\n      }\n    }\n\n    return (\n      <div className={this._classNames.root} style={style}>\n        {preview}\n      </div>\n    );\n  }\n\n  private _renderPreviewImage(previewImage: IDocumentCardPreviewImage): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> {\n    const { width, height, imageFit, previewIconProps, previewIconContainerClass } = previewImage;\n\n    if (previewIconProps) {\n      return (\n        <div className={css(this._classNames.previewIcon, previewIconContainerClass)} style={{ width: width, height: height }}>\n          <Icon {...previewIconProps} />\n        </div>\n      );\n    }\n\n    const image = <Image width={width} height={height} imageFit={imageFit} src={previewImage.previewImageSrc} role=\"presentation\" alt=\"\" />;\n\n    let icon;\n    if (previewImage.iconSrc) {\n      icon = <Image className={this._classNames.icon} src={previewImage.iconSrc} role=\"presentation\" alt=\"\" />;\n    }\n\n    return (\n      <div>\n        {image}\n        {icon}\n      </div>\n    );\n  }\n\n  private _renderPreviewList = (previewImages: IDocumentCardPreviewImage[]): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> => {\n    const { getOverflowDocumentCountText } = this.props;\n\n    // Determine how many documents we won't be showing\n    const overflowDocumentCount = previewImages.length - LIST_ITEM_COUNT;\n\n    // Determine the overflow text that will be rendered after the preview list.\n    const overflowText = overflowDocumentCount\n      ? getOverflowDocumentCountText\n        ? getOverflowDocumentCountText(overflowDocumentCount)\n        : '+' + overflowDocumentCount\n      : null;\n\n    // Create list items for the documents to be shown\n    const fileListItems = previewImages.slice(0, LIST_ITEM_COUNT).map((file, fileIndex) => (\n      <li key={fileIndex}>\n        <Image className={this._classNames.fileListIcon} src={file.iconSrc} role=\"presentation\" alt=\"\" width=\"16px\" height=\"16px\" />\n        <Link {...(file.linkProps, { href: file.url || (file.linkProps && file.linkProps.href) })}>{file.name}</Link>\n      </li>\n    ));\n\n    return (\n      <div>\n        <ul className={this._classNames.fileList}>{fileListItems}</ul>\n        {overflowText && <span className={this._classNames.fileListOverflowText}>{overflowText}</span>}\n      </div>\n    );\n  };\n}\n"]}