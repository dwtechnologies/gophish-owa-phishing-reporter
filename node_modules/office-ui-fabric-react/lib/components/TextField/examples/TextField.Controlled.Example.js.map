{"version":3,"file":"TextField.Controlled.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.Controlled.Example.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,MAAM,sCAAsC,CAAC;AACjE,OAAO,EAAE,KAAK,EAAE,MAAM,kCAAkC,CAAC;AAOzD;IAAgD,sDAAqD;IAArG;QAAA,qEAwCC;QAvCQ,WAAK,GAAqC,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;QAsBpE,gBAAU,GAAG,UAAC,EAAqC,EAAE,QAAiB;YAC5E,KAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,QAAQ,IAAI,EAAE,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC;QAEM,gBAAU,GAAG,UAAC,EAAqC,EAAE,QAAiB;YAC5E,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;gBACrC,KAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,QAAQ,IAAI,EAAE,EAAE,CAAC,CAAC;aAC3C;iBAAM;gBACL,6FAA6F;gBAC7F,kFAAkF;gBAClF,4FAA4F;gBAC5F,6FAA6F;gBAC7F,kFAAkF;gBAClF,+DAA+D;gBAC/D,KAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,KAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC;;IACJ,CAAC;IArCQ,2CAAM,GAAb;QACE,OAAO,CACL,oBAAC,KAAK,IAAC,MAAM,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE;YAChC,oBAAC,SAAS,IACR,KAAK,EAAC,4BAA4B,EAClC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EACxB,QAAQ,EAAE,IAAI,CAAC,UAAU,EACzB,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,GACtC;YAEF,oBAAC,SAAS,IACR,KAAK,EAAC,oDAAoD,EAC1D,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EACxB,QAAQ,EAAE,IAAI,CAAC,UAAU,EACzB,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,GACtC,CACI,CACT,CAAC;IACJ,CAAC;IAmBH,iCAAC;AAAD,CAAC,AAxCD,CAAgD,KAAK,CAAC,SAAS,GAwC9D","sourcesContent":["import * as React from 'react';\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport { Stack } from 'office-ui-fabric-react/lib/Stack';\n\nexport interface ITextFieldControlledExampleState {\n  value1: string;\n  value2: string;\n}\n\nexport class TextFieldControlledExample extends React.Component<{}, ITextFieldControlledExampleState> {\n  public state: ITextFieldControlledExampleState = { value1: '', value2: '' };\n\n  public render() {\n    return (\n      <Stack tokens={{ childrenGap: 15 }}>\n        <TextField\n          label=\"Basic controlled TextField\"\n          value={this.state.value1}\n          onChange={this._onChange1}\n          styles={{ fieldGroup: { width: 300 } }}\n        />\n\n        <TextField\n          label=\"Controlled TextField limiting length of value to 5\"\n          value={this.state.value2}\n          onChange={this._onChange2}\n          styles={{ fieldGroup: { width: 100 } }}\n        />\n      </Stack>\n    );\n  }\n\n  private _onChange1 = (ev: React.FormEvent<HTMLInputElement>, newValue?: string) => {\n    this.setState({ value1: newValue || '' });\n  };\n\n  private _onChange2 = (ev: React.FormEvent<HTMLInputElement>, newValue?: string) => {\n    if (!newValue || newValue.length <= 5) {\n      this.setState({ value2: newValue || '' });\n    } else {\n      // This block should NOT be necessary, but there's currently a bug (#1350) where a controlled\n      // TextField will continue to accept input even if its `value` prop isn't updated.\n      // (The correct behavior is that the displayed value should *always* match the `value` prop.\n      // If the `value` prop isn't updated in response to user input, the input should be ignored.)\n      // Because this is a large behavior change, the bug won't be fixed until Fabric 7.\n      // As a workaround, force re-rendering with the existing value.\n      this.setState({ value2: this.state.value2 });\n    }\n  };\n}\n"]}