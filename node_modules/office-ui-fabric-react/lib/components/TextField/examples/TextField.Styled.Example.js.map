{"version":3,"file":"TextField.Styled.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.Styled.Example.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAA0C,SAAS,EAAE,MAAM,sCAAsC,CAAC;AAEzG,OAAO,EAAE,IAAI,EAAE,MAAM,iCAAiC,CAAC;AACvD,OAAO,EAAE,KAAK,EAAE,MAAM,kCAAkC,CAAC;AACzD,OAAO,iCAAiC,CAAC;AAEzC,MAAM,CAAC,IAAM,sBAAsB,GAA6B;IAC9D,OAAO,CACL,oBAAC,KAAK,IAAC,MAAM,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE;QAChC,oBAAC,IAAI,IAAC,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,ySAIlC;QACP,oBAAC,SAAS,IAAC,KAAK,EAAC,2CAA2C,EAAC,QAAQ,QAAC,MAAM,EAAE,SAAS,GAAI;QAC3F,oBAAC,SAAS,IAAC,KAAK,EAAC,4CAA4C,EAAC,QAAQ,QAAC,SAAS,EAAC,qBAAqB,GAAG,CACnG,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,SAAS,SAAS,CAAC,KAA2B;IACpC,IAAA,yBAAQ,CAAW;IAC3B,OAAO;QACL,UAAU,EAAE;YACV,EAAE,KAAK,EAAE,GAAG,EAAE;YACd,QAAQ,IAAI;gBACV,cAAc,EAAE,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS;aACrD;SACF;QACD,kBAAkB,EAAE;YAClB,KAAK,EAAE,cAAc;SACtB;KACF,CAAC;AACJ,CAAC;AAED,SAAS,cAAc,CAAC,KAAuB;IACrC,IAAA,yBAAQ,CAAW;IAC3B,OAAO;QACL,IAAI,EAAE;YACJ,QAAQ,IAAI;gBACV,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY;aACxC;SACF;KACF,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;EAkBE","sourcesContent":["import * as React from 'react';\nimport { ITextFieldStyleProps, ITextFieldStyles, TextField } from 'office-ui-fabric-react/lib/TextField';\nimport { ILabelStyles, ILabelStyleProps } from 'office-ui-fabric-react/lib/Label';\nimport { Text } from 'office-ui-fabric-react/lib/Text';\nimport { Stack } from 'office-ui-fabric-react/lib/Stack';\nimport './TextField.Styled.Example.scss';\n\nexport const TextFieldStyledExample: React.StatelessComponent = () => {\n  return (\n    <Stack tokens={{ childrenGap: 15 }}>\n      <Text styles={{ root: { maxWidth: 600 } }}>\n        These examples show how components that used to be styled using CSS can be styled using JS styling. The preferred method is JS\n        styling for several reasons: type safety for styling, more predictable behavior, and clear feedback via typing when component\n        changes affect existing styling code.\n      </Text>\n      <TextField label=\"Theme Primary Label, Red Top Border (JS):\" required styles={getStyles} />\n      <TextField label=\"Theme Primary Label, Red Top Border (CSS):\" required className=\"textField-cssStyled\" />\n    </Stack>\n  );\n};\n\nfunction getStyles(props: ITextFieldStyleProps): Partial<ITextFieldStyles> {\n  const { required } = props;\n  return {\n    fieldGroup: [\n      { width: 300 },\n      required && {\n        borderTopColor: props.theme.semanticColors.errorText\n      }\n    ],\n    subComponentStyles: {\n      label: getLabelStyles\n    }\n  };\n}\n\nfunction getLabelStyles(props: ILabelStyleProps): ILabelStyles {\n  const { required } = props;\n  return {\n    root: [\n      required && {\n        color: props.theme.palette.themePrimary\n      }\n    ]\n  };\n}\n\n/*\nThis is the SCSS used in the CSS styling example.\nIf exporting to CodePen, paste this into the CSS section.\n-------------------------------------------------------------------------------------------\n// In the real SCSS, these variables are defined elsewhere and adjusted based on the theme.\n// The values provided below are from the default theme.\n$errorTextColor: #a80000;\n$ms-color-themePrimary: #0078d4;\n\n.textField-cssStyled {\n  .ms-TextField-fieldGroup {\n    width: 300px;\n    border-top-color: $errorTextColor;\n  }\n  .ms-Label {\n    color: $ms-color-themePrimary;\n  }\n}\n*/\n"]}