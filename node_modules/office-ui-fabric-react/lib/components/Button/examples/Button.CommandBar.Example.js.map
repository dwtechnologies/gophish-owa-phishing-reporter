{"version":3,"file":"Button.CommandBar.Example.js","sourceRoot":"../src/","sources":["components/Button/examples/Button.CommandBar.Example.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,gBAAgB,EAAoC,KAAK,EAAgB,MAAM,wBAAwB,CAAC;AAQjH,IAAM,SAAS,GAAyB;IACtC,KAAK,EAAE;QACL;YACE,GAAG,EAAE,cAAc;YACnB,IAAI,EAAE,eAAe;YACrB,SAAS,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE;SAChC;QACD;YACE,GAAG,EAAE,eAAe;YACpB,IAAI,EAAE,gBAAgB;YACtB,SAAS,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE;SACpC;KACF;CACF,CAAC;AACF,IAAM,OAAO,GAAe,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;AAChD,IAAM,QAAQ,GAAe,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;AAClD,IAAM,WAAW,GAA0B,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;AAEpE,MAAM,CAAC,IAAM,uBAAuB,GAAiD,UAAA,KAAK;IAChF,IAAA,yBAAQ,EAAE,uBAAO,CAAW;IAEpC,iDAAiD;IACjD,sEAAsE;IACtE,OAAO,CACL,oBAAC,KAAK,IAAC,UAAU,QAAC,MAAM,EAAE,WAAW;QACnC,oBAAC,gBAAgB,IACf,SAAS,EAAE,OAAO,EAClB,IAAI,EAAC,UAAU;YACf,iFAAiF;YACjF,eAAe;YACf,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,OAAO,GAChB;QACF,oBAAC,gBAAgB,IAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAC,WAAW,EAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,GAAI,CAC1F,CACT,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { CommandBarButton, IContextualMenuProps, IIconProps, Stack, IStackStyles } from 'office-ui-fabric-react';\n\nexport interface IButtonExampleProps {\n  // These are set based on the toggles shown above the examples (not needed in real code)\n  disabled?: boolean;\n  checked?: boolean;\n}\n\nconst menuProps: IContextualMenuProps = {\n  items: [\n    {\n      key: 'emailMessage',\n      text: 'Email message',\n      iconProps: { iconName: 'Mail' }\n    },\n    {\n      key: 'calendarEvent',\n      text: 'Calendar event',\n      iconProps: { iconName: 'Calendar' }\n    }\n  ]\n};\nconst addIcon: IIconProps = { iconName: 'Add' };\nconst mailIcon: IIconProps = { iconName: 'Mail' };\nconst stackStyles: Partial<IStackStyles> = { root: { height: 44 } };\n\nexport const ButtonCommandBarExample: React.FunctionComponent<IButtonExampleProps> = props => {\n  const { disabled, checked } = props;\n\n  // Here we use a Stack to simulate a command bar.\n  // The real CommandBar control also uses CommandBarButtons internally.\n  return (\n    <Stack horizontal styles={stackStyles}>\n      <CommandBarButton\n        iconProps={addIcon}\n        text=\"New item\"\n        // Set split=true to render a SplitButton instead of a regular button with a menu\n        // split={true}\n        menuProps={menuProps}\n        disabled={disabled}\n        checked={checked}\n      />\n      <CommandBarButton iconProps={mailIcon} text=\"Send mail\" disabled={disabled} checked={checked} />\n    </Stack>\n  );\n};\n"]}