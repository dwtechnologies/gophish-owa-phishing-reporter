{"version":3,"file":"Tooltip.types.js","sourceRoot":"../src/","sources":["components/Tooltip/Tooltip.types.ts"],"names":[],"mappings":"AAgFA;;GAEG;AACH,MAAM,CAAN,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,+CAAQ,CAAA;IACR,mDAAU,CAAA;IACV,+CAAQ,CAAA;AACV,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB","sourcesContent":["import * as React from 'react';\nimport { TooltipBase } from './Tooltip.base';\nimport { ICalloutProps } from '../../Callout';\nimport { IRenderFunction } from '../../Utilities';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltip {}\n\n/**\n * Tooltip component props.\n * {@docCategory Tooltip}\n */\nexport interface ITooltipProps extends React.HTMLAttributes<HTMLDivElement | TooltipBase> {\n  /**\n   * Optional callback to access the ITooltip interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITooltip>;\n\n  /**\n   * Properties to pass through for Callout, reference detail properties in ICalloutProps\n   * @defaultvalue isBeakVisible: true, beakWidth: 16, gapSpace: 0, setInitialFocus: true, doNotLayer: false\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   *  Content to be passed to the tooltip\n   */\n  content?: string | JSX.Element | JSX.Element[];\n\n  /**\n   *  Render function to populate content area\n   */\n  onRenderContent?: IRenderFunction<ITooltipProps>;\n\n  /**\n   * Length of delay. Can be set to zero if you do not want a delay.\n   * @defaultvalue medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Max width of tooltip\n   * @defaultvalue 364px\n   */\n  maxWidth?: string | null;\n\n  /**\n   * Element to anchor the Tooltip to.\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * Indicator of how the tooltip should be anchored to its targetElement.\n   * @defaultvalue DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used instead\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Theme to apply to the component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles>;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport enum TooltipDelay {\n  zero = 0,\n  medium = 1,\n  long = 2\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipStyleProps {\n  /**\n   * Accept theme prop.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n\n  /**\n   * Delay before tooltip appears.\n   * @deprecated Delay logic moved to TooltipHost vs relying on animation delay.\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Maximum width of tooltip.\n   */\n  maxWidth?: string;\n\n  /**\n   * The gap between the Callout and the target\n   * @defaultvalue 0\n   */\n  gapSpace?: number;\n\n  /**\n   * The width of the Callout's beak\n   * @defaultvalue 16\n   */\n  beakWidth?: number;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n\n  /**\n   * Style for the content element.\n   */\n  content: IStyle;\n\n  /**\n   * Style for the subtext element.\n   */\n  subText: IStyle;\n}\n"]}