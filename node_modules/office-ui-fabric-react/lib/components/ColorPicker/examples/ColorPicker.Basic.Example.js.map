{"version":3,"file":"ColorPicker.Basic.Example.js","sourceRoot":"../src/","sources":["components/ColorPicker/examples/ColorPicker.Basic.Example.tsx"],"names":[],"mappings":";;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,kBAAkB,EAA8B,OAAO,EAAE,MAAM,kCAAkC,CAAC;AAChI,OAAO,EAAE,cAAc,EAAE,oBAAoB,EAAE,MAAM,oCAAoC,CAAC;AAE1F,IAAM,UAAU,GAAG,cAAc,CAAC;IAChC,OAAO,EAAE;QACP,OAAO,EAAE,MAAM;KAChB;IACD,OAAO,EAAE;QACP,UAAU,EAAE,EAAE;KACf;IACD,WAAW,EAAE;QACX,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;QACX,MAAM,EAAE,QAAQ;QAChB,MAAM,EAAE,mBAAmB;QAC3B,SAAS;YACP,GAAC,oBAAoB,IAAG;gBACtB,oBAAoB,EAAE,MAAM;aAC7B;eACF;KACF;CACF,CAAC,CAAC;AAEH,IAAM,iBAAiB,GAAgC;IACrD,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACtB,IAAI,EAAE;QACJ,QAAQ,EAAE,GAAG;QACb,QAAQ,EAAE,GAAG;KACd;IACD,cAAc,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE;CAChC,CAAC;AAQF;IAA6C,mDAAkD;IAA/F;QAAA,qEA2CC;QA1CQ,WAAK,GAAkC;YAC5C,KAAK,EAAE,kBAAkB,CAAC,SAAS,CAAE;YACrC,iBAAiB,EAAE,KAAK;YACxB,WAAW,EAAE,IAAI;SAClB,CAAC;QAsBM,kBAAY,GAAG,UAAC,EAAqC,EAAE,QAAgB;YAC7E,KAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;QACrC,CAAC,CAAC;QAEM,uBAAiB,GAAG,UAAC,EAAiC,EAAE,OAAiB;YAC/E,IAAI,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC;YAC7B,IAAI,OAAO,EAAE;gBACX,iEAAiE;gBACjE,KAAK,GAAG,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;aACxC;YACD,KAAI,CAAC,QAAQ,CAAC,EAAE,iBAAiB,EAAE,CAAC,CAAC,OAAO,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC;QAEM,4BAAsB,GAAG,UAAC,EAAiC,EAAE,OAAiB;YACpF,KAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC;;IACJ,CAAC;IApCQ,wCAAM,GAAb;QACQ,IAAA,eAAmE,EAAjE,gBAAK,EAAE,wCAAiB,EAAE,4BAAuC,CAAC;QAC1E,OAAO,CACL,6BAAK,SAAS,EAAE,UAAU,CAAC,OAAO;YAChC,oBAAC,WAAW,IACV,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,iBAAiB,EAAE,iBAAiB,EACpC,WAAW,EAAE,WAAW,EACxB,MAAM,EAAE,iBAAiB,GACzB;YAEF,6BAAK,SAAS,EAAE,UAAU,CAAC,OAAO;gBAChC,oBAAC,MAAM,IAAC,KAAK,EAAC,mBAAmB,EAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,EAAE,iBAAiB,GAAI;gBAClG,oBAAC,MAAM,IAAC,KAAK,EAAC,kBAAkB,EAAC,QAAQ,EAAE,IAAI,CAAC,sBAAsB,EAAE,OAAO,EAAE,WAAW,GAAI,CAC5F,CACF,CACP,CAAC;IACJ,CAAC;IAkBH,8BAAC;AAAD,CAAC,AA3CD,CAA6C,KAAK,CAAC,SAAS,GA2C3D","sourcesContent":["import * as React from 'react';\nimport { ColorPicker, Toggle, getColorFromString, IColor, IColorPickerStyles, updateA } from 'office-ui-fabric-react/lib/index';\nimport { mergeStyleSets, HighContrastSelector } from 'office-ui-fabric-react/lib/Styling';\n\nconst classNames = mergeStyleSets({\n  wrapper: {\n    display: 'flex'\n  },\n  column2: {\n    marginLeft: 10\n  },\n  colorSquare: {\n    width: 100,\n    height: 100,\n    margin: '16px 0',\n    border: '1px solid #c8c6c4',\n    selectors: {\n      [HighContrastSelector]: {\n        MsHighContrastAdjust: 'none'\n      }\n    }\n  }\n});\n\nconst colorPickerStyles: Partial<IColorPickerStyles> = {\n  panel: { padding: 12 },\n  root: {\n    maxWidth: 352,\n    minWidth: 352\n  },\n  colorRectangle: { height: 268 }\n};\n\nexport interface IBasicColorPickerExampleState {\n  color: IColor;\n  alphaSliderHidden: boolean;\n  showPreview: boolean;\n}\n\nexport class ColorPickerBasicExample extends React.Component<{}, IBasicColorPickerExampleState> {\n  public state: IBasicColorPickerExampleState = {\n    color: getColorFromString('#ffffff')!,\n    alphaSliderHidden: false,\n    showPreview: true\n  };\n\n  public render(): JSX.Element {\n    const { color, alphaSliderHidden, showPreview: showPreview } = this.state;\n    return (\n      <div className={classNames.wrapper}>\n        <ColorPicker\n          color={color}\n          onChange={this._updateColor}\n          alphaSliderHidden={alphaSliderHidden}\n          showPreview={showPreview}\n          styles={colorPickerStyles}\n        />\n\n        <div className={classNames.column2}>\n          <Toggle label=\"Hide alpha slider\" onChange={this._onHideAlphaClick} checked={alphaSliderHidden} />\n          <Toggle label=\"Show Preview Box\" onChange={this._onShowPreviewBoxClick} checked={showPreview} />\n        </div>\n      </div>\n    );\n  }\n\n  private _updateColor = (ev: React.SyntheticEvent<HTMLElement>, colorObj: IColor) => {\n    this.setState({ color: colorObj });\n  };\n\n  private _onHideAlphaClick = (ev: React.MouseEvent<HTMLElement>, checked?: boolean) => {\n    let color = this.state.color;\n    if (checked) {\n      // If hiding the alpha slider, remove transparency from the color\n      color = updateA(this.state.color, 100);\n    }\n    this.setState({ alphaSliderHidden: !!checked, color });\n  };\n\n  private _onShowPreviewBoxClick = (ev: React.MouseEvent<HTMLElement>, checked?: boolean) => {\n    this.setState({ showPreview: !!checked });\n  };\n}\n"]}