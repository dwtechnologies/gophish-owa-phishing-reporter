{"version":3,"file":"Dropdown.Error.Example.js","sourceRoot":"../src/","sources":["components/Dropdown/examples/Dropdown.Error.Example.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,qCAAqC,CAAC;AAC/D,OAAO,EAAgB,KAAK,EAAE,MAAM,kCAAkC,CAAC;AACvE,OAAO,EAAE,MAAM,EAAE,MAAM,mCAAmC,CAAC;AAM3D;IAA0C,gDAA+C;IAAzF;QAAA,qEAgCC;QA/BC,wFAAwF;QACjF,WAAK,GAA+B,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;QA2BxD,sBAAgB,GAAG,UAAC,KAAoC,EAAE,OAAiB;YACjF,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC;;IACJ,CAAC;IA5BQ,qCAAM,GAAb;QACU,IAAA,gCAAS,CAAgB;QAEjC,IAAM,WAAW,GAAiB,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;QAEtD,OAAO,CACL,oBAAC,KAAK,IAAC,UAAU,QAAC,MAAM,EAAE,WAAW,EAAE,aAAa,EAAC,OAAO;YAC1D,oBAAC,MAAM,IAAC,KAAK,EAAC,oBAAoB,EAAC,MAAM,EAAC,KAAK,EAAC,OAAO,EAAC,IAAI,EAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,GAAI;YACpH,oBAAC,QAAQ,IACP,WAAW,EAAC,kBAAkB,EAC9B,KAAK,EAAC,6BAA6B,EACnC,OAAO,EAAE;oBACP,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;oBAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;oBAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;oBAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;oBAC9B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE;iBAC/B,EACD,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC,SAAS,EAClE,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,GAC3D,CACI,CACT,CAAC;IACJ,CAAC;IAKH,2BAAC;AAAD,CAAC,AAhCD,CAA0C,KAAK,CAAC,SAAS,GAgCxD","sourcesContent":["import * as React from 'react';\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown';\nimport { IStackTokens, Stack } from 'office-ui-fabric-react/lib/Stack';\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\n\nexport interface IDropdownErrorExampleState {\n  showError: boolean;\n}\n\nexport class DropdownErrorExample extends React.Component<{}, IDropdownErrorExampleState> {\n  // Don't show the error message by default because it's annoying to screen reader users.\n  public state: IDropdownErrorExampleState = { showError: false };\n\n  public render() {\n    const { showError } = this.state;\n\n    const stackTokens: IStackTokens = { childrenGap: 30 };\n\n    return (\n      <Stack horizontal tokens={stackTokens} verticalAlign=\"start\">\n        <Toggle label=\"Show error message\" onText=\"Yes\" offText=\"No\" checked={showError} onChange={this._updateShowError} />\n        <Dropdown\n          placeholder=\"Select an option\"\n          label=\"Dropdown with error message\"\n          options={[\n            { key: 'A', text: 'Option a' },\n            { key: 'B', text: 'Option b' },\n            { key: 'C', text: 'Option c' },\n            { key: 'D', text: 'Option d' },\n            { key: 'E', text: 'Option e' }\n          ]}\n          errorMessage={showError ? 'This dropdown has an error' : undefined}\n          styles={{ dropdown: { width: 300 }, root: { height: 100 } }}\n        />\n      </Stack>\n    );\n  }\n\n  private _updateShowError = (event: React.MouseEvent<HTMLElement>, checked?: boolean) => {\n    this.setState({ showError: !!checked });\n  };\n}\n"]}