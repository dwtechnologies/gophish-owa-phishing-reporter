{"version":3,"file":"FocusZone.List.Example.js","sourceRoot":"../src/","sources":["components/FocusZone/examples/FocusZone.List.Example.tsx"],"names":[],"mappings":";;;IAOA,IAAM,KAAK,GAAG,uBAAW,CAAC,EAAE,EAAE,UAAA,KAAK,IAAI,OAAA,CAAC;QACtC,GAAG,EAAE,KAAK,CAAC,QAAQ,EAAE;QACrB,IAAI,EAAE,OAAO,GAAG,KAAK;QACrB,GAAG,EAAE,0BAA0B,GAAG,CAAC,GAAG,GAAG,KAAM,CAAC;KACjD,CAAC,EAJqC,CAIrC,CAAC,CAAC;IAEJ,IAAM,OAAO,GAAc;QACzB;YACE,GAAG,EAAE,MAAM;YACX,IAAI,EAAE,MAAM;YACZ,SAAS,EAAE,MAAM;YACjB,QAAQ,EAAE,GAAG;SACd;QACD;YACE,GAAG,EAAE,MAAM;YACX,IAAI,EAAE,MAAM;YACZ,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,GAAG;YACb,QAAQ,EAAE,UAAA,IAAI,IAAI,OAAA,oBAAC,WAAI,IAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAG,IAAI,CAAC,GAAG,CAAQ,EAAvC,CAAuC;SAC1D;QACD;YACE,GAAG,EAAE,eAAe;YACpB,IAAI,EAAE,MAAM;YACZ,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,GAAG;YACb,QAAQ,EAAE,UAAA,IAAI,IAAI,OAAA,oBAAC,sBAAa,QAAE,IAAI,CAAC,GAAG,CAAiB,EAAzC,CAAyC;SAC5D;KACF,CAAC;IAEW,QAAA,oBAAoB,GAA4B;QAC3D,gGAAgG;QACzF,IAAA;;;;aAAS,CAIb;QAEH,OAAO,CACL,oBAAC,qBAAS,IAAC,SAAS,EAAE,8BAAkB,CAAC,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,IAAI,EAAC,MAAM,IACpI,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,CAC1B,oBAAC,wBAAU,IACT,GAAG,EAAE,IAAI,CAAC,IAAI,EACd,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,KAAK,EAChB,OAAO,EAAE,OAAO,EAChB,aAAa,EAAE,2BAAa,CAAC,IAAI,EACjC,SAAS,EAAE,SAAS,EACpB,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,GACrD,CACH,EAV2B,CAU3B,CAAC,CACQ,CACb,CAAC;IACJ,CAAC,CAAC;IAEF,SAAS,qBAAqB,CAAC,EAAoC;QACjE,OAAO,EAAE,CAAC,KAAK,KAAK,6BAAiB,CAAC,oBAAQ,CAAC,KAAK,CAAC,CAAC;IACxD,CAAC","sourcesContent":["import * as React from 'react';\nimport { KeyCodes, createArray, getRTLSafeKeyCode } from 'office-ui-fabric-react/lib/Utilities';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { Link } from 'office-ui-fabric-react/lib/Link';\nimport { FocusZone, FocusZoneDirection } from 'office-ui-fabric-react/lib/FocusZone';\nimport { DetailsRow, IColumn, Selection, SelectionMode } from 'office-ui-fabric-react/lib/DetailsList';\n\nconst ITEMS = createArray(10, index => ({\n  key: index.toString(),\n  name: 'Item-' + index,\n  url: 'http://placehold.it/100x' + (200 + index!)\n}));\n\nconst COLUMNS: IColumn[] = [\n  {\n    key: 'name',\n    name: 'Name',\n    fieldName: 'name',\n    minWidth: 100\n  },\n  {\n    key: 'link',\n    name: 'Link',\n    fieldName: 'url',\n    minWidth: 100,\n    onRender: item => <Link href={item.url}>{item.url}</Link>\n  },\n  {\n    key: 'defaultButton',\n    name: 'Link',\n    fieldName: 'url',\n    minWidth: 100,\n    onRender: item => <DefaultButton>{item.url}</DefaultButton>\n  }\n];\n\nexport const FocusZoneListExample: React.FunctionComponent = () => {\n  //  Initialize the selection when the component is first rendered (same instance will be reused)\n  const [selection] = React.useState(() => {\n    const sel = new Selection();\n    sel.setItems(ITEMS);\n    return sel;\n  });\n\n  return (\n    <FocusZone direction={FocusZoneDirection.vertical} isCircularNavigation={true} isInnerZoneKeystroke={_isInnerZoneKeystroke} role=\"grid\">\n      {ITEMS.map((item, index) => (\n        <DetailsRow\n          key={item.name}\n          item={item}\n          itemIndex={index}\n          columns={COLUMNS}\n          selectionMode={SelectionMode.none}\n          selection={selection}\n          styles={{ root: { display: 'block', width: '100%' } }}\n        />\n      ))}\n    </FocusZone>\n  );\n};\n\nfunction _isInnerZoneKeystroke(ev: React.KeyboardEvent<HTMLElement>): boolean {\n  return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n}\n"]}