{"version":3,"file":"SwatchColorPicker.types.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/SwatchColorPicker.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyle, ITheme } from '../../Styling';\nimport { IStyleFunctionOrObject } from '../../Utilities';\nimport { IColorCellProps, IColorPickerGridCellStyleProps, IColorPickerGridCellStyles } from './ColorPickerGridCell.types';\n\n/**\n * {@docCategory SwatchColorPicker}\n */\nexport interface ISwatchColorPickerProps {\n  /**\n   * the number of columns for the swatch color picker\n   */\n  columnCount: number;\n\n  /**\n   * The id for the swatch color picker\n   */\n  id?: string;\n\n  /**\n   * Additional class name to provide on the root element\n   */\n  className?: string;\n\n  /**\n   * The shape of the color cells, defaults to circle\n   */\n  cellShape?: 'circle' | 'square';\n\n  /**\n   * The id of color cell that is currently selected\n   */\n  selectedId?: string;\n\n  /**\n   * The color cells that will be made available to the user\n   */\n  colorCells: IColorCellProps[];\n\n  /**\n   * Indicates whether the SwatchColorPicker is fully controlled.\n   * When true, the component will not set its internal state to track the selected color.\n   * Instead, the parent component will be responsible for handling state in the callbacks like\n   * onColorChanged.\n   *\n   * NOTE: This property is a temporary workaround to force the component to be fully controllable\n   * without breaking existing behavior\n   */\n  isControlled?: boolean;\n\n  /**\n   * Callback issued when the user changes the color.\n   * Note, if no id or color is given, there is no selected cell\n   * (e.g. the user executed the currently selected cell to unselect it)\n   */\n  onColorChanged?: (id?: string, color?: string) => void;\n\n  /**\n   * Callback issued when the user hovers over a color cell.\n   * Note, if no id or color is given, cells are not longer being hovered\n   */\n  onCellHovered?: (id?: string, color?: string) => void;\n\n  /**\n   * Callback issued when the user focuses a color cell.\n   * Note, if no id or color is given, cells are not longer being focused\n   */\n  onCellFocused?: (id?: string, color?: string) => void;\n\n  /**\n   * Is this swatch color picker disabled?\n   */\n  disabled?: boolean;\n\n  /**\n   * The optional position this grid is in the parent set (index in a parent menu, for example)\n   */\n  positionInSet?: number;\n\n  /**\n   * The optional size of the parent set (size of parent menu, for example)\n   */\n  setSize?: number;\n\n  /**\n   * Should focus cycle to the beginning of once the user navigates past the end (and vice versa).\n   * This prop is only relevant if doNotcontainWithinFocusZone is not true\n   * @defaultvalue true\n   */\n  shouldFocusCircularNavigate?: boolean;\n\n  /**\n   * If true do not contain the grid inside of a FocusZone.\n   * If false contain the grid inside of a FocusZone.\n   */\n  doNotContainWithinFocusZone?: boolean;\n\n  /**\n   * The distance between cells, in pixels\n   * @defaultvalue 10\n   */\n  cellMargin?: number;\n\n  /**\n   * Height of an individual cell, in pixels\n   * @defaultvalue 20\n   */\n  cellHeight?: number;\n\n  /**\n   * Width of an individual cell, in pixels\n   * @defaultvalue 20\n   */\n  cellWidth?: number;\n\n  /**\n   * Width of the border indicating a hovered/selected cell, in pixels\n   * If `cellWidth` is less than 24px, then default value is 2px. Otherwise it defaults to 4px.\n   * @defaultvalue 2\n   */\n  cellBorderWidth?: number;\n\n  /**\n   * Theme to apply to the component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Optional styles for the component.\n   */\n  styles?: IStyleFunctionOrObject<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>;\n\n  /**\n   * Optional styles for the component.\n   */\n  getColorGridCellStyles?: IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>;\n\n  /**\n   * Optional, whether to update focus when a cell is hovered.\n   * @defaultvalue false\n   */\n  focusOnHover?: boolean;\n\n  /**\n   * Selector to focus on mouseLeave\n   * SHOULD ONLY BE USED IN CONJUNCTION WITH focusOnHover\n   */\n  mouseLeaveParentSelector?: string | undefined;\n}\n\n/**\n * Properties required to build the styles for the color picker component.\n * {@docCategory SwatchColorPicker}\n */\nexport interface ISwatchColorPickerStyleProps {\n  /**\n   * Theme to apply to the container\n   */\n  theme: ITheme;\n\n  /**\n   * Custom className to apply to the container.\n   */\n  className?: string;\n\n  /**\n   * The distance between cells\n   */\n  cellMargin?: number;\n}\n\n/**\n * Styles for the Color Picker Component.\n * {@docCategory SwatchColorPicker}\n */\nexport interface ISwatchColorPickerStyles {\n  /**\n   * Style applied to the container grid of the swatchColorPicker\n   */\n  root: IStyle;\n\n  /**\n   * Style for the table cells of the grid.\n   */\n  tableCell: IStyle;\n\n  /**\n   * Optional, style for the FocusZone container for the grid\n   */\n  focusedContainer?: IStyle;\n}\n"]}