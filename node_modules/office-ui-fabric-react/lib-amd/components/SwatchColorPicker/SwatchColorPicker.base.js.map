{"version":3,"file":"SwatchColorPicker.base.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/SwatchColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  classNamesFunction,\n  findIndex,\n  KeyCodes,\n  getId,\n  warnMutuallyExclusive,\n  warnConditionallyRequiredProps\n} from '../../Utilities';\nimport { ISwatchColorPickerProps, ISwatchColorPickerStyleProps, ISwatchColorPickerStyles } from './SwatchColorPicker.types';\nimport { Grid } from '../../utilities/grid/Grid';\nimport { IColorCellProps } from './ColorPickerGridCell.types';\nimport { ColorPickerGridCell } from './ColorPickerGridCell';\n\nexport interface ISwatchColorPickerState {\n  selectedIndex?: number;\n}\n\nconst getClassNames = classNamesFunction<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>();\n\nexport class SwatchColorPickerBase extends React.Component<ISwatchColorPickerProps, ISwatchColorPickerState> {\n  public static defaultProps = {\n    cellShape: 'circle',\n    disabled: false,\n    shouldFocusCircularNavigate: true,\n    cellMargin: 10\n  } as ISwatchColorPickerProps;\n\n  private _id: string;\n  private _cellFocused: boolean;\n\n  private navigationIdleTimeoutId: number | undefined;\n  private isNavigationIdle: boolean;\n  private readonly navigationIdleDelay: number = 250 /* ms */;\n  private async: Async;\n\n  constructor(props: ISwatchColorPickerProps) {\n    super(props);\n\n    this._id = props.id || getId('swatchColorPicker');\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('SwatchColorPicker', this.props, {\n        focusOnHover: 'onHover'\n      });\n\n      warnConditionallyRequiredProps(\n        'SwatchColorPicker',\n        this.props,\n        ['focusOnHover'],\n        'mouseLeaveParentSelector',\n        !!this.props.mouseLeaveParentSelector\n      );\n    }\n\n    this.isNavigationIdle = true;\n    this.async = new Async(this);\n\n    let selectedIndex: number | undefined;\n    if (props.selectedId) {\n      selectedIndex = this._getSelectedIndex(props.colorCells, props.selectedId);\n    }\n\n    this.state = {\n      selectedIndex\n    };\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: ISwatchColorPickerProps): void {\n    if (newProps.selectedId !== undefined) {\n      this.setState({\n        selectedIndex: this._getSelectedIndex(newProps.colorCells, newProps.selectedId)\n      });\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.props.onCellFocused && this._cellFocused) {\n      this._cellFocused = false;\n      this.props.onCellFocused();\n    }\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      colorCells,\n      columnCount,\n      positionInSet,\n      setSize,\n      shouldFocusCircularNavigate,\n      className,\n      doNotContainWithinFocusZone,\n      styles,\n      cellMargin\n    } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      theme: this.props.theme!,\n      className,\n      cellMargin\n    });\n\n    if (colorCells.length < 1 || columnCount < 1) {\n      return null;\n    }\n    return (\n      <Grid\n        {...this.props}\n        items={colorCells.map((item, index) => {\n          return { ...item, index: index };\n        })}\n        columnCount={columnCount}\n        onRenderItem={this._renderOption}\n        positionInSet={positionInSet && positionInSet}\n        setSize={setSize && setSize}\n        shouldFocusCircularNavigate={shouldFocusCircularNavigate}\n        doNotContainWithinFocusZone={doNotContainWithinFocusZone}\n        onBlur={this._onSwatchColorPickerBlur}\n        theme={this.props.theme!}\n        // tslint:disable-next-line:jsx-no-lambda\n        styles={props => ({\n          root: classNames.root,\n          tableCell: classNames.tableCell,\n          focusedContainer: classNames.focusedContainer\n        })}\n      />\n    );\n  }\n\n  /**\n   * When the whole swatchColorPicker is blurred,\n   * make sure to clear the pending focused stated\n   */\n  private _onSwatchColorPickerBlur = (): void => {\n    if (this.props.onCellFocused) {\n      this._cellFocused = false;\n      this.props.onCellFocused();\n    }\n  };\n\n  /**\n   * Get the selected item's index\n   * @param items - The items to search\n   * @param selectedId - The selected item's id to find\n   * @returns - The index of the selected item's id, -1 if there was no match\n   */\n  private _getSelectedIndex(items: IColorCellProps[], selectedId: string): number | undefined {\n    const selectedIndex = findIndex(items, item => item.id === selectedId);\n    return selectedIndex >= 0 ? selectedIndex : undefined;\n  }\n\n  /**\n   * Render a color cell\n   * @param item - The item to render\n   * @returns - Element representing the item\n   */\n  private _renderOption = (item: IColorCellProps): JSX.Element => {\n    const id = this._id;\n\n    return (\n      <ColorPickerGridCell\n        item={item}\n        id={id}\n        color={item.color}\n        styles={this.props.getColorGridCellStyles}\n        disabled={this.props.disabled}\n        onClick={this._onCellClick}\n        onHover={this._onGridCellHovered}\n        onFocus={this._onGridCellFocused}\n        selected={this.state.selectedIndex !== undefined && this.state.selectedIndex === item.index}\n        circle={this.props.cellShape === 'circle'}\n        label={item.label}\n        onMouseEnter={this._onMouseEnter}\n        onMouseMove={this._onMouseMove}\n        onMouseLeave={this._onMouseLeave}\n        onWheel={this._onWheel}\n        onKeyDown={this._onKeyDown}\n        height={this.props.cellHeight}\n        width={this.props.cellWidth}\n        borderWidth={this.props.cellBorderWidth}\n      />\n    );\n  };\n\n  /**\n   * Callback passed to the GridCell that will manage triggering the onCellHovered callback for mouseEnter\n   */\n  private _onMouseEnter = (ev: React.MouseEvent<HTMLButtonElement>): boolean => {\n    if (!this.props.focusOnHover) {\n      if (!this.isNavigationIdle || this.props.disabled) {\n        return true;\n      }\n\n      return false;\n    }\n\n    if (this.isNavigationIdle && !this.props.disabled) {\n      ev.currentTarget.focus();\n    }\n\n    return true;\n  };\n\n  /**\n   * Callback passed to the GridCell that will manage Hover/Focus updates\n   */\n  private _onMouseMove = (ev: React.MouseEvent<HTMLButtonElement>): boolean => {\n    if (!this.props.focusOnHover) {\n      if (!this.isNavigationIdle || this.props.disabled) {\n        return true;\n      }\n\n      return false;\n    }\n\n    const targetElement = ev.currentTarget as HTMLElement;\n\n    // If navigation is idle and the targetElement is the focused element bail out\n    // if (!this.isNavigationIdle || (document && targetElement === (document.activeElement as HTMLElement))) {\n    if (this.isNavigationIdle && !(document && targetElement === (document.activeElement as HTMLElement))) {\n      targetElement.focus();\n    }\n\n    return true;\n  };\n\n  /**\n   * Callback passed to the GridCell that will manage Hover/Focus updates\n   */\n  private _onMouseLeave = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const parentSelector = this.props.mouseLeaveParentSelector;\n\n    if (!this.props.focusOnHover || !parentSelector || !this.isNavigationIdle || this.props.disabled) {\n      return;\n    }\n\n    // Get the the elements that math the given selector\n    const elements = document.querySelectorAll(parentSelector);\n\n    // iterate over the elements return to make sure it is a parent of the target and focus it\n    for (let index = 0; index < elements.length; index += 1) {\n      if (elements[index].contains(ev.currentTarget)) {\n        /**\n         * IE11 focus() method forces parents to scroll to top of element.\n         * Edge and IE expose a setActive() function for focusable divs that\n         * sets the page focus but does not scroll the parent element.\n         */\n        if ((elements[index] as any).setActive) {\n          try {\n            (elements[index] as any).setActive();\n          } catch (e) {\n            /* no-op */\n          }\n        } else {\n          (elements[index] as HTMLElement).focus();\n        }\n\n        break;\n      }\n    }\n  };\n\n  /**\n   * Callback to make sure we don't update the hovered element during mouse wheel\n   */\n  private _onWheel = (): void => {\n    this.setNavigationTimeout();\n  };\n\n  /**\n   * Callback that\n   */\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLButtonElement>): void => {\n    if (ev.which === KeyCodes.up || ev.which === KeyCodes.down || ev.which === KeyCodes.left || ev.which === KeyCodes.right) {\n      this.setNavigationTimeout();\n    }\n  };\n\n  /**\n   * Sets a timeout so we won't process any mouse \"hover\" events\n   * while navigating (via mouseWheel or arrowKeys)\n   */\n  private setNavigationTimeout = () => {\n    if (!this.isNavigationIdle && this.navigationIdleTimeoutId !== undefined) {\n      this.async.clearTimeout(this.navigationIdleTimeoutId);\n      this.navigationIdleTimeoutId = undefined;\n    } else {\n      this.isNavigationIdle = false;\n    }\n\n    this.navigationIdleTimeoutId = this.async.setTimeout(() => {\n      this.isNavigationIdle = true;\n    }, this.navigationIdleDelay);\n  };\n\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\n   * NOTE: This will not be triggered if shouldFocusOnHover === true\n   */\n  private _onGridCellHovered = (item?: IColorCellProps): void => {\n    const { onCellHovered } = this.props;\n\n    if (onCellHovered) {\n      return item ? onCellHovered(item.id, item.color) : onCellHovered();\n    }\n  };\n\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\n   */\n  private _onGridCellFocused = (item?: IColorCellProps): void => {\n    const { onCellFocused } = this.props;\n    if (onCellFocused) {\n      if (item) {\n        this._cellFocused = true;\n        return onCellFocused(item.id, item.color);\n      } else {\n        this._cellFocused = false;\n        return onCellFocused();\n      }\n    }\n  };\n\n  /**\n   * Handle the click on a cell\n   * @param item - The cell that the click was fired against\n   */\n  private _onCellClick = (item: IColorCellProps): void => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const index = item.index as number;\n\n    // If we have a valid index and it is not already\n    // selected, select it\n    if (index >= 0 && index !== this.state.selectedIndex) {\n      if (this.props.onCellFocused && this._cellFocused) {\n        this._cellFocused = false;\n        this.props.onCellFocused();\n      }\n\n      if (this.props.onColorChanged) {\n        this.props.onColorChanged(item.id, item.color);\n      }\n\n      // Update internal state only if the component is uncontrolled\n      if (this.props.isControlled !== true) {\n        this.setState({\n          selectedIndex: index\n        });\n      }\n    }\n  };\n}\n"]}