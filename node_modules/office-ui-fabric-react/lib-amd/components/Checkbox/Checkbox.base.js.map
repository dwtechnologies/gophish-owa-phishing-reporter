{"version":3,"file":"Checkbox.base.js","sourceRoot":"../src/","sources":["components/Checkbox/Checkbox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getId,\n  classNamesFunction,\n  mergeAriaAttributeValues,\n  initializeComponentRef,\n  warnMutuallyExclusive,\n  initializeFocusRects\n} from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { ICheckbox, ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface ICheckboxState {\n  /** Is true when Uncontrolled control is checked. */\n  isChecked?: boolean | undefined;\n  isIndeterminate?: boolean;\n}\n\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\n\nexport class CheckboxBase extends React.Component<ICheckboxProps, ICheckboxState> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n    boxSide: 'start'\n  };\n\n  private _checkBox = React.createRef<HTMLInputElement>();\n  private _id: string;\n  private _classNames: { [key in keyof ICheckboxStyles]: string };\n\n  public static getDerivedStateFromProps(props: ICheckboxProps, state: ICheckboxState): ICheckboxState | null {\n    if (!props.defaultIndeterminate && state.isIndeterminate) {\n      return {\n        isIndeterminate: !!props.indeterminate\n      };\n    }\n    if (props.checked !== undefined) {\n      return {\n        isChecked: !!props.checked\n      };\n    }\n    return null;\n  }\n\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n  constructor(props: ICheckboxProps, context?: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate'\n      });\n    }\n\n    this._id = this.props.id || getId('checkbox-');\n    this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate)\n    };\n\n    initializeFocusRects();\n  }\n\n  /**\n   * Render the Checkbox based on passed props\n   */\n  public render(): JSX.Element {\n    const {\n      checked,\n      className,\n      defaultChecked,\n      disabled,\n      inputProps,\n      name,\n      boxSide,\n      theme,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      styles,\n      onRenderLabel = this._onRenderLabel,\n      checkmarkIconProps,\n      ariaPositionInSet,\n      ariaSetSize,\n      keytipProps,\n      title,\n      label,\n      indeterminate\n    } = this.props;\n\n    const isChecked = checked === undefined ? this.state.isChecked : checked;\n    const isIndeterminate = !!(indeterminate === undefined ? this.state.isIndeterminate : indeterminate);\n    const isReversed = boxSide !== 'start' ? true : false;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: isReversed,\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel\n    });\n\n    return (\n      <KeytipData keytipProps={keytipProps} disabled={disabled}>\n        {(keytipAttributes: any): JSX.Element => (\n          <div className={this._classNames.root}>\n            <input\n              type=\"checkbox\"\n              {...inputProps}\n              data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\n              {...checked !== undefined && { checked }}\n              {...defaultChecked !== undefined && { defaultChecked }}\n              disabled={disabled}\n              className={this._classNames.input}\n              ref={this._checkBox}\n              name={name}\n              id={this._id}\n              title={title}\n              onChange={this._onChange}\n              onFocus={this._onFocus}\n              onBlur={this._onBlur}\n              aria-disabled={disabled}\n              aria-label={ariaLabel || label}\n              aria-labelledby={ariaLabelledBy}\n              aria-describedby={mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])}\n              aria-posinset={ariaPositionInSet}\n              aria-setsize={ariaSetSize}\n              aria-checked={isIndeterminate ? 'mixed' : isChecked ? 'true' : 'false'}\n            />\n            <label className={this._classNames.label} htmlFor={this._id}>\n              <div className={this._classNames.checkbox} data-ktp-target={keytipAttributes['data-ktp-target']}>\n                <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={this._classNames.checkmark} />\n              </div>\n              {onRenderLabel(this.props, this._onRenderLabel)}\n            </label>\n          </div>\n        )}\n      </KeytipData>\n    );\n  }\n\n  public get indeterminate(): boolean {\n    return this.state.isIndeterminate!;\n  }\n\n  public get checked(): boolean {\n    return this.state.isChecked!;\n  }\n\n  public focus(): void {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onFocus) {\n      inputProps.onFocus(ev);\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onBlur) {\n      inputProps.onBlur(ev);\n    }\n  };\n\n  private _onChange = (ev: React.FormEvent<HTMLElement>): void => {\n    const { disabled, onChange } = this.props;\n    const { isChecked, isIndeterminate } = this.state;\n\n    if (!disabled) {\n      if (!isIndeterminate) {\n        if (onChange) {\n          onChange(ev, !isChecked);\n        }\n        if (this.props.checked === undefined) {\n          this.setState({ isChecked: !isChecked });\n        }\n      } else {\n        if (onChange) {\n          onChange(ev, isChecked);\n        }\n        if (this.props.indeterminate === undefined) {\n          this.setState({ isIndeterminate: false });\n        }\n      }\n    }\n  };\n\n  private _onRenderLabel = (props: ICheckboxProps): JSX.Element | null => {\n    const { label } = props;\n\n    return label ? (\n      <span aria-hidden=\"true\" className={this._classNames.text}>\n        {label}\n      </span>\n    ) : null;\n  };\n}\n"]}