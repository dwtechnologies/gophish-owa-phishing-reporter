{"version":3,"file":"TagPicker.Basic.Example.js","sourceRoot":"../src/","sources":["components/pickers/examples/TagPicker.Basic.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { TagPicker, IBasePicker, ITag } from 'office-ui-fabric-react/lib/Pickers';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { mergeStyles } from 'office-ui-fabric-react/lib/Styling';\n\nconst rootClass = mergeStyles({\n  maxWidth: 500\n});\n\nconst _testTags: ITag[] = [\n  'black',\n  'blue',\n  'brown',\n  'cyan',\n  'green',\n  'magenta',\n  'mauve',\n  'orange',\n  'pink',\n  'purple',\n  'red',\n  'rose',\n  'violet',\n  'white',\n  'yellow'\n].map(item => ({ key: item, name: item }));\n\nexport interface ITagPickerDemoPageState {\n  isPickerDisabled?: boolean;\n}\n\nexport class TagPickerBasicExample extends React.Component<{}, ITagPickerDemoPageState> {\n  // All pickers extend from BasePicker specifying the item type.\n  private _picker = React.createRef<IBasePicker<ITag>>();\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      isPickerDisabled: false\n    };\n  }\n\n  public render() {\n    return (\n      <div className={rootClass}>\n        <Checkbox\n          styles={{ root: { margin: '10px 0' } }}\n          label=\"Disable Tag Picker\"\n          checked={this.state.isPickerDisabled}\n          onChange={this._onDisabledButtonClick}\n        />\n        Filter items in suggestions: This picker will filter added items from the search suggestions.\n        <TagPicker\n          onResolveSuggestions={this._onFilterChanged}\n          getTextFromItem={this._getTextFromItem}\n          pickerSuggestionsProps={{\n            suggestionsHeaderText: 'Suggested Tags',\n            noResultsFoundText: 'No Color Tags Found'\n          }}\n          itemLimit={2}\n          disabled={this.state.isPickerDisabled}\n          inputProps={{\n            onBlur: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onBlur called'),\n            onFocus: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onFocus called'),\n            'aria-label': 'Tag Picker'\n          }}\n        />\n        <br />\n        Filter items on selected: This picker will show already-added suggestions but will not add duplicate tags.\n        <TagPicker\n          componentRef={this._picker}\n          onResolveSuggestions={this._onFilterChangedNoFilter}\n          onItemSelected={this._onItemSelected}\n          getTextFromItem={this._getTextFromItem}\n          pickerSuggestionsProps={{\n            suggestionsHeaderText: 'Suggested Tags',\n            noResultsFoundText: 'No Color Tags Found'\n          }}\n          itemLimit={2}\n          disabled={this.state.isPickerDisabled}\n          inputProps={{\n            onBlur: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onBlur called'),\n            onFocus: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onFocus called'),\n            'aria-label': 'Tag Picker'\n          }}\n        />\n      </div>\n    );\n  }\n\n  private _getTextFromItem(item: ITag): string {\n    return item.name;\n  }\n\n  private _onDisabledButtonClick = (): void => {\n    this.setState({\n      isPickerDisabled: !this.state.isPickerDisabled\n    });\n  };\n\n  private _onFilterChanged = (filterText: string, tagList: ITag[]): ITag[] => {\n    return filterText\n      ? _testTags\n          .filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0)\n          .filter(tag => !this._listContainsDocument(tag, tagList))\n      : [];\n  };\n\n  private _onFilterChangedNoFilter = (filterText: string, tagList: ITag[]): ITag[] => {\n    return filterText ? _testTags.filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0) : [];\n  };\n\n  private _onItemSelected = (item: ITag): ITag | null => {\n    if (this._picker.current && this._listContainsDocument(item, this._picker.current.items)) {\n      return null;\n    }\n    return item;\n  };\n\n  private _listContainsDocument(tag: ITag, tagList?: ITag[]) {\n    if (!tagList || !tagList.length || tagList.length === 0) {\n      return false;\n    }\n    return tagList.filter(compareTag => compareTag.key === tag.key).length > 0;\n  }\n}\n"]}