{"version":3,"file":"Dialog.Basic.Example.js","sourceRoot":"../src/","sources":["components/Dialog/examples/Dialog.Basic.Example.tsx"],"names":[],"mappings":";;;IAQA,IAAM,gBAAgB,GAAG,qBAAW,CAAC,4BAAkB,CAAC,CAAC;IAOzD;QAAwC,8CAA6C;QAArF;YAAA,qEAgEC;YA/DQ,WAAK,GAA6B;gBACvC,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,KAAK;aACnB,CAAC;YACF,6DAA6D;YAC7D,wFAAwF;YAChF,cAAQ,GAAW,iBAAK,CAAC,aAAa,CAAC,CAAC;YACxC,gBAAU,GAAW,iBAAK,CAAC,cAAc,CAAC,CAAC;YAC3C,kBAAY,GAAG;gBACrB,gBAAgB,EAAE,MAAM;gBACxB,iBAAiB,EAAE,OAAO;gBAC1B,IAAI,EAAE,+BAAc;aACrB,CAAC;YAwCM,iBAAW,GAAG;gBACpB,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;YACvC,CAAC,CAAC;YAEM,kBAAY,GAAG;gBACrB,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;YACtC,CAAC,CAAC;YAEM,sBAAgB,GAAG;gBACzB,KAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;YAC1D,CAAC,CAAC;;QACJ,CAAC;QAjDQ,mCAAM,GAAb;YACQ,IAAA,eAAwC,EAAtC,0BAAU,EAAE,4BAA0B,CAAC;YAC/C,OAAO,CACL;gBACE,oBAAC,mBAAQ,IAAC,KAAK,EAAC,cAAc,EAAC,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,OAAO,EAAE,WAAW,GAAI;gBACxF,oBAAC,sBAAa,IAAC,aAAa,EAAC,yBAAyB,EAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAC,aAAa,GAAG;gBACvG,+BAAO,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,gBAAgB,sBAE7C;gBACR,+BAAO,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,gBAAgB,4BAE/C;gBAER,oBAAC,eAAM,IACL,MAAM,EAAE,UAAU,EAClB,SAAS,EAAE,IAAI,CAAC,YAAY,EAC5B,kBAAkB,EAAE;wBAClB,IAAI,EAAE,mBAAU,CAAC,MAAM;wBACvB,KAAK,EAAE,iBAAiB;wBACxB,OAAO,EAAE,qDAAqD;qBAC/D,EACD,UAAU,EAAE;wBACV,WAAW,EAAE,IAAI,CAAC,QAAQ;wBAC1B,cAAc,EAAE,IAAI,CAAC,UAAU;wBAC/B,UAAU,EAAE,KAAK;wBACjB,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;wBACnC,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS;qBACzD;oBAED,oBAAC,qBAAY;wBACX,oBAAC,sBAAa,IAAC,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAC,MAAM,GAAG;wBACzD,oBAAC,sBAAa,IAAC,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAC,YAAY,GAAG,CAClD,CACR,CACL,CACP,CAAC;QACJ,CAAC;QAaH,yBAAC;IAAD,CAAC,AAhED,CAAwC,KAAK,CAAC,SAAS,GAgEtD;IAhEY,gDAAkB","sourcesContent":["import * as React from 'react';\nimport { Dialog, DialogType, DialogFooter } from 'office-ui-fabric-react/lib/Dialog';\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { getId } from 'office-ui-fabric-react/lib/Utilities';\nimport { hiddenContentStyle, mergeStyles } from 'office-ui-fabric-react/lib/Styling';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { ContextualMenu } from 'office-ui-fabric-react/lib/ContextualMenu';\n\nconst screenReaderOnly = mergeStyles(hiddenContentStyle);\n\nexport interface IDialogBasicExampleState {\n  hideDialog: boolean;\n  isDraggable: boolean;\n}\n\nexport class DialogBasicExample extends React.Component<{}, IDialogBasicExampleState> {\n  public state: IDialogBasicExampleState = {\n    hideDialog: true,\n    isDraggable: false\n  };\n  // Use getId() to ensure that the IDs are unique on the page.\n  // (It's also okay to use plain strings without getId() and manually ensure uniqueness.)\n  private _labelId: string = getId('dialogLabel');\n  private _subTextId: string = getId('subTextLabel');\n  private _dragOptions = {\n    moveMenuItemText: 'Move',\n    closeMenuItemText: 'Close',\n    menu: ContextualMenu\n  };\n\n  public render() {\n    const { hideDialog, isDraggable } = this.state;\n    return (\n      <div>\n        <Checkbox label=\"Is draggable\" onChange={this._toggleDraggable} checked={isDraggable} />\n        <DefaultButton secondaryText=\"Opens the Sample Dialog\" onClick={this._showDialog} text=\"Open Dialog\" />\n        <label id={this._labelId} className={screenReaderOnly}>\n          My sample Label\n        </label>\n        <label id={this._subTextId} className={screenReaderOnly}>\n          My Sample description\n        </label>\n\n        <Dialog\n          hidden={hideDialog}\n          onDismiss={this._closeDialog}\n          dialogContentProps={{\n            type: DialogType.normal,\n            title: 'Missing Subject',\n            subText: 'Do you want to send this message without a subject?'\n          }}\n          modalProps={{\n            titleAriaId: this._labelId,\n            subtitleAriaId: this._subTextId,\n            isBlocking: false,\n            styles: { main: { maxWidth: 450 } },\n            dragOptions: isDraggable ? this._dragOptions : undefined\n          }}\n        >\n          <DialogFooter>\n            <PrimaryButton onClick={this._closeDialog} text=\"Send\" />\n            <DefaultButton onClick={this._closeDialog} text=\"Don't send\" />\n          </DialogFooter>\n        </Dialog>\n      </div>\n    );\n  }\n\n  private _showDialog = (): void => {\n    this.setState({ hideDialog: false });\n  };\n\n  private _closeDialog = (): void => {\n    this.setState({ hideDialog: true });\n  };\n\n  private _toggleDraggable = (): void => {\n    this.setState({ isDraggable: !this.state.isDraggable });\n  };\n}\n"]}