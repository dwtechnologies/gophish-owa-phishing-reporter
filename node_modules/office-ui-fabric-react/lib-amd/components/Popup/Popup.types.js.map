{"version":3,"file":"Popup.types.js","sourceRoot":"../src/","sources":["components/Popup/Popup.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { Popup } from './Popup';\n\n/**\n * {@docCategory Popup}\n */\nexport interface IPopupProps extends React.HTMLAttributes<Popup> {\n  /**\n   * Aria role for popup\n   */\n  role?: string;\n\n  /**\n   * Accessible label text for the popup.\n   */\n  ariaLabel?: string;\n\n  /**\n   *  Defines the element id referencing the element containing label text for popup.\n   */\n  ariaLabelledBy?: string;\n\n  /**\n   * Defines the element id referencing the element containing the description for the popup.\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   * A callback function for when the popup is dismissed from the close button or light dismiss. If provided, will\n   * handle escape keypresses and call this. The event will be stopped/canceled.\n   */\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => any;\n\n  /**\n   *  Optional class name for the root popup div.\n   */\n  className?: string;\n\n  /**\n   * If true, the unmounting of this component will cause focus to be restored to the element that had focus when first mounted.\n   * @defaultvalue true\n   */\n  shouldRestoreFocus?: boolean;\n}\n"]}