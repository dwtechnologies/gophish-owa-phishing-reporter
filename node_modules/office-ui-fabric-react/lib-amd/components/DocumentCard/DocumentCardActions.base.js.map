{"version":3,"file":"DocumentCardActions.base.js","sourceRoot":"../src/","sources":["components/DocumentCard/DocumentCardActions.base.tsx"],"names":[],"mappings":";;;IAOA,IAAM,aAAa,GAAG,8BAAkB,EAA8D,CAAC;IAEvG;;OAEG;IACH;QAA6C,mDAA6C;QAA1F;;QA+BA,CAAC;QA5BQ,wCAAM,GAAb;YAAA,iBA2BC;YA1BO,IAAA,eAAyD,EAAvD,oBAAO,EAAE,gBAAK,EAAE,kBAAM,EAAE,gBAAK,EAAE,wBAAwB,CAAC;YAEhE,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAO,EAAE;gBACxC,KAAK,EAAE,KAAM;gBACb,SAAS,WAAA;aACV,CAAC,CAAC;YAEH,OAAO,CACL,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;gBAClC,OAAO;oBACN,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK;wBACxB,OAAO,CACL,6BAAK,SAAS,EAAE,KAAI,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK;4BACjD,oBAAC,mBAAU,uBAAK,MAAM,EAAI,CACtB,CACP,CAAC;oBACJ,CAAC,CAAC;gBAEH,KAAM,GAAG,CAAC,IAAI,CACb,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK;oBACpC,oBAAC,WAAI,IAAC,QAAQ,EAAC,MAAM,EAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,GAAI;oBAC9D,KAAK,CACF,CACP,CACG,CACP,CAAC;QACJ,CAAC;QACH,8BAAC;IAAD,CAAC,AA/BD,CAA6C,yBAAa,GA+BzD;IA/BY,0DAAuB","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { IDocumentCardActionsProps, IDocumentCardActionsStyleProps, IDocumentCardActionsStyles } from './DocumentCardActions.types';\nimport { IconButton } from '../../Button';\nimport { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDocumentCardActionsStyleProps, IDocumentCardActionsStyles>();\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardActionsBase extends BaseComponent<IDocumentCardActionsProps, any> {\n  private _classNames: IProcessedStyleSet<IDocumentCardActionsStyles>;\n\n  public render(): JSX.Element {\n    const { actions, views, styles, theme, className } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className\n    });\n\n    return (\n      <div className={this._classNames.root}>\n        {actions &&\n          actions.map((action, index) => {\n            return (\n              <div className={this._classNames.action} key={index}>\n                <IconButton {...action} />\n              </div>\n            );\n          })}\n\n        {views! > 0 && (\n          <div className={this._classNames.views}>\n            <Icon iconName=\"View\" className={this._classNames.viewsIcon} />\n            {views}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]}