{"version":3,"file":"Tooltip.Overflow.Example.js","sourceRoot":"../src/","sources":["components/Tooltip/examples/Tooltip.Overflow.Example.tsx"],"names":[],"mappings":";;;IAUA;QAA4C,kDAA+C;QAGzF,gCAAY,KAAU;YAAtB,YACE,kBAAM,KAAK,CAAC,SAMb;YATgB,eAAS,GAAG,iBAAK,CAAC,cAAc,CAAC,CAAC;YAKjD,KAAI,CAAC,KAAK,GAAG;gBACX,QAAQ,EAAE,KAAK;gBACf,gBAAgB,EAAE,KAAK;aACxB,CAAC;;QACJ,CAAC;QAED,+BAA+B;QACxB,uCAAM,GAAb;YAAA,iBAkCC;YAjCC,OAAO,CACL;gBACE,oBAAC,sBAAa,IAAC,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAjD,CAAiD,8BAAyC;gBAExH,6BACE,KAAK,EAAE;wBACL,SAAS,EAAE,MAAM;qBAClB;oBAED,6BACE,KAAK,EAAE;4BACL,QAAQ,EAAE,QAAQ;4BAClB,YAAY,EAAE,UAAU;4BACxB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;4BACtD,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;4BAC7C,MAAM,EAAE,iBAAiB;yBAC1B;wBAED,oBAAC,qBAAW,IACV,OAAO,EAAC,qBAAqB,EAC7B,EAAE,EAAE,IAAI,CAAC,SAAS,EAClB,YAAY,EAAE,6BAAmB,CAAC,MAAM,EACxC,eAAe,EAAE,UAAC,gBAAyB,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,gBAAgB,kBAAA,EAAE,CAAC,EAAnC,CAAmC;4BAEnF,kDAAwB,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,iMAGzE,CACK,CACV,CACF,CACF,CACP,CAAC;QACJ,CAAC;QACH,6BAAC;IAAD,CAAC,AAhDD,CAA4C,yBAAa,GAgDxD;IAhDY,wDAAsB","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, getId } from 'office-ui-fabric-react/lib/Utilities';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { TooltipHost, TooltipOverflowMode } from 'office-ui-fabric-react/lib/Tooltip';\n\nexport interface ITooltipOverflowExampleState {\n  overflow: boolean;\n  isTooltipVisible: boolean;\n}\n\nexport class TooltipOverflowExample extends BaseComponent<{}, ITooltipOverflowExampleState> {\n  private readonly tooltipId = getId('text-tooltip');\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      overflow: false,\n      isTooltipVisible: false\n    };\n  }\n\n  // tslint:disable:jsx-no-lambda\n  public render(): JSX.Element {\n    return (\n      <div>\n        <DefaultButton onClick={() => this.setState({ overflow: !this.state.overflow })}>Toggle showing overflow</DefaultButton>\n\n        <div\n          style={{\n            marginTop: '40px'\n          }}\n        >\n          <div\n            style={{\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: this.state.overflow ? 'nowrap' : 'inherit',\n              width: this.state.overflow ? '200px' : 'auto',\n              border: '1px solid black'\n            }}\n          >\n            <TooltipHost\n              content=\"This is the tooltip\"\n              id={this.tooltipId}\n              overflowMode={TooltipOverflowMode.Parent}\n              onTooltipToggle={(isTooltipVisible: boolean) => this.setState({ isTooltipVisible })}\n            >\n              <span aria-describedby={this.state.isTooltipVisible ? this.tooltipId : undefined}>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec volutpat lectus ut magna sodales, sit amet accumsan arcu\n                accumsan. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n              </span>\n            </TooltipHost>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]}