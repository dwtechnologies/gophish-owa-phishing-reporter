{"version":3,"file":"Layer.Hosted.Example.js","sourceRoot":"../src/","sources":["components/Layer/examples/Layer.Hosted.Example.tsx"],"names":[],"mappings":";;;IASA,IAAM,YAAY,GAAsC;QACtD,IAAI,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE;KAC3B,CAAC;IAEF,IAAM,SAAS,GAAG,qBAAW,CAAC;QAC5B,SAAS,EAAE,EAAE,CAAC,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE;KACpC,CAAC,CAAC;IAQH;QAAwC,8CAA6C;QAArF;YAAA,qEAkFC;YAjFQ,WAAK,GAA6B;gBACvC,SAAS,EAAE,KAAK;gBAChB,aAAa,EAAE,KAAK;gBACpB,QAAQ,EAAE,IAAI;aACf,CAAC;YACF,2DAA2D;YAC3D,yFAAyF;YACjF,kBAAY,GAAW,iBAAK,CAAC,WAAW,CAAC,CAAC;YA+D1C,uBAAiB,GAAG,UAAC,EAAmD,EAAE,OAAgB;gBAChG,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;YACxC,CAAC,CAAC;YAEM,2BAAqB,GAAG,UAAC,EAAmD,EAAE,OAAgB;gBACpG,KAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC;YAEM,qBAAe,GAAG,UAAC,EAAiC,EAAE,OAAgB;gBAC5E,KAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;YACvC,CAAC,CAAC;;QACJ,CAAC;QAxEQ,mCAAM,GAAb;YACQ,IAAA,eAAmD,EAAjD,wBAAS,EAAE,gCAAa,EAAE,sBAAuB,CAAC;YAC1D,IAAM,OAAO,GAAG,6BAAK,SAAS,EAAE,eAAG,CAAC,MAAM,CAAC,OAAO,EAAE,6BAAmB,CAAC,YAAY,CAAC,qCAAsC,CAAC;YAE5H,OAAO,CACL,6BAAK,SAAS,EAAE,SAAS;gBACvB,oBAAC,eAAM,IAAC,KAAK,EAAC,WAAW,EAAC,WAAW,QAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,eAAe,GAAI;gBAE1F,QAAQ,IAAI,oBAAC,iBAAS,IAAC,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE,MAAM,CAAC,UAAU,GAAI;gBAE/E,kWAII;gBAEJ,oBAAC,eAAM,IACL,MAAM,EAAE,YAAY,EACpB,KAAK,EAAE,6DAA2D,IAAI,CAAC,YAAc,EACrF,WAAW,QACX,OAAO,EAAE,SAAS,EAClB,QAAQ,EAAE,IAAI,CAAC,iBAAiB,GAChC;gBAED,SAAS,CAAC,CAAC,CAAC,CACX,oBAAC,aAAK,IAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,eAAe,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,kBAAkB,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IACnH,OAAO,CACF,CACT,CAAC,CAAC,CAAC,CACF,OAAO,CACR;gBAED,6BAAK,SAAS,EAAE,MAAM,CAAC,UAAU,uCAAwC;gBAEzE,sIAA2G;gBAE3G,oBAAC,eAAM,IACL,MAAM,EAAE,YAAY,EACpB,KAAK,EAAC,6FAA6F,EACnG,WAAW,QACX,OAAO,EAAE,aAAa,EACtB,QAAQ,EAAE,IAAI,CAAC,qBAAqB,GACpC;gBAED,aAAa,CAAC,CAAC,CAAC,CACf,oBAAC,aAAK,IAAC,eAAe,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,kBAAkB,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IACxF,OAAO,CACF,CACT,CAAC,CAAC,CAAC,CACF,OAAO,CACR,CACG,CACP,CAAC;QACJ,CAAC;QAEO,iCAAI,GAAZ,UAAa,IAAY;YACvB,OAAO;gBACL,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACpB,CAAC,CAAC;QACJ,CAAC;QAaH,yBAAC;IAAD,CAAC,AAlFD,CAAwC,KAAK,CAAC,SAAS,GAkFtD;IAlFY,gDAAkB","sourcesContent":["import * as React from 'react';\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\nimport { Layer, LayerHost } from 'office-ui-fabric-react/lib/Layer';\nimport { AnimationClassNames, mergeStyles } from 'office-ui-fabric-react/lib/Styling';\nimport { getId, css } from 'office-ui-fabric-react/lib/Utilities';\nimport { IToggleStyles } from 'office-ui-fabric-react/lib/Toggle';\nimport { IStyleSet } from 'office-ui-fabric-react/lib/Styling';\nimport * as styles from './Layer.Example.scss';\n\nconst toggleStyles: Partial<IStyleSet<IToggleStyles>> = {\n  root: { margin: '10px 0' }\n};\n\nconst rootClass = mergeStyles({\n  selectors: { p: { marginTop: 30 } }\n});\n\nexport interface ILayerHostedExampleState {\n  showLayer: boolean;\n  showLayerNoId: boolean;\n  showHost: boolean;\n}\n\nexport class LayerHostedExample extends React.Component<{}, ILayerHostedExampleState> {\n  public state: ILayerHostedExampleState = {\n    showLayer: false,\n    showLayerNoId: false,\n    showHost: true\n  };\n  // Use getId() to ensure that the ID is unique on the page.\n  // (It's also okay to use a plain string without getId() and manually ensure uniqueness.)\n  private _layerHostId: string = getId('layerhost');\n\n  public render(): JSX.Element {\n    const { showLayer, showLayerNoId, showHost } = this.state;\n    const content = <div className={css(styles.content, AnimationClassNames.scaleUpIn100)}>This is example layer content.</div>;\n\n    return (\n      <div className={rootClass}>\n        <Toggle label=\"Show host\" inlineLabel checked={showHost} onChange={this._onChangeToggle} />\n\n        {showHost && <LayerHost id={this._layerHostId} className={styles.customHost} />}\n\n        <p>\n          In some cases, you may need to contain layered content within an area. Create an instance of a LayerHost along with an id, and\n          provide a hostId on the layer to render it within the specific host. (Note that it's important that you don't include children\n          within the LayerHost. It's meant to contain Layered content only.)\n        </p>\n\n        <Toggle\n          styles={toggleStyles}\n          label={`Render the box below in a Layer and target it at hostId=${this._layerHostId}`}\n          inlineLabel\n          checked={showLayer}\n          onChange={this._onChangeCheckbox}\n        />\n\n        {showLayer ? (\n          <Layer hostId={this._layerHostId} onLayerDidMount={this._log('didmount')} onLayerWillUnmount={this._log('willunmount')}>\n            {content}\n          </Layer>\n        ) : (\n          content\n        )}\n\n        <div className={styles.nonLayered}>I am normally below the content.</div>\n\n        <p>If you do not specify a hostId, the hosted layer will default to being fixed to the page by default.</p>\n\n        <Toggle\n          styles={toggleStyles}\n          label=\"Render the box below in a Layer without specifying a host, fixing it to the top of the page\"\n          inlineLabel\n          checked={showLayerNoId}\n          onChange={this._onChangeCheckboxNoId}\n        />\n\n        {showLayerNoId ? (\n          <Layer onLayerDidMount={this._log('didmount')} onLayerWillUnmount={this._log('willunmount')}>\n            {content}\n          </Layer>\n        ) : (\n          content\n        )}\n      </div>\n    );\n  }\n\n  private _log(text: string): () => void {\n    return (): void => {\n      console.log(text);\n    };\n  }\n\n  private _onChangeCheckbox = (ev: React.FormEvent<HTMLElement | HTMLInputElement>, checked: boolean): void => {\n    this.setState({ showLayer: checked });\n  };\n\n  private _onChangeCheckboxNoId = (ev: React.FormEvent<HTMLElement | HTMLInputElement>, checked: boolean): void => {\n    this.setState({ showLayerNoId: checked });\n  };\n\n  private _onChangeToggle = (ev: React.MouseEvent<HTMLElement>, checked: boolean): void => {\n    this.setState({ showHost: checked });\n  };\n}\n"]}