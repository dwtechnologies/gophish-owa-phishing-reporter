{"version":3,"file":"Link.base.js","sourceRoot":"../src/","sources":["components/Link/Link.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\nimport { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\nimport { KeytipData } from '../../KeytipData';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\nexport class LinkBase extends BaseComponent<ILinkProps, any> implements ILink {\n  private _link = React.createRef<HTMLAnchorElement | HTMLButtonElement | null>();\n\n  public render(): JSX.Element {\n    const { disabled, children, className, href, theme, styles, keytipProps } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      className,\n      isButton: !href,\n      isDisabled: disabled,\n      theme: theme!\n    });\n\n    const RootType = this._getRootType(this.props);\n\n    return (\n      <KeytipData\n        keytipProps={keytipProps}\n        ariaDescribedBy={(this.props as { 'aria-describedby': string })['aria-describedby']}\n        disabled={disabled}\n      >\n        {(keytipAttributes: any): JSX.Element => (\n          <RootType\n            {...keytipAttributes}\n            {...this._adjustPropsForRootType(RootType, this.props)}\n            className={classNames.root}\n            onClick={this._onClick}\n            ref={this._link}\n            aria-disabled={disabled}\n          >\n            {children}\n          </RootType>\n        )}\n      </KeytipData>\n    );\n  }\n\n  public focus() {\n    const { current } = this._link;\n\n    if (current && current.focus) {\n      current.focus();\n    }\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    const { onClick, disabled } = this.props;\n\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  private _adjustPropsForRootType(\n    RootType: string | React.ComponentClass | React.StatelessComponent,\n    props: ILinkProps & { getStyles?: any }\n  ): Partial<ILinkProps> {\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n    // as those will always be removed. We also take some props that are optional\n    // based on the RootType.\n    const { children, as, disabled, target, href, theme, getStyles, styles, componentRef, ...restProps } = props;\n\n    // RootType will be a string if we're dealing with an html component\n    if (typeof RootType === 'string') {\n      // Remove the disabled prop for anchor elements\n      if (RootType === 'a') {\n        return {\n          target,\n          href: disabled ? undefined : href,\n          ...restProps\n        };\n      }\n\n      // Add the type='button' prop for button elements\n      if (RootType === 'button') {\n        return {\n          type: 'button',\n          disabled,\n          ...restProps\n        };\n      }\n\n      // Remove the target and href props for all other non anchor elements\n      return { ...restProps, disabled };\n    }\n\n    // Retain all props except 'as' for ReactComponents\n    return { target, href, disabled, ...restProps };\n  }\n\n  private _getRootType(props: ILinkProps): string | React.ComponentClass | React.StatelessComponent {\n    if (props.as) {\n      return props.as;\n    }\n\n    if (props.href) {\n      return 'a';\n    }\n\n    return 'button';\n  }\n}\n"]}