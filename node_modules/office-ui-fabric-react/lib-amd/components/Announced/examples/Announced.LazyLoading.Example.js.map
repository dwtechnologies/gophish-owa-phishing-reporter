{"version":3,"file":"Announced.LazyLoading.Example.js","sourceRoot":"../src/","sources":["components/Announced/examples/Announced.LazyLoading.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Announced } from 'office-ui-fabric-react/lib/Announced';\nimport { createArray, Async } from 'office-ui-fabric-react/lib/Utilities';\nimport { Image } from 'office-ui-fabric-react/lib/Image';\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\nimport { Text } from 'office-ui-fabric-react/lib/Text';\nimport { Stack, IStackTokens, IStackStyles } from 'office-ui-fabric-react/lib/Stack';\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator';\nimport { mergeStyles } from 'office-ui-fabric-react/lib/Styling';\n\nconst photoStackTokens: IStackTokens = { childrenGap: '6 6' };\nconst photoStackStyles: Partial<IStackStyles> = {\n  root: {\n    border: '1px solid black',\n    padding: 10,\n    overflowY: 'auto'\n  },\n  inner: {\n    padding: 0\n  }\n};\n\nconst photoCellClass = mergeStyles({\n  display: 'block',\n  boxSizing: 'border-box',\n  width: 100,\n  height: 100\n});\n\nconst DELAY = 10;\nconst PHOTO_COUNT = 30;\n\ninterface IPhoto {\n  url: string;\n  width: number;\n  height: number;\n}\n\nexport interface IAnnouncedLazyLoadingExampleState {\n  /** Number of photos loaded so far */\n  total: number;\n  announced?: JSX.Element;\n  loading: boolean;\n  timeSinceLastAnnounce: number;\n}\n\nexport interface IAnnouncedLazyLoadingExampleProps {}\n\nexport class AnnouncedLazyLoadingExample extends React.Component<IAnnouncedLazyLoadingExampleProps, IAnnouncedLazyLoadingExampleState> {\n  private _photos: IPhoto[];\n  private _async: Async;\n\n  constructor(props: {}) {\n    super(props);\n\n    this._async = new Async(this);\n    this._photos = this._createPhotos();\n\n    this.state = {\n      total: 0,\n      announced: undefined,\n      loading: false,\n      timeSinceLastAnnounce: 0\n    };\n  }\n\n  public componentDidMount() {\n    const interval1 = this._async.setInterval(() => {\n      const { loading, total } = this.state;\n      if (loading && total < PHOTO_COUNT) {\n        this.setState({ total: total + 1 });\n      } else if (total === PHOTO_COUNT) {\n        this.setState({ announced: undefined });\n        this._async.clearInterval(interval1);\n      }\n    }, 2000);\n\n    const interval2 = this._async.setInterval(() => {\n      const { loading, total, timeSinceLastAnnounce } = this.state;\n      if (loading) {\n        this.setState({ timeSinceLastAnnounce: timeSinceLastAnnounce + 1 });\n\n        if (timeSinceLastAnnounce === DELAY || total === PHOTO_COUNT) {\n          this.setState({\n            announced: <Announced message={`${total} of ${PHOTO_COUNT} photos loaded`} />,\n            timeSinceLastAnnounce: 0\n          });\n\n          if (total === PHOTO_COUNT) {\n            this._async.clearInterval(interval2);\n          }\n        }\n      }\n    }, 1000);\n  }\n\n  public render(): JSX.Element {\n    const { announced, total, loading } = this.state;\n    const stackTokens: IStackTokens = { childrenGap: 10 };\n    const percentComplete = total / PHOTO_COUNT;\n\n    return (\n      <Stack tokens={stackTokens}>\n        <Text>\n          Turn on Narrator and press the button to start loading photos. Announced should announce the number of photos loaded every 10\n          seconds, as that is the delay chosen for this example.\n        </Text>\n        <DefaultButton\n          text={loading ? 'Pause loading' : 'Load photos'}\n          onClick={loading ? this._pauseLoading : this._startLoading}\n          styles={{ root: { width: 150 } }}\n        />\n        <ProgressIndicator label={percentComplete < 1 ? 'Loading photos' : 'Finished loading photos'} percentComplete={percentComplete} />\n        {announced}\n        <FocusZone>\n          <Stack\n            horizontal\n            wrap\n            // Render the inner content as a ul (there's not currently a less-verbose way to do this)\n            // tslint:disable-next-line:jsx-no-lambda\n            tokens={photoStackTokens}\n            styles={photoStackStyles}\n            slots={{ inner: { component: 'ul' } }}\n          >\n            {this._renderPhotos()}\n          </Stack>\n        </FocusZone>\n      </Stack>\n    );\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  private _startLoading = () => {\n    this.setState({ loading: true });\n  };\n\n  private _pauseLoading = () => {\n    this.setState({ loading: false });\n  };\n\n  private _createPhotos(): IPhoto[] {\n    const width = 100;\n    const height = 100;\n\n    const result = createArray(PHOTO_COUNT, () => {\n      return {\n        url: `http://placehold.it/${width}x${height}`,\n        width: width,\n        height: height\n      };\n    });\n    return result;\n  }\n\n  private _renderPhotos(): JSX.Element[] {\n    const result = this._photos.map((photo: IPhoto, index: number) => (\n      <li\n        key={index}\n        className={photoCellClass}\n        aria-posinset={index + 1}\n        aria-setsize={PHOTO_COUNT}\n        aria-label=\"Photo\"\n        data-is-focusable={true}\n      >\n        {this.state.total > index ? <Image src={photo.url} width={photo.width} height={photo.height} /> : <div />}\n      </li>\n    ));\n\n    return result;\n  }\n}\n"]}