{"version":3,"file":"ProgressIndicator.Basic.Example.js","sourceRoot":"../src/","sources":["components/ProgressIndicator/examples/ProgressIndicator.Basic.Example.tsx"],"names":[],"mappings":";;;IAQA,IAAM,cAAc,GAAG,GAAG,CAAC;IAC3B,IAAM,kBAAkB,GAAG,IAAI,CAAC;IAChC,IAAM,iBAAiB,GAAG,IAAI,CAAC;IAE/B;QAAmD,yDAAwD;QAIzG,uCAAY,KAAS;YAArB,YACE,kBAAM,KAAK,CAAC,SAQb;YANC,KAAI,CAAC,MAAM,GAAG,IAAI,iBAAK,CAAC,KAAI,CAAC,CAAC;YAE9B,KAAI,CAAC,KAAK,GAAG;gBACX,eAAe,EAAE,CAAC;aACnB,CAAC;YACF,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;QAC/D,CAAC;QAEM,yDAAiB,GAAxB;YACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5B,CAAC;QAEM,4DAAoB,GAA3B;YACE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACxB,CAAC;QAEM,8CAAM,GAAb;YACU,IAAA,4CAAe,CAAgB;YAEvC,OAAO,oBAAC,qCAAiB,IAAC,KAAK,EAAC,eAAe,EAAC,WAAW,EAAC,qBAAqB,EAAC,eAAe,EAAE,eAAe,GAAI,CAAC;QACzH,CAAC;QAEO,0DAAkB,GAA1B;YAAA,iBAoBC;YAnBC,iBAAiB;YACjB,IAAI,CAAC,QAAQ,CAAC;gBACZ,eAAe,EAAE,CAAC;aACnB,CAAC,CAAC;YAEH,kBAAkB;YAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;gBACvC,IAAI,eAAe,GAAG,KAAI,CAAC,KAAK,CAAC,eAAe,GAAG,kBAAkB,CAAC;gBAEtE,6CAA6C;gBAC7C,IAAI,eAAe,IAAI,GAAG,EAAE;oBAC1B,eAAe,GAAG,GAAG,CAAC;oBACtB,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;oBAC1C,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAI,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;iBACpE;gBACD,KAAI,CAAC,QAAQ,CAAC;oBACZ,eAAe,EAAE,eAAe;iBACjC,CAAC,CAAC;YACL,CAAC,EAAE,cAAc,CAAC,CAAC;QACrB,CAAC;QACH,oCAAC;IAAD,CAAC,AAlDD,CAAmD,KAAK,CAAC,SAAS,GAkDjE;IAlDY,sEAA6B","sourcesContent":["import * as React from 'react';\nimport { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator';\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\n\nexport interface IProgressIndicatorBasicExampleState {\n  percentComplete: number;\n}\n\nconst INTERVAL_DELAY = 100;\nconst INTERVAL_INCREMENT = 0.01;\nconst RESTART_WAIT_TIME = 2000;\n\nexport class ProgressIndicatorBasicExample extends React.Component<{}, IProgressIndicatorBasicExampleState> {\n  private _interval: number;\n  private _async: Async;\n\n  constructor(props: {}) {\n    super(props);\n\n    this._async = new Async(this);\n\n    this.state = {\n      percentComplete: 0\n    };\n    this._startProgressDemo = this._startProgressDemo.bind(this);\n  }\n\n  public componentDidMount(): void {\n    this._startProgressDemo();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { percentComplete } = this.state;\n\n    return <ProgressIndicator label=\"Example title\" description=\"Example description\" percentComplete={percentComplete} />;\n  }\n\n  private _startProgressDemo(): void {\n    // reset the demo\n    this.setState({\n      percentComplete: 0\n    });\n\n    // update progress\n    this._interval = this._async.setInterval(() => {\n      let percentComplete = this.state.percentComplete + INTERVAL_INCREMENT;\n\n      // once complete, set the demo to start again\n      if (percentComplete >= 1.0) {\n        percentComplete = 1.0;\n        this._async.clearInterval(this._interval);\n        this._async.setTimeout(this._startProgressDemo, RESTART_WAIT_TIME);\n      }\n      this.setState({\n        percentComplete: percentComplete\n      });\n    }, INTERVAL_DELAY);\n  }\n}\n"]}