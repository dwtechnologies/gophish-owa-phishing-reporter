{"version":3,"file":"GroupHeader.base.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupHeader.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, IClassNames, getRTL } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { IGroupHeaderStyleProps, IGroupHeaderStyles, IGroupHeaderProps } from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' }\n  };\n\n  private _classNames: IClassNames<IGroupHeaderStyles>;\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false\n    };\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IGroupHeaderProps): void {\n    if (newProps.group) {\n      const newCollapsed = newProps.group.isCollapsed;\n      const isGroupLoading = newProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(newProps.group);\n\n      this.setState({\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false\n      });\n    }\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel,\n      viewport,\n      selectionMode,\n      loadingText,\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      groupedListId,\n      compact\n    } = this.props;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = isSelected || selected;\n\n    const isRTL = getRTL();\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact\n    });\n\n    if (!group) {\n      return null;\n    }\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        aria-label={group.ariaLabel || group.name}\n        data-is-focusable={true}\n      >\n        <FocusZone className={this._classNames.groupHeaderContainer} direction={FocusZoneDirection.horizontal}>\n          {isSelectionCheckVisible ? (\n            <button\n              type=\"button\"\n              className={this._classNames.check}\n              role=\"checkbox\"\n              aria-checked={currentlySelected}\n              data-selection-toggle={true}\n              onClick={this._onToggleSelectGroupClick}\n              {...selectAllButtonProps}\n            >\n              <Check checked={currentlySelected} />\n            </button>\n          ) : (\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={indentWidth} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon}>\n            <Icon iconName=\"Tag\" />\n          </div>\n          <button\n            type=\"button\"\n            className={this._classNames.expand}\n            onClick={this._onToggleCollapse}\n            aria-expanded={group ? !group.isCollapsed : undefined}\n            aria-controls={group && !group.isCollapsed ? groupedListId : undefined}\n            {...expandButtonProps}\n          >\n            <Icon className={this._classNames.expandIsCollapsed} iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'} />\n          </button>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </FocusZone>\n      </div>\n    );\n  }\n\n  private _onToggleCollapse = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n"]}