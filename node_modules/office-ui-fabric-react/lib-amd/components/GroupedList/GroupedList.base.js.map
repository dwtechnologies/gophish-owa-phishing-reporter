{"version":3,"file":"GroupedList.base.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupedList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, IClassNames, initializeFocusRects } from '../../Utilities';\nimport { IGroupedList, IGroupedListProps, IGroup, IGroupedListStyleProps, IGroupedListStyles } from './GroupedList.types';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode, IListProps } from '../../List';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { IGroupHeaderProps } from './GroupHeader';\nimport { IGroupShowAllProps } from './GroupShowAll.styles';\nimport { IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  groups?: IGroup[];\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false\n  };\n\n  public refs: {\n    [key: string]: React.ReactInstance;\n  };\n\n  private _classNames: IClassNames<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    initializeFocusRects();\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    this.state = {\n      lastWidth: 0,\n      groups: props.groups\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IGroupedListProps): void {\n    const { groups, selectionMode, compact } = this.props;\n    let shouldForceUpdates = false;\n\n    if (newProps.groups !== groups) {\n      this.setState({ groups: newProps.groups });\n      shouldForceUpdates = true;\n    }\n\n    if (newProps.selectionMode !== selectionMode || newProps.compact !== compact) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      this._forceListUpdates();\n    }\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, usePageCache, onShouldVirtualize, theme, styles, compact } = this.props;\n    const { groups } = this.state;\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact\n    });\n\n    return (\n      <div className={this._classNames.root} data-automationid=\"GroupedList\" data-is-scrollable=\"false\" role=\"presentation\">\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role=\"presentation\"\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n          />\n        )}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    return (\n      <GroupedListSection\n        ref={'group_' + groupIndex}\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={listProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    if (group) {\n      this.props.selection!.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    groups = groups || this.state.groups;\n\n    const groupCount = groups ? groups.length : 1;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      for (let i = 0; i < groupCount; i++) {\n        const group = this._list.current.refs['group_' + String(i)] as GroupedListSection;\n        if (group) {\n          group.forceListUpdate();\n        }\n      }\n    } else {\n      const group = this.refs['group_' + String(0)] as GroupedListSection;\n      if (group) {\n        group.forceListUpdate();\n      }\n    }\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(groups && groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed)));\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n"]}