{"version":3,"file":"GroupedList.Basic.Example.js","sourceRoot":"../src/","sources":["components/GroupedList/examples/GroupedList.Basic.Example.tsx"],"names":[],"mappings":";;;IASA,IAAM,UAAU,GAAG,CAAC,CAAC;IACrB,IAAM,UAAU,GAAG,CAAC,CAAC;IAMrB;QAA6C,mDAA6C;QAMxF,iCAAY,KAAS;YAArB,YACE,kBAAM,KAAK,CAAC,SAqBb;YA+BO,mBAAa,GAAG,UAAC,YAAoB,EAAE,IAAkB,EAAE,SAAiB;gBAClF,OAAO,CACL,oBAAC,wBAAU,IACT,OAAO,EAAE,KAAI,CAAC,QAAQ,EACtB,iBAAiB,EAAE,YAAY,EAC/B,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,SAAS,EACpB,SAAS,EAAE,KAAI,CAAC,UAAU,EAC1B,aAAa,EAAE,yBAAa,CAAC,QAAQ,EACrC,OAAO,EAAE,KAAI,CAAC,KAAK,CAAC,aAAa,GACjC,CACH,CAAC;YACJ,CAAC,CAAC;YAEM,0BAAoB,GAAG,UAAC,EAAiC,EAAE,OAAgB;gBACjF,KAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC;YAlEA,KAAI,CAAC,MAAM,GAAG,8BAAe,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;YACpE,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBACxC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;iBACX,GAAG,CACF,UAAC,GAAW,IAAc,OAAA,CAAC;gBACzB,GAAG,EAAE,GAAG;gBACR,IAAI,EAAE,GAAG;gBACT,SAAS,EAAE,GAAG;gBACd,QAAQ,EAAE,GAAG;aACd,CAAC,EALwB,CAKxB,CACH,CAAC;YACJ,KAAI,CAAC,OAAO,GAAG,2BAAY,CAAC,UAAU,EAAE,UAAU,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;YAEnE,KAAI,CAAC,UAAU,GAAG,IAAI,qBAAS,EAAE,CAAC;YAClC,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;YAEtC,KAAI,CAAC,KAAK,GAAG;gBACX,aAAa,EAAE,KAAK;aACrB,CAAC;;QACJ,CAAC;QAEM,wCAAM,GAAb;YACU,IAAA,wCAAa,CAAgB;YAErC,OAAO,CACL;gBACE,oBAAC,eAAM,IACL,KAAK,EAAC,qBAAqB,EAC3B,OAAO,EAAE,aAAa,EACtB,QAAQ,EAAE,IAAI,CAAC,oBAAoB,EACnC,MAAM,EAAC,SAAS,EAChB,OAAO,EAAC,QAAQ,EAChB,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,EAAE,GAC1C;gBACF,oBAAC,qBAAS;oBACR,oBAAC,yBAAa,IAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,aAAa,EAAE,yBAAa,CAAC,QAAQ;wBAC9E,oBAAC,yBAAW,IACV,KAAK,EAAE,IAAI,CAAC,MAAM,EAClB,YAAY,EAAE,IAAI,CAAC,aAAa,EAChC,SAAS,EAAE,IAAI,CAAC,UAAU,EAC1B,aAAa,EAAE,yBAAa,CAAC,QAAQ,EACrC,MAAM,EAAE,IAAI,CAAC,OAAO,EACpB,OAAO,EAAE,aAAa,GACtB,CACY,CACN,CACR,CACP,CAAC;QACJ,CAAC;QAmBH,8BAAC;IAAD,CAAC,AA5ED,CAA6C,KAAK,CAAC,SAAS,GA4E3D;IA5EY,0DAAuB","sourcesContent":["import * as React from 'react';\nimport { GroupedList, IGroup } from 'office-ui-fabric-react/lib/GroupedList';\nimport { IColumn, DetailsRow } from 'office-ui-fabric-react/lib/DetailsList';\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from 'office-ui-fabric-react/lib/Selection';\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\n\nimport { createListItems, createGroups, IExampleItem } from '@uifabric/example-data';\n\nconst groupCount = 3;\nconst groupDepth = 3;\n\nexport interface IGroupedListExampleState {\n  isCompactMode?: boolean;\n}\n\nexport class GroupedListBasicExample extends React.Component<{}, IGroupedListExampleState> {\n  private _items: IExampleItem[];\n  private _columns: IColumn[];\n  private _groups: IGroup[];\n  private _selection: Selection;\n\n  constructor(props: {}) {\n    super(props);\n\n    this._items = createListItems(Math.pow(groupCount, groupDepth + 1));\n    this._columns = Object.keys(this._items[0])\n      .slice(0, 3)\n      .map(\n        (key: string): IColumn => ({\n          key: key,\n          name: key,\n          fieldName: key,\n          minWidth: 300\n        })\n      );\n    this._groups = createGroups(groupCount, groupDepth, 0, groupCount);\n\n    this._selection = new Selection();\n    this._selection.setItems(this._items);\n\n    this.state = {\n      isCompactMode: false\n    };\n  }\n\n  public render(): JSX.Element {\n    const { isCompactMode } = this.state;\n\n    return (\n      <div>\n        <Toggle\n          label=\"Enable compact mode\"\n          checked={isCompactMode}\n          onChange={this._onChangeCompactMode}\n          onText=\"Compact\"\n          offText=\"Normal\"\n          styles={{ root: { marginBottom: '20px' } }}\n        />\n        <FocusZone>\n          <SelectionZone selection={this._selection} selectionMode={SelectionMode.multiple}>\n            <GroupedList\n              items={this._items}\n              onRenderCell={this._onRenderCell}\n              selection={this._selection}\n              selectionMode={SelectionMode.multiple}\n              groups={this._groups}\n              compact={isCompactMode}\n            />\n          </SelectionZone>\n        </FocusZone>\n      </div>\n    );\n  }\n\n  private _onRenderCell = (nestingDepth: number, item: IExampleItem, itemIndex: number): JSX.Element => {\n    return (\n      <DetailsRow\n        columns={this._columns}\n        groupNestingDepth={nestingDepth}\n        item={item}\n        itemIndex={itemIndex}\n        selection={this._selection}\n        selectionMode={SelectionMode.multiple}\n        compact={this.state.isCompactMode}\n      />\n    );\n  };\n\n  private _onChangeCompactMode = (ev: React.MouseEvent<HTMLElement>, checked: boolean): void => {\n    this.setState({ isCompactMode: checked });\n  };\n}\n"]}