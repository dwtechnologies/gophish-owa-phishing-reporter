{"version":3,"file":"TextField.Multiline.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.Multiline.Example.tsx"],"names":[],"mappings":";;;IASA;QAA+C,qDAAoD;QAAnG;YAAA,qEAqCC;YApCQ,WAAK,GAAoC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YAC7D,YAAM,GAAW,oBAAK,CAAC,GAAG,CAAC,CAAC;YA6B5B,eAAS,GAAG,UAAC,EAAO,EAAE,OAAe;gBAC3C,IAAM,YAAY,GAAG,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;gBACzC,IAAI,YAAY,KAAK,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE;oBACzC,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC;iBAC5C;YACH,CAAC,CAAC;;QACJ,CAAC;QAjCQ,0CAAM,GAAb;YACE,gFAAgF;YAChF,IAAM,WAAW,GAAyB;gBACxC,MAAM,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE;gBAC3B,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;aACjC,CAAC;YAEF,OAAO,CACL,oBAAC,aAAK,IAAC,UAAU,QAAC,MAAM,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;gBAC7E,oBAAC,aAAK,uBAAK,WAAW;oBACpB,oBAAC,qBAAS,IAAC,KAAK,EAAC,UAAU,EAAC,SAAS,QAAC,IAAI,EAAE,CAAC,GAAI;oBACjD,oBAAC,qBAAS,IAAC,KAAK,EAAC,UAAU,EAAC,SAAS,QAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,QAAC,YAAY,EAAE,IAAI,CAAC,MAAM,GAAI;oBACrF,oBAAC,qBAAS,IAAC,KAAK,EAAC,eAAe,EAAC,SAAS,QAAC,SAAS,EAAE,KAAK,GAAI,CACzD;gBAER,oBAAC,aAAK,uBAAK,WAAW;oBACpB,oBAAC,qBAAS,IAAC,KAAK,EAAC,4BAA4B,EAAC,SAAS,QAAC,gBAAgB,SAAG;oBAC3E,oBAAC,qBAAS,IACR,KAAK,EAAC,0EAA0E,EAChF,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAC/B,QAAQ,EAAE,IAAI,CAAC,SAAS,GACxB,CACI,CACF,CACT,CAAC;QACJ,CAAC;QAQH,gCAAC;IAAD,CAAC,AArCD,CAA+C,KAAK,CAAC,SAAS,GAqC7D;IArCY,8DAAyB","sourcesContent":["import * as React from 'react';\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\nimport { lorem } from '@uifabric/example-data';\nimport { Stack, IStackProps } from 'office-ui-fabric-react/lib/Stack';\n\nexport interface ITextFieldMultilineExampleState {\n  multiline: boolean;\n}\n\nexport class TextFieldMultilineExample extends React.Component<{}, ITextFieldMultilineExampleState> {\n  public state: ITextFieldMultilineExampleState = { multiline: false };\n  private _lorem: string = lorem(100);\n\n  public render(): JSX.Element {\n    // TextFields don't have to be inside Stacks, we're just using Stacks for layout\n    const columnProps: Partial<IStackProps> = {\n      tokens: { childrenGap: 15 },\n      styles: { root: { width: 300 } }\n    };\n\n    return (\n      <Stack horizontal tokens={{ childrenGap: 50 }} styles={{ root: { width: 650 } }}>\n        <Stack {...columnProps}>\n          <TextField label=\"Standard\" multiline rows={3} />\n          <TextField label=\"Disabled\" multiline rows={3} disabled defaultValue={this._lorem} />\n          <TextField label=\"Non-resizable\" multiline resizable={false} />\n        </Stack>\n\n        <Stack {...columnProps}>\n          <TextField label=\"With auto adjusting height\" multiline autoAdjustHeight />\n          <TextField\n            label=\"Switches from single to multiline if more than 50 characters are entered\"\n            multiline={this.state.multiline}\n            onChange={this._onChange}\n          />\n        </Stack>\n      </Stack>\n    );\n  }\n\n  private _onChange = (ev: any, newText: string): void => {\n    const newMultiline = newText.length > 50;\n    if (newMultiline !== this.state.multiline) {\n      this.setState({ multiline: newMultiline });\n    }\n  };\n}\n"]}