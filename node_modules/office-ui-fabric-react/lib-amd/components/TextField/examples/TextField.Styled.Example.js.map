{"version":3,"file":"TextField.Styled.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.Styled.Example.tsx"],"names":[],"mappings":";;;IAOa,QAAA,sBAAsB,GAA6B;QAC9D,OAAO,CACL,oBAAC,aAAK,IAAC,MAAM,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE;YAChC,oBAAC,WAAI,IAAC,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,ySAIlC;YACP,oBAAC,qBAAS,IAAC,KAAK,EAAC,2CAA2C,EAAC,QAAQ,QAAC,MAAM,EAAE,SAAS,GAAI;YAC3F,oBAAC,qBAAS,IAAC,KAAK,EAAC,4CAA4C,EAAC,QAAQ,QAAC,SAAS,EAAC,qBAAqB,GAAG,CACnG,CACT,CAAC;IACJ,CAAC,CAAC;IAEF,SAAS,SAAS,CAAC,KAA2B;QACpC,IAAA,yBAAQ,CAAW;QAC3B,OAAO;YACL,UAAU,EAAE;gBACV,EAAE,KAAK,EAAE,GAAG,EAAE;gBACd,QAAQ,IAAI;oBACV,cAAc,EAAE,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS;iBACrD;aACF;YACD,kBAAkB,EAAE;gBAClB,KAAK,EAAE,cAAc;aACtB;SACF,CAAC;IACJ,CAAC;IAED,SAAS,cAAc,CAAC,KAAuB;QACrC,IAAA,yBAAQ,CAAW;QAC3B,OAAO;YACL,IAAI,EAAE;gBACJ,QAAQ,IAAI;oBACV,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY;iBACxC;aACF;SACF,CAAC;IACJ,CAAC;;AAED;;;;;;;;;;;;;;;;;;EAkBE","sourcesContent":["import * as React from 'react';\nimport { ITextFieldStyleProps, ITextFieldStyles, TextField } from 'office-ui-fabric-react/lib/TextField';\nimport { ILabelStyles, ILabelStyleProps } from 'office-ui-fabric-react/lib/Label';\nimport { Text } from 'office-ui-fabric-react/lib/Text';\nimport { Stack } from 'office-ui-fabric-react/lib/Stack';\nimport './TextField.Styled.Example.scss';\n\nexport const TextFieldStyledExample: React.StatelessComponent = () => {\n  return (\n    <Stack tokens={{ childrenGap: 15 }}>\n      <Text styles={{ root: { maxWidth: 600 } }}>\n        These examples show how components that used to be styled using CSS can be styled using JS styling. The preferred method is JS\n        styling for several reasons: type safety for styling, more predictable behavior, and clear feedback via typing when component\n        changes affect existing styling code.\n      </Text>\n      <TextField label=\"Theme Primary Label, Red Top Border (JS):\" required styles={getStyles} />\n      <TextField label=\"Theme Primary Label, Red Top Border (CSS):\" required className=\"textField-cssStyled\" />\n    </Stack>\n  );\n};\n\nfunction getStyles(props: ITextFieldStyleProps): Partial<ITextFieldStyles> {\n  const { required } = props;\n  return {\n    fieldGroup: [\n      { width: 300 },\n      required && {\n        borderTopColor: props.theme.semanticColors.errorText\n      }\n    ],\n    subComponentStyles: {\n      label: getLabelStyles\n    }\n  };\n}\n\nfunction getLabelStyles(props: ILabelStyleProps): ILabelStyles {\n  const { required } = props;\n  return {\n    root: [\n      required && {\n        color: props.theme.palette.themePrimary\n      }\n    ]\n  };\n}\n\n/*\nThis is the SCSS used in the CSS styling example.\nIf exporting to CodePen, paste this into the CSS section.\n-------------------------------------------------------------------------------------------\n// In the real SCSS, these variables are defined elsewhere and adjusted based on the theme.\n// The values provided below are from the default theme.\n$errorTextColor: #a80000;\n$ms-color-themePrimary: #0078d4;\n\n.textField-cssStyled {\n  .ms-TextField-fieldGroup {\n    width: 300px;\n    border-top-color: $errorTextColor;\n  }\n  .ms-Label {\n    color: $ms-color-themePrimary;\n  }\n}\n*/\n"]}