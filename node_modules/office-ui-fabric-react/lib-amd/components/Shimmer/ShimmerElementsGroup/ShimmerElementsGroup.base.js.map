{"version":3,"file":"ShimmerElementsGroup.base.js","sourceRoot":"../src/","sources":["components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { classNamesFunction } from '../../../Utilities';\nimport { IRawStyle } from '../../../Styling';\nimport { IShimmerElementsGroupProps, IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles } from './ShimmerElementsGroup.types';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights, IShimmerElement } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerElementsGroupBase: React.FunctionComponent<IShimmerElementsGroupProps> = props => {\n  const {\n    styles,\n    width = 'auto',\n    shimmerElements,\n    rowHeight = findMaxElementHeight(shimmerElements || []),\n    flexWrap = false,\n    theme,\n    backgroundColor\n  } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    flexWrap\n  });\n\n  return (\n    <div style={{ width: width }} className={classNames.root}>\n      {getRenderedElements(shimmerElements, backgroundColor, rowHeight)}\n    </div>\n  );\n};\n\nfunction getRenderedElements(shimmerElements?: IShimmerElement[], backgroundColor?: string, rowHeight?: number): React.ReactNode {\n  const renderedElements: React.ReactNode = shimmerElements ? (\n    shimmerElements.map(\n      (element: IShimmerElement, index: number): JSX.Element => {\n        const { type, ...filteredElem } = element;\n        switch (element.type) {\n          case ShimmerElementType.circle:\n            return <ShimmerCircle key={index} {...filteredElem} styles={getElementStyles(element, backgroundColor, rowHeight)} />;\n          case ShimmerElementType.gap:\n            return <ShimmerGap key={index} {...filteredElem} styles={getElementStyles(element, backgroundColor, rowHeight)} />;\n          case ShimmerElementType.line:\n            return <ShimmerLine key={index} {...filteredElem} styles={getElementStyles(element, backgroundColor, rowHeight)} />;\n        }\n      }\n    )\n  ) : (\n    <ShimmerLine height={ShimmerElementsDefaultHeights.line} />\n  );\n\n  return renderedElements;\n}\n\nfunction getElementStyles(\n  element: IShimmerElement,\n  backgroundColor?: string,\n  rowHeight?: number\n): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles {\n  const { verticalAlign, type, height: elementHeight } = element;\n  const dif: number = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n\n  let borderStyle: IRawStyle | undefined;\n\n  if (!verticalAlign || verticalAlign === 'center') {\n    borderStyle = {\n      borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n      borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`\n    };\n  } else if (verticalAlign && verticalAlign === 'top') {\n    borderStyle = {\n      borderBottomWidth: `${dif}px`,\n      borderTopWidth: `0px`\n    };\n  } else if (verticalAlign && verticalAlign === 'bottom') {\n    borderStyle = {\n      borderBottomWidth: `0px`,\n      borderTopWidth: `${dif}px`\n    };\n  }\n\n  if (backgroundColor) {\n    switch (type) {\n      case ShimmerElementType.circle:\n        return {\n          root: { ...borderStyle, borderColor: backgroundColor },\n          svg: { fill: backgroundColor }\n        };\n      case ShimmerElementType.gap:\n        return {\n          root: { ...borderStyle, borderColor: backgroundColor, backgroundColor: backgroundColor }\n        };\n      case ShimmerElementType.line:\n        return {\n          root: { ...borderStyle, borderColor: backgroundColor },\n          topLeftCorner: { fill: backgroundColor },\n          topRightCorner: { fill: backgroundColor },\n          bottomLeftCorner: { fill: backgroundColor },\n          bottomRightCorner: { fill: backgroundColor }\n        };\n    }\n  }\n\n  return {\n    root: borderStyle\n  };\n}\n\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements: IShimmerElement[]): number {\n  const shimmerElementsDefaulted: IShimmerElement[] = shimmerElements.map(\n    (element: IShimmerElement): IShimmerElement => {\n      switch (element.type) {\n        case ShimmerElementType.circle:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.circle;\n          }\n        case ShimmerElementType.line:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.line;\n          }\n        case ShimmerElementType.gap:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.gap;\n          }\n      }\n      return element;\n    }\n  );\n\n  const rowHeight = shimmerElementsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n    return next.height ? (next.height > acc ? next.height : acc) : acc;\n  }, 0);\n\n  return rowHeight;\n}\n"]}