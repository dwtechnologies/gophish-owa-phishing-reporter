{"version":3,"file":"FontIcon.js","sourceRoot":"../src/","sources":["components/Icon/FontIcon.tsx"],"names":[],"mappings":";;;IAOa,QAAA,cAAc,GAAG,2BAAe,CAAC,UAAC,QAAiB;QAC9D,IAAM,cAAc,GAAG,iBAAO,CAAC,QAAQ,CAAC,IAAI;YAC1C,MAAM,EAAE;gBACN,SAAS,EAAE,SAAS;aACrB;YACD,IAAI,EAAE,SAAS;SAChB,CAAC;QAEF,OAAO;YACL,QAAQ,EAAE,cAAc,CAAC,IAAI;YAC7B,aAAa,EAAE,cAAc,CAAC,MAAM,CAAC,SAAS;SAC/C,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH;;;;OAIG;IACU,QAAA,QAAQ,GAA4C,UAAA,KAAK;QAC5D,IAAA,yBAAQ,EAAE,2BAAS,CAAW;QAChC,IAAA,qCAAsD,EAApD,gCAAa,EAAE,sBAAqC,CAAC;QAE7D,IAAM,WAAW,GAAG,0BAAc,CAAoC,KAAK,EAAE,iCAAqB,CAAC,CAAC;QACpG,IAAM,cAAc,GAAG,KAAK,CAAC,YAAY,CAAC;YACxC,CAAC,CAAC,EAAE;YACJ,CAAC,CAAC;gBACE,IAAI,EAAE,cAAc;gBACpB,aAAa,EAAE,IAAI;aACpB,CAAC;QAEN,OAAO,CACL,8DACkB,QAAQ,IACpB,cAAc,EACd,WAAW,IACf,SAAS,EAAE,eAAG,CAAC,qBAAO,EAAE,wBAAU,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC,QAAQ,IAAI,wBAAU,CAAC,WAAW,EAAE,SAAS,CAAC,KAEtG,QAAQ,CACP,CACL,CAAC;IACJ,CAAC,CAAC;IAEF;;;;;;OAMG;IACU,QAAA,WAAW,GAAG,2BAAe,CAAC,UAAC,QAAgB,EAAE,SAAkB,EAAE,SAAkB;QAClG,OAAO,gBAAQ,CAAC,EAAE,QAAQ,UAAA,EAAE,SAAS,WAAA,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nimport { IFontIconProps } from './Icon.types';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\n\nexport const getIconContent = memoizeFunction((iconName?: string) => {\n  const iconDefinition = getIcon(iconName) || {\n    subset: {\n      className: undefined\n    },\n    code: undefined\n  };\n\n  return {\n    children: iconDefinition.code,\n    iconClassName: iconDefinition.subset.className\n  };\n});\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className } = props;\n  const { iconClassName, children } = getIconContent(iconName);\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const containerProps = props['aria-label']\n    ? {}\n    : {\n        role: 'presentation',\n        'aria-hidden': true\n      };\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n    >\n      {children}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n"]}