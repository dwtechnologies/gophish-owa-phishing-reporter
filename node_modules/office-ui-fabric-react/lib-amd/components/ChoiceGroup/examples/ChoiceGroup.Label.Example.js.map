{"version":3,"file":"ChoiceGroup.Label.Example.js","sourceRoot":"../src/","sources":["components/ChoiceGroup/examples/ChoiceGroup.Label.Example.tsx"],"names":[],"mappings":";;;IAKa,QAAA,uBAAuB,GAA4B;QAC9D,wEAAwE;QACxE,6FAA6F;QAC7F,iGAAiG;QACjG,oGAAoG;QACpG,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,cAAM,OAAA,iBAAK,CAAC,cAAc,CAAC,EAArB,CAAqB,EAAE,EAAE,CAAC,CAAC;QAE/D,OAAO,CACL;YACE,oBAAC,aAAK,IAAC,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,mBAE1B;YACR,oBAAC,yBAAW,IACV,kBAAkB,EAAC,GAAG,EACtB,OAAO,EAAE;oBACP;wBACE,GAAG,EAAE,GAAG;wBACR,IAAI,EAAE,UAAU;qBACjB;oBACD;wBACE,GAAG,EAAE,GAAG;wBACR,IAAI,EAAE,UAAU;qBACjB;oBACD;wBACE,GAAG,EAAE,GAAG;wBACR,IAAI,EAAE,UAAU;wBAChB,QAAQ,EAAE,IAAI;qBACf;oBACD;wBACE,GAAG,EAAE,GAAG;wBACR,IAAI,EAAE,UAAU;qBACjB;iBACF,EACD,QAAQ,EAAE,SAAS,EACnB,cAAc,EAAE,OAAO,GACvB,CACE,CACP,CAAC;IACJ,CAAC,CAAC;IAEF,SAAS,SAAS,CAAC,EAAqC,EAAE,MAA0B;QAClF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC","sourcesContent":["import * as React from 'react';\nimport { ChoiceGroup, IChoiceGroupOption } from 'office-ui-fabric-react/lib/ChoiceGroup';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { getId } from 'office-ui-fabric-react/lib/Utilities';\n\nexport const ChoiceGroupLabelExample: React.FunctionComponent = () => {\n  // Use getId() to ensure that the label ID is unique on the page. Notes:\n  // - It's also okay to use a plain string without getId() and manually ensure its uniqueness.\n  // - In a function component, we get the ID inside React.useMemo() so that it will stay the same.\n  //   (In a class component, you'd create the ID in the constructor and save it in a private member.)\n  const labelId = React.useMemo(() => getId('labelElement'), []);\n\n  return (\n    <div>\n      <Label id={labelId} required={true}>\n        Custom label\n      </Label>\n      <ChoiceGroup\n        defaultSelectedKey=\"B\"\n        options={[\n          {\n            key: 'A',\n            text: 'Option A'\n          },\n          {\n            key: 'B',\n            text: 'Option B'\n          },\n          {\n            key: 'C',\n            text: 'Option C',\n            disabled: true\n          },\n          {\n            key: 'D',\n            text: 'Option D'\n          }\n        ]}\n        onChange={_onChange}\n        ariaLabelledBy={labelId}\n      />\n    </div>\n  );\n};\n\nfunction _onChange(ev: React.FormEvent<HTMLInputElement>, option: IChoiceGroupOption): void {\n  console.dir(option);\n}\n"]}