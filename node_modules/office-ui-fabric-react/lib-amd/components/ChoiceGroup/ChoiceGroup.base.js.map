{"version":3,"file":"ChoiceGroup.base.js","sourceRoot":"../src/","sources":["components/ChoiceGroup/ChoiceGroup.base.tsx"],"names":[],"mappings":";;;IAiBA,IAAM,aAAa,GAAG,8BAAkB,EAA8C,CAAC;IAiBvF;;OAEG;IACH;QAAqC,2CAAqD;QAMxF,yBAAY,KAAwB;YAApC,YACE,kBAAM,KAAK,CAAC,SAqBb;YAzBO,qBAAe,GAA0D,EAAE,CAAC;YAC5E,sBAAgB,GAAyD,EAAE,CAAC;YA2H5E,aAAO,GAAG,UAAC,EAAiC,EAAE,MAA0B;gBAC9E,KAAI,CAAC,QAAQ,CAAC;oBACZ,UAAU,EAAE,SAAS;iBACtB,CAAC,CAAC;YACL,CAAC,CAAC;YA1HA,kCAAsB,CAAC,KAAI,CAAC,CAAC;YAE7B,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;gBACzC,4BAAgB,CAAC,aAAa,EAAE,KAAK,EAAE,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC;gBAClE,iCAAqB,CAAC,aAAa,EAAE,KAAK,EAAE;oBAC1C,WAAW,EAAE,oBAAoB;iBAClC,CAAC,CAAC;aACJ;YAEO,IAAA,6CAAkB,EAAE,kBAAY,EAAZ,iCAAY,CAAW;YACnD,IAAM,uBAAuB,GAC3B,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,kBAAkB,KAAK,SAAS,IAAI,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,GAAG,KAAK,kBAAkB,EAAjC,CAAiC,CAAC,CAAC;YAEzH,KAAI,CAAC,KAAK,GAAG;gBACX,UAAU,EAAE,uBAAuB,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC;aACtF,CAAC;YAEF,KAAI,CAAC,GAAG,GAAG,iBAAK,CAAC,aAAa,CAAC,CAAC;YAChC,KAAI,CAAC,QAAQ,GAAG,iBAAK,CAAC,kBAAkB,CAAC,CAAC;;QAC5C,CAAC;QAKD,sBAAW,0CAAa;YAHxB;;eAEG;iBACH;gBAAA,iBAGC;gBAFS,IAAA,uBAAY,EAAZ,iCAAY,CAAgB;gBACpC,OAAO,gBAAI,CAAC,OAAO,EAAE,UAAC,KAAyB,IAAK,OAAA,KAAK,CAAC,GAAG,KAAK,KAAI,CAAC,KAAK,CAAC,UAAU,EAAnC,CAAmC,CAAC,CAAC;YAC3F,CAAC;;;WAAA;QAEM,4CAAkB,GAAzB,UAA0B,SAA4B,EAAE,SAA4B;YAClF,wFAAwF;YACxF,IAAI,SAAS,KAAK,IAAI,CAAC,KAAK,EAAE;gBAC5B,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACtD,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBAErD,IAAI,aAAa,KAAK,aAAa,EAAE;oBACnC,IAAI,CAAC,QAAQ,CAAC;wBACZ,UAAU,EAAE,aAAa;qBAC1B,CAAC,CAAC;iBACJ;aACF;QACH,CAAC;QAEM,gCAAM,GAAb;YAAA,iBAoDC;YAnDO,IAAA,eAAwF,EAAtF,wBAAS,EAAE,gBAAK,EAAE,kBAAM,EAAE,eAAY,EAAZ,iCAAY,EAAE,gBAAK,EAAE,sBAAQ,EAAE,sBAAQ,EAAE,cAAmB,CAAC;YACzF,IAAA,eAAuC,EAArC,0BAAU,EAAE,0BAAyB,CAAC;YAE9C,IAAM,QAAQ,GAAG,0BAAc,CAAuC,IAAI,CAAC,KAAK,EAAE,yBAAa,EAAE,CAAC,UAAU,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;YAExI,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE;gBACxC,KAAK,EAAE,KAAM;gBACb,SAAS,WAAA;gBACT,yBAAyB,EAAE,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAvC,CAAuC,CAAC;aAC3F,CAAC,CAAC;YAEH,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC;YACpC,IAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAEtG,qFAAqF;YACrF,kFAAkF;YAClF,OAAO,CACL,8CAAK,SAAS,EAAE,UAAU,CAAC,eAAe,IAAM,QAAQ;gBACtD,8CAAK,SAAS,EAAE,UAAU,CAAC,IAAI,EAAE,IAAI,EAAC,YAAY,IAAK,cAAc,IAAI,EAAE,iBAAiB,EAAE,cAAc,EAAE;oBAC3G,KAAK,IAAI,CACR,oBAAC,aAAK,IAAC,SAAS,EAAE,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,IACpF,KAAK,CACA,CACT;oBACD,6BAAK,SAAS,EAAE,UAAU,CAAC,aAAa,IACrC,OAAO,CAAC,GAAG,CAAC,UAAC,MAA0B;wBACtC,IAAM,gBAAgB,wBACjB,MAAM,IACT,OAAO,EAAE,MAAM,CAAC,GAAG,KAAK,UAAU,EAClC,OAAO,EAAE,MAAM,CAAC,GAAG,KAAK,UAAU,EAClC,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,QAAQ,EACrC,EAAE,EAAE,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAC7B,OAAO,EAAK,KAAI,CAAC,QAAQ,SAAI,MAAM,CAAC,GAAK,EACzC,IAAI,EAAE,IAAI,IAAI,KAAI,CAAC,GAAG,EACtB,QAAQ,UAAA,GACT,CAAC;wBAEF,OAAO,CACL,oBAAC,yBAAiB,qBAChB,GAAG,EAAE,MAAM,CAAC,GAAG,EACf,MAAM,EAAE,KAAI,CAAC,OAAO,EACpB,OAAO,EAAE,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAClC,QAAQ,EAAE,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,IAChC,gBAAgB,EACpB,CACH,CAAC;oBACJ,CAAC,CAAC,CACE,CACF,CACF,CACP,CAAC;QACJ,CAAC;QAEM,+BAAK,GAAZ;YACU,IAAA,uBAAY,EAAZ,iCAAY,CAAgB;YACpC,IAAM,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,MAAM,CAAC,QAAQ,EAAhB,CAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1F,IAAM,cAAc,GAAG,aAAa,IAAI,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC;YAClG,IAAI,cAAc,EAAE;gBAClB,cAAc,CAAC,KAAK,EAAE,CAAC;aACxB;QACH,CAAC;QAEO,kCAAQ,GAAhB,UAAiB,GAAW;YAA5B,iBAUC;YATC,oGAAoG;YACpG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE;gBAC9B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,UAAC,EAAoD,EAAE,MAA0B;oBAC3G,KAAI,CAAC,QAAQ,CAAC;wBACZ,UAAU,EAAE,GAAG;qBAChB,CAAC,CAAC;gBACL,CAAC,CAAC;aACH;YACD,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QACnC,CAAC;QAQO,mCAAS,GAAjB,UAAkB,GAAW;YAA7B,iBAyBC;YAxBC,oGAAoG;YACpG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE;gBAC/B,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,UAAC,GAAoD,EAAE,MAA0B;oBACtG,IAAA,gBAAoC,EAAlC,wBAAS,EAAE,sBAAuB,CAAC;oBAE3C,+CAA+C;oBAC/C,IAAI,CAAC,aAAa,CAAC,KAAI,CAAC,KAAK,CAAC,EAAE;wBAC9B,KAAI,CAAC,QAAQ,CAAC;4BACZ,UAAU,EAAE,GAAG;yBAChB,CAAC,CAAC;qBACJ;oBAED,yDAAyD;oBACzD,IAAM,cAAc,GAAG,gBAAI,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,EAAE,UAAC,KAAyB,IAAK,OAAA,KAAK,CAAC,GAAG,KAAK,GAAG,EAAjB,CAAiB,CAAC,CAAC;oBAExG,+FAA+F;oBAC/F,IAAI,QAAQ,EAAE;wBACZ,QAAQ,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;qBAC/B;yBAAM,IAAI,SAAS,EAAE;wBACpB,SAAS,CAAC,cAAe,EAAE,GAAG,CAAC,CAAC;qBACjC;gBACH,CAAC,CAAC;aACH;YACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC;QAED;;WAEG;QACK,wCAAc,GAAtB,UAAuB,KAAwB;YAC7C,IAAI,KAAK,CAAC,WAAW,KAAK,SAAS,EAAE;gBACnC,OAAO,KAAK,CAAC,WAAW,CAAC;aAC1B;YAEO,IAAA,kBAAY,EAAZ,iCAAY,CAAW;YAC/B,IAAM,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,MAA0B,IAAK,OAAA,MAAM,CAAC,OAAO,EAAd,CAAc,CAAC,CAAC;YACtF,OAAO,cAAc,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QACpD,CAAC;QAEO,sCAAY,GAApB,UAAqB,MAA0B;YAC7C,OAAU,IAAI,CAAC,GAAG,SAAI,MAAM,CAAC,GAAK,CAAC;QACrC,CAAC;QACH,sBAAC;IAAD,CAAC,AAhLD,CAAqC,KAAK,CAAC,SAAS,GAgLnD;IAhLY,0CAAe;IAkL5B,SAAS,aAAa,CAAC,KAAwB;QAC7C,OAAO,wBAAY,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IAC5C,CAAC","sourcesContent":["import * as React from 'react';\n\nimport { Label } from '../../Label';\nimport {\n  initializeComponentRef,\n  warnDeprecations,\n  warnMutuallyExclusive,\n  classNamesFunction,\n  find,\n  getId,\n  isControlled,\n  getNativeProps,\n  divProperties\n} from '../../Utilities';\nimport { IChoiceGroup, IChoiceGroupOption, IChoiceGroupProps, IChoiceGroupStyleProps, IChoiceGroupStyles } from './ChoiceGroup.types';\nimport { ChoiceGroupOption, IChoiceGroupOptionProps } from './ChoiceGroupOption/index';\n\nconst getClassNames = classNamesFunction<IChoiceGroupStyleProps, IChoiceGroupStyles>();\n\nexport interface IChoiceGroupState {\n  /**\n   * Current selected option, for **internal use only**.\n   * External users should access `IChoiceGroup.checkedOption` instead.\n   */\n  // TODO (Fabric 8?) - once we removed the checked property from individual options,\n  // we can probably store only the uncontrolled value in the state (right now it tracks\n  // the value regardless of controlled/uncontrolled--though if controlled, it only updates\n  // the value in state when the selectedKey prop updates)\n  keyChecked?: string | number;\n\n  /** Is set when the control has focus. */\n  keyFocused?: string | number;\n}\n\n/**\n * {@docCategory ChoiceGroup}\n */\nexport class ChoiceGroupBase extends React.Component<IChoiceGroupProps, IChoiceGroupState> implements IChoiceGroup {\n  private _id: string;\n  private _labelId: string;\n  private _focusCallbacks: { [key: string]: IChoiceGroupOptionProps['onFocus'] } = {};\n  private _changeCallbacks: { [key: string]: IChoiceGroupOptionProps['onBlur'] } = {};\n\n  constructor(props: IChoiceGroupProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('ChoiceGroup', props, { onChanged: 'onChange' });\n      warnMutuallyExclusive('ChoiceGroup', props, {\n        selectedKey: 'defaultSelectedKey'\n      });\n    }\n\n    const { defaultSelectedKey, options = [] } = props;\n    const validDefaultSelectedKey =\n      !_isControlled(props) && defaultSelectedKey !== undefined && options.some(option => option.key === defaultSelectedKey);\n\n    this.state = {\n      keyChecked: validDefaultSelectedKey ? defaultSelectedKey : this._getKeyChecked(props)\n    };\n\n    this._id = getId('ChoiceGroup');\n    this._labelId = getId('ChoiceGroupLabel');\n  }\n\n  /**\n   * Gets the current checked option.\n   */\n  public get checkedOption(): IChoiceGroupOption | undefined {\n    const { options = [] } = this.props;\n    return find(options, (value: IChoiceGroupOption) => value.key === this.state.keyChecked);\n  }\n\n  public componentDidUpdate(prevProps: IChoiceGroupProps, prevState: IChoiceGroupState): void {\n    // Only update if a new props object has been passed in (don't care about state updates)\n    if (prevProps !== this.props) {\n      const newKeyChecked = this._getKeyChecked(this.props);\n      const oldKeyChecked = this._getKeyChecked(prevProps);\n\n      if (newKeyChecked !== oldKeyChecked) {\n        this.setState({\n          keyChecked: newKeyChecked\n        });\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const { className, theme, styles, options = [], label, required, disabled, name } = this.props;\n    const { keyChecked, keyFocused } = this.state;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['onChange', 'className', 'required']);\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      optionsContainIconOrImage: options.some(option => !!(option.iconProps || option.imageSrc))\n    });\n\n    const labelId = this._id + '-label';\n    const ariaLabelledBy = this.props.ariaLabelledBy || (label ? labelId : this.props['aria-labelledby']);\n\n    // TODO (Fabric 8?) - if possible, move `root` class to the actual root and eliminate\n    // `applicationRole` class (but the div structure will stay the same by necessity)\n    return (\n      <div className={classNames.applicationRole} {...divProps}>\n        <div className={classNames.root} role=\"radiogroup\" {...ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy }}>\n          {label && (\n            <Label className={classNames.label} required={required} id={labelId} disabled={disabled}>\n              {label}\n            </Label>\n          )}\n          <div className={classNames.flexContainer}>\n            {options.map((option: IChoiceGroupOption) => {\n              const innerOptionProps = {\n                ...option,\n                focused: option.key === keyFocused,\n                checked: option.key === keyChecked,\n                disabled: option.disabled || disabled,\n                id: this._getOptionId(option),\n                labelId: `${this._labelId}-${option.key}`,\n                name: name || this._id,\n                required\n              };\n\n              return (\n                <ChoiceGroupOption\n                  key={option.key}\n                  onBlur={this._onBlur}\n                  onFocus={this._onFocus(option.key)}\n                  onChange={this._onChange(option.key)}\n                  {...innerOptionProps}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public focus() {\n    const { options = [] } = this.props;\n    const optionToFocus = this.checkedOption || options.filter(option => !option.disabled)[0];\n    const elementToFocus = optionToFocus && document.getElementById(this._getOptionId(optionToFocus));\n    if (elementToFocus) {\n      elementToFocus.focus();\n    }\n  }\n\n  private _onFocus(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._focusCallbacks[key]) {\n      this._focusCallbacks[key] = (ev: React.FocusEvent<HTMLElement | HTMLInputElement>, option: IChoiceGroupOption) => {\n        this.setState({\n          keyFocused: key\n        });\n      };\n    }\n    return this._focusCallbacks[key];\n  }\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>, option: IChoiceGroupOption) => {\n    this.setState({\n      keyFocused: undefined\n    });\n  };\n\n  private _onChange(key: string) {\n    // This extra mess is necessary because React won't pass the `key` prop through to ChoiceGroupOption\n    if (!this._changeCallbacks[key]) {\n      this._changeCallbacks[key] = (evt: React.FormEvent<HTMLElement | HTMLInputElement>, option: IChoiceGroupOption) => {\n        const { onChanged, onChange } = this.props;\n\n        // Only manage state in uncontrolled scenarios.\n        if (!_isControlled(this.props)) {\n          this.setState({\n            keyChecked: key\n          });\n        }\n\n        // Get the original option without the `key` prop removed\n        const originalOption = find(this.props.options || [], (value: IChoiceGroupOption) => value.key === key);\n\n        // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption!, evt);\n        }\n      };\n    }\n    return this._changeCallbacks[key];\n  }\n\n  /**\n   * Returns `selectedKey` if provided, or the key of the first option with the `checked` prop set.\n   */\n  private _getKeyChecked(props: IChoiceGroupProps): string | number | undefined {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    const { options = [] } = props;\n    const optionsChecked = options.filter((option: IChoiceGroupOption) => option.checked);\n    return optionsChecked[0] && optionsChecked[0].key;\n  }\n\n  private _getOptionId(option: IChoiceGroupOption): string {\n    return `${this._id}-${option.key}`;\n  }\n}\n\nfunction _isControlled(props: IChoiceGroupProps): boolean {\n  return isControlled(props, 'selectedKey');\n}\n"]}