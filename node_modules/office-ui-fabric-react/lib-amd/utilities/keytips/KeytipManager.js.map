{"version":3,"file":"KeytipManager.js","sourceRoot":"../src/","sources":["utilities/keytips/KeytipManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { IKeytipProps } from '../../Keytip';\nimport { arraysEqual, replaceElement, findIndex, find, EventGroup, getId } from '../../Utilities';\nimport { KeytipEvents } from '../../utilities/keytips/KeytipConstants';\n\nexport interface IUniqueKeytip {\n  uniqueID: string;\n  keytip: IKeytipProps;\n}\n\n/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\nexport class KeytipManager {\n  private static _instance: KeytipManager = new KeytipManager();\n\n  public keytips: IUniqueKeytip[] = [];\n  public persistedKeytips: IUniqueKeytip[] = [];\n\n  // This is (and should be) updated and kept in sync\n  // with the inKeytipMode in KeytipLayer.\n  public inKeytipMode = false;\n\n  // Boolean that gets checked before entering keytip mode by the KeytipLayer\n  // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\n  public shouldEnterKeytipMode = true;\n\n  /**\n   * Static function to get singleton KeytipManager instance\n   *\n   * @returns {KeytipManager} Singleton KeytipManager instance\n   */\n  public static getInstance(): KeytipManager {\n    return this._instance;\n  }\n\n  /**\n   * Registers a keytip\n   *\n   * @param keytipProps - Keytip to register\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   * @returns {string} Unique ID for this keytip\n   */\n  public register(keytipProps: IKeytipProps, persisted: boolean = false): string {\n    let props: IKeytipProps = keytipProps;\n    if (!persisted) {\n      // Add the overflowSetSequence if necessary\n      props = this.addParentOverflow(keytipProps);\n    }\n    // Create a unique keytip\n    const uniqueKeytip: IUniqueKeytip = this._getUniqueKtp(props);\n    // Add to array\n    persisted ? this.persistedKeytips.push(uniqueKeytip) : this.keytips.push(uniqueKeytip);\n\n    const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\n    EventGroup.raise(this, event, {\n      keytip: props,\n      uniqueID: uniqueKeytip.uniqueID\n    });\n\n    return uniqueKeytip.uniqueID;\n  }\n\n  /**\n   * Update a keytip\n   *\n   * @param keytipProps - Keytip to update\n   * @param uniqueID - Unique ID of this keytip\n   */\n  public update(keytipProps: IKeytipProps, uniqueID: string): void {\n    const newKeytipProps = this.addParentOverflow(keytipProps);\n    const uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\n    const keytipIndex = findIndex(this.keytips, (ktp: IUniqueKeytip) => {\n      return ktp.uniqueID === uniqueID;\n    });\n    if (keytipIndex >= 0) {\n      // Update everything except 'visible'\n      uniqueKeytip.keytip.visible = this.keytips[keytipIndex].keytip.visible;\n      // Update keytip in this.keytips\n      this.keytips = replaceElement(this.keytips, uniqueKeytip, keytipIndex);\n      // Raise event\n      EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\n        keytip: uniqueKeytip.keytip,\n        uniqueID: uniqueKeytip.uniqueID\n      });\n    }\n  }\n\n  /**\n   * Unregisters a keytip\n   *\n   * @param keytipToRemove - IKeytipProps of the keytip to remove\n   * @param uniqueID - Unique ID of this keytip\n   * @param persisted - T/F if this keytip should be persisted, default is false\n   */\n  public unregister(keytipToRemove: IKeytipProps, uniqueID: string, persisted: boolean = false): void {\n    if (persisted) {\n      // Remove keytip from this.persistedKeytips\n      this.persistedKeytips = this.persistedKeytips.filter((uniqueKtp: IUniqueKeytip) => {\n        return uniqueKtp.uniqueID !== uniqueID;\n      });\n    } else {\n      // Remove keytip from this.keytips\n      this.keytips = this.keytips.filter((uniqueKtp: IUniqueKeytip) => {\n        return uniqueKtp.uniqueID !== uniqueID;\n      });\n    }\n\n    const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;\n    EventGroup.raise(this, event, {\n      keytip: keytipToRemove,\n      uniqueID: uniqueID\n    });\n  }\n\n  /**\n   * Manual call to enter keytip mode\n   */\n  public enterKeytipMode(): void {\n    EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\n  }\n\n  /**\n   * Manual call to exit keytip mode\n   */\n  public exitKeytipMode(): void {\n    EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\n  }\n\n  /**\n   * Gets all IKeytipProps from this.keytips\n   *\n   * @returns {IKeytipProps[]} All keytips stored in the manager\n   */\n  public getKeytips(): IKeytipProps[] {\n    return this.keytips.map((uniqueKeytip: IUniqueKeytip) => {\n      return uniqueKeytip.keytip;\n    });\n  }\n\n  /**\n   * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n   *\n   * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n   * @returns {IKeytipProps} - Modified keytip props, if needed to be modified\n   */\n  public addParentOverflow(keytipProps: IKeytipProps): IKeytipProps {\n    const fullSequence = [...keytipProps.keySequences];\n    fullSequence.pop();\n    if (fullSequence.length !== 0) {\n      const parentKeytip = find(this.getKeytips(), (keytip: IKeytipProps) => {\n        return arraysEqual(fullSequence, keytip.keySequences);\n      });\n      if (parentKeytip && parentKeytip.overflowSetSequence) {\n        return {\n          ...keytipProps,\n          overflowSetSequence: parentKeytip.overflowSetSequence\n        };\n      }\n    }\n    return keytipProps;\n  }\n\n  /**\n   * Public function to bind for overflow items that have a submenu\n   *\n   * @param overflowButtonSequences\n   * @param keytipSequences\n   */\n  public menuExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\n    EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\n      overflowButtonSequences,\n      keytipSequences\n    });\n  }\n\n  /**\n   * Creates an IUniqueKeytip object\n   *\n   * @param keytipProps - IKeytipProps\n   * @param uniqueID - Unique ID, will default to the next unique ID if not passed\n   * @returns {IUniqueKeytip} IUniqueKeytip object\n   */\n  private _getUniqueKtp(keytipProps: IKeytipProps, uniqueID: string = getId()): IUniqueKeytip {\n    return { keytip: { ...keytipProps }, uniqueID };\n  }\n}\n"]}